
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'right,rightADDASSIGNSUBASSIGNMULASSIGNDIVASSIGN=leftEQNOTEQGREATEREQLESSEREQ><left+-DOTADDDOTMINUSleft*/DOTMULDOTDIVright\'thenELSEnonassoc{}ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMINUS DOTMUL ELSE EQ EYE FLOATNUM FOR GREATEREQ ID IF INTNUM LESSEREQ MULASSIGN NORMSTRING NOTEQ ONES PRINT RETURN SUBASSIGN WHILE ZEROSprogram : statement_list primary_expression   : ID\n                            | INTNUM\n                            | FLOATNUM\n                            | NORMSTRING\n                            | \'(\' expression \')\'\n                            | \'[\' \']\'\n                            | \'[\' index_expression_list \']\' postfix_expression   : primary_expression\n                            | array_expression\n                            | postfix_expression "\'" index_expression     : \':\'\n                            | expression index_expression_list : index_expression \n                             | index_expression_list \',\' index_expression\n                             | index_expression_list \';\' index_expression print_index_expression_list  : ID\n                                    | print_index_expression_list \',\' ID  array_expression : ID \'(\' index_expression_list \')\' \n                        | ID \'[\' index_expression_list \']\' \n                        unary_expression     : postfix_expression\n                            | \'-\' postfix_expressionmultiplicative_expression    : unary_expression\n                                    | multiplicative_expression \'*\' unary_expression\n                                    | multiplicative_expression \'/\' unary_expression \n                                    | multiplicative_expression DOTMUL unary_expression\n                                    | multiplicative_expression DOTDIV unary_expression additive_expression  : multiplicative_expression\n                            | additive_expression \'+\' multiplicative_expression\n                            | additive_expression \'-\' multiplicative_expression\n                            | additive_expression DOTADD multiplicative_expression\n                            | additive_expression DOTMINUS multiplicative_expression                            relational_expression    : additive_expression\n                                | relational_expression \'<\' additive_expression\n                                | relational_expression \'>\' additive_expression\n                                | relational_expression LESSEREQ additive_expression\n                                | relational_expression GREATEREQ additive_expression equality_expression  : relational_expression\n                            | equality_expression EQ relational_expression\n                            | equality_expression NOTEQ relational_expression special_expression   : equality_expression\n                            | PRINT print_index_expression_list \n                            | PRINT NORMSTRING \n                            | RETURN expression\n                            | CONTINUE\n                            | BREAKexpression   : special_expression\n                    | expression \':\' special_expression assignment_expression    : postfix_expression \'=\' expression\n                                | postfix_expression ADDASSIGN expression\n                                | postfix_expression SUBASSIGN expression\n                                | postfix_expression MULASSIGN expression\n                                | postfix_expression DIVASSIGN expression init_expression     : ID "=" additive_expression \n                            | ID "=" ZEROS \'(\' index_expression_list \')\'\n                            | ID "=" ONES \'(\' index_expression_list \')\'\n                            | ID "=" EYE \'(\' index_expression_list \')\'  eostmt   :  \',\'\n                |  \';\' statement    : assignment_statement\n                    | expression_statement\n                    | selection_statement\n                    | iteration_statement \n                    | init_statement statement_list    : statement\n                         | statement statement_list expression_statement     : eostmt\n                                | expression eostmtassignment_statement     : assignment_expression eostmt init_statement     : init_expression eostmt selection_statement  : IF \'(\' expression \')\' statement %prec then\n                            | IF \'(\' expression \')\' statement ELSE statement \n                            | IF \'(\' expression \')\' \'{\' statement_list \'}\' %prec then\n                            | IF \'(\' expression \')\' \'{\' statement_list \'}\' ELSE \'{\' statement_list \'}\'\n                            iteration_statement  : WHILE \'(\' expression \')\' \'{\' statement_list \'}\'\n                            | FOR ID \'=\' expression \'{\' statement_list \'}\' \n                            | FOR \'(\' ID \'=\' expression \')\' \'{\' statement_list \'}\'  '
    
_lr_action_items = {'DOTDIV':([3,5,8,13,22,25,27,29,30,38,39,41,44,53,92,93,94,95,96,97,104,105,106,107,124,125,],[-23,-4,-21,-3,-5,71,-9,-10,-2,-21,-2,-22,-11,-7,-8,71,71,71,71,-6,-27,-24,-25,-26,-19,-20,]),'SUBASSIGN':([5,8,13,22,27,29,30,44,53,92,97,124,125,],[-4,43,-3,-5,-9,-10,-2,-11,-7,-8,-6,-19,-20,]),'RETURN':([0,1,2,6,11,14,15,16,17,20,21,26,28,42,43,45,46,47,48,52,68,75,76,80,81,82,90,91,103,122,126,127,128,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[2,-61,2,-58,2,2,-62,-60,-63,2,-59,-67,-64,2,2,2,2,2,2,-70,-69,2,2,2,-68,2,2,2,2,2,2,2,2,2,2,2,-71,2,2,-75,2,-76,-72,-73,-77,2,-74,]),'NOTEQ':([3,5,8,12,13,19,22,25,27,29,30,31,38,39,41,44,53,92,93,94,95,96,97,98,99,100,101,104,105,106,107,114,115,124,125,],[-23,-4,-21,-33,-3,-38,-5,-28,-9,-10,-2,78,-21,-2,-22,-11,-7,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,-40,-39,-19,-20,]),'FLOATNUM':([0,1,2,4,6,11,14,15,16,17,20,21,26,28,42,43,45,46,47,48,52,58,59,60,61,63,64,65,66,68,71,72,73,74,75,76,77,78,79,80,81,82,90,91,103,122,126,127,128,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[5,-61,5,5,-58,5,5,-62,-60,-63,5,-59,-67,-64,5,5,5,5,5,5,-70,5,5,5,5,5,5,5,5,-69,5,5,5,5,5,5,5,5,5,5,-68,5,5,5,5,5,5,5,5,5,5,5,-71,5,5,-75,5,-76,-72,-73,-77,5,-74,]),'DOTADD':([3,5,8,12,13,22,25,27,29,30,38,39,41,44,53,92,93,94,95,96,97,98,99,100,101,104,105,106,107,110,124,125,],[-23,-4,-21,60,-3,-5,-28,-9,-10,-2,-21,-2,-22,-11,-7,-8,-29,-30,-31,-32,-6,60,60,60,60,-27,-24,-25,-26,60,-19,-20,]),'WHILE':([0,1,6,15,16,17,20,21,26,28,52,68,81,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[7,-61,-58,-62,-60,-63,7,-59,-67,-64,-70,-69,-68,7,7,7,-71,7,7,-75,7,-76,-72,-73,-77,7,-74,]),'PRINT':([0,1,2,6,11,14,15,16,17,20,21,26,28,42,43,45,46,47,48,52,68,75,76,80,81,82,90,91,103,122,126,127,128,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[9,-61,9,-58,9,9,-62,-60,-63,9,-59,-67,-64,9,9,9,9,9,9,-70,-69,9,9,9,-68,9,9,9,9,9,9,9,9,9,9,9,-71,9,9,-75,9,-76,-72,-73,-77,9,-74,]),'DOTMUL':([3,5,8,13,22,25,27,29,30,38,39,41,44,53,92,93,94,95,96,97,104,105,106,107,124,125,],[-23,-4,-21,-3,-5,74,-9,-10,-2,-21,-2,-22,-11,-7,-8,74,74,74,74,-6,-27,-24,-25,-26,-19,-20,]),'INTNUM':([0,1,2,4,6,11,14,15,16,17,20,21,26,28,42,43,45,46,47,48,52,58,59,60,61,63,64,65,66,68,71,72,73,74,75,76,77,78,79,80,81,82,90,91,103,122,126,127,128,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[13,-61,13,13,-58,13,13,-62,-60,-63,13,-59,-67,-64,13,13,13,13,13,13,-70,13,13,13,13,13,13,13,13,-69,13,13,13,13,13,13,13,13,13,13,-68,13,13,13,13,13,13,13,13,13,13,13,-71,13,13,-75,13,-76,-72,-73,-77,13,-74,]),"'":([5,8,13,22,27,29,30,38,39,41,44,53,92,97,124,125,],[-4,44,-3,-5,-9,-10,-2,44,-2,44,-11,-7,-8,-6,-19,-20,]),')':([3,5,12,13,19,22,25,27,29,31,33,35,36,38,39,40,41,44,49,50,51,53,54,56,57,62,83,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,114,115,116,117,119,120,121,124,125,131,133,134,135,],[-23,-4,-33,-3,-38,-5,-28,-9,-10,-41,-47,-46,-45,-21,-2,-44,-22,-11,-42,-17,-43,-7,-12,-14,-13,97,118,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,124,-40,-39,129,-48,-18,-15,-16,-19,-20,139,141,142,143,]),'(':([0,1,2,4,6,7,11,14,15,16,17,20,21,24,26,28,30,32,39,42,43,45,46,47,48,52,58,59,60,61,63,64,65,66,68,71,72,73,74,75,76,77,78,79,80,81,82,90,91,103,111,112,113,122,126,127,128,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[14,-61,14,14,-58,42,14,14,-62,-60,-63,14,-59,69,-67,-64,75,80,75,14,14,14,14,14,14,-70,14,14,14,14,14,14,14,14,-69,14,14,14,14,14,14,14,14,14,14,-68,14,14,14,14,126,127,128,14,14,14,14,14,14,14,-71,14,14,-75,14,-76,-72,-73,-77,14,-74,]),'+':([3,5,8,12,13,22,25,27,29,30,38,39,41,44,53,92,93,94,95,96,97,98,99,100,101,104,105,106,107,110,124,125,],[-23,-4,-21,58,-3,-5,-28,-9,-10,-2,-21,-2,-22,-11,-7,-8,-29,-30,-31,-32,-6,58,58,58,58,-27,-24,-25,-26,58,-19,-20,]),'*':([3,5,8,13,22,25,27,29,30,38,39,41,44,53,92,93,94,95,96,97,104,105,106,107,124,125,],[-23,-4,-21,-3,-5,72,-9,-10,-2,-21,-2,-22,-11,-7,-8,72,72,72,72,-6,-27,-24,-25,-26,-19,-20,]),'-':([0,1,2,3,5,6,8,11,12,13,14,15,16,17,20,21,22,25,26,27,28,29,30,38,39,41,42,43,44,45,46,47,48,52,53,58,59,60,61,63,64,65,66,68,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,110,122,124,125,126,127,128,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[4,-61,4,-23,-4,-58,-21,4,59,-3,4,-62,-60,-63,4,-59,-5,-28,-67,-9,-64,-10,-2,-21,-2,-22,4,4,-11,4,4,4,4,-70,-7,4,4,4,4,4,4,4,4,-69,4,4,4,4,4,4,4,4,4,4,-68,4,4,4,-8,-29,-30,-31,-32,-6,59,59,59,59,4,-27,-24,-25,-26,59,4,-19,-20,4,4,4,4,4,4,-71,4,4,-75,4,-76,-72,-73,-77,4,-74,]),',':([0,1,3,5,6,8,10,12,13,15,16,17,19,20,21,22,23,25,26,27,28,29,30,31,33,34,35,36,38,39,40,41,44,49,50,51,52,53,54,55,56,57,68,81,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,109,110,114,115,117,119,120,121,124,125,129,130,132,133,134,135,136,137,141,142,143,144,146,147,148,149,150,153,154,156,],[6,-61,-23,-4,-58,-21,6,-33,-3,-62,-60,-63,-38,6,-59,-5,6,-28,-67,-9,-64,-10,-2,-41,-47,6,-46,-45,-21,-2,-44,-22,-11,89,-17,-43,-70,-7,-12,90,-14,-13,-69,-68,-51,-49,-53,-52,-50,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,90,90,-54,-40,-39,-48,-18,-15,-16,-19,-20,6,6,6,90,90,90,-71,6,-57,-56,-55,6,-75,6,-76,-72,-73,-77,6,-74,]),'/':([3,5,8,13,22,25,27,29,30,38,39,41,44,53,92,93,94,95,96,97,104,105,106,107,124,125,],[-23,-4,-21,-3,-5,73,-9,-10,-2,-21,-2,-22,-11,-7,-8,73,73,73,73,-6,-27,-24,-25,-26,-19,-20,]),'DIVASSIGN':([5,8,13,22,27,29,30,44,53,92,97,124,125,],[-4,46,-3,-5,-9,-10,-2,-11,-7,-8,-6,-19,-20,]),'GREATEREQ':([3,5,8,12,13,19,22,25,27,29,30,38,39,41,44,53,92,93,94,95,96,97,98,99,100,101,104,105,106,107,114,115,124,125,],[-23,-4,-21,-33,-3,64,-5,-28,-9,-10,-2,-21,-2,-22,-11,-7,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,64,64,-19,-20,]),'ADDASSIGN':([5,8,13,22,27,29,30,44,53,92,97,124,125,],[-4,48,-3,-5,-9,-10,-2,-11,-7,-8,-6,-19,-20,]),';':([0,1,3,5,6,8,10,12,13,15,16,17,19,20,21,22,23,25,26,27,28,29,30,31,33,34,35,36,38,39,40,41,44,49,50,51,52,53,54,55,56,57,68,81,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,109,110,114,115,117,119,120,121,124,125,129,130,132,133,134,135,136,137,141,142,143,144,146,147,148,149,150,153,154,156,],[21,-61,-23,-4,-58,-21,21,-33,-3,-62,-60,-63,-38,21,-59,-5,21,-28,-67,-9,-64,-10,-2,-41,-47,21,-46,-45,-21,-2,-44,-22,-11,-42,-17,-43,-70,-7,-12,91,-14,-13,-69,-68,-51,-49,-53,-52,-50,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,91,91,-54,-40,-39,-48,-18,-15,-16,-19,-20,21,21,21,91,91,91,-71,21,-57,-56,-55,21,-75,21,-76,-72,-73,-77,21,-74,]),':':([3,5,8,11,12,13,19,22,25,27,29,30,31,33,34,35,36,38,39,40,41,44,49,50,51,53,57,62,75,76,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,107,114,115,116,117,119,123,124,125,126,127,128,131,],[-23,-4,-21,54,-33,-3,-38,-5,-28,-9,-10,-2,-41,-47,82,-46,-45,-21,-2,82,-22,-11,-42,-17,-43,-7,82,82,54,54,82,82,82,82,82,82,54,54,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,-40,-39,82,-48,-18,82,-19,-20,54,54,54,82,]),'=':([5,8,13,22,27,29,30,44,53,70,92,97,102,124,125,],[-4,45,-3,-5,-9,-10,77,-11,-7,103,-8,-6,122,-19,-20,]),'<':([3,5,8,12,13,19,22,25,27,29,30,38,39,41,44,53,92,93,94,95,96,97,98,99,100,101,104,105,106,107,114,115,124,125,],[-23,-4,-21,-33,-3,65,-5,-28,-9,-10,-2,-21,-2,-22,-11,-7,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,65,65,-19,-20,]),'$end':([1,6,15,16,17,18,20,21,26,28,37,52,67,68,81,136,146,148,149,150,153,156,],[-61,-58,-62,-60,-63,0,-65,-59,-67,-64,-1,-70,-66,-69,-68,-71,-75,-76,-72,-73,-77,-74,]),'EYE':([77,],[111,]),'FOR':([0,1,6,15,16,17,20,21,26,28,52,68,81,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[24,-61,-58,-62,-60,-63,24,-59,-67,-64,-70,-69,-68,24,24,24,-71,24,24,-75,24,-76,-72,-73,-77,24,-74,]),'ELSE':([1,6,15,16,17,21,26,28,52,68,81,136,146,148,149,150,153,156,],[-61,-58,-62,-60,-63,-59,-67,-64,-70,-69,-68,144,-75,-76,-72,152,-77,-74,]),'>':([3,5,8,12,13,19,22,25,27,29,30,38,39,41,44,53,92,93,94,95,96,97,98,99,100,101,104,105,106,107,114,115,124,125,],[-23,-4,-21,-33,-3,66,-5,-28,-9,-10,-2,-21,-2,-22,-11,-7,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,66,66,-19,-20,]),'ONES':([77,],[112,]),'ZEROS':([77,],[113,]),'DOTMINUS':([3,5,8,12,13,22,25,27,29,30,38,39,41,44,53,92,93,94,95,96,97,98,99,100,101,104,105,106,107,110,124,125,],[-23,-4,-21,61,-3,-5,-28,-9,-10,-2,-21,-2,-22,-11,-7,-8,-29,-30,-31,-32,-6,61,61,61,61,-27,-24,-25,-26,61,-19,-20,]),'[':([0,1,2,4,6,11,14,15,16,17,20,21,26,28,30,39,42,43,45,46,47,48,52,58,59,60,61,63,64,65,66,68,71,72,73,74,75,76,77,78,79,80,81,82,90,91,103,122,126,127,128,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[11,-61,11,11,-58,11,11,-62,-60,-63,11,-59,-67,-64,76,76,11,11,11,11,11,11,-70,11,11,11,11,11,11,11,11,-69,11,11,11,11,11,11,11,11,11,11,-68,11,11,11,11,11,11,11,11,11,11,11,-71,11,11,-75,11,-76,-72,-73,-77,11,-74,]),']':([3,5,11,12,13,19,22,25,27,29,31,33,35,36,38,39,40,41,44,49,50,51,53,54,55,56,57,92,93,94,95,96,97,98,99,100,101,104,105,106,107,109,114,115,117,119,120,121,124,125,],[-23,-4,53,-33,-3,-38,-5,-28,-9,-10,-41,-47,-46,-45,-21,-2,-44,-22,-11,-42,-17,-43,-7,-12,92,-14,-13,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,125,-40,-39,-48,-18,-15,-16,-19,-20,]),'ID':([0,1,2,4,6,9,11,14,15,16,17,20,21,24,26,28,42,43,45,46,47,48,52,58,59,60,61,63,64,65,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,89,90,91,103,122,126,127,128,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[30,-61,39,39,-58,50,39,39,-62,-60,-63,30,-59,70,-67,-64,39,39,39,39,39,39,-70,39,39,39,39,39,39,39,39,-69,102,39,39,39,39,39,39,39,39,39,39,-68,39,119,39,39,39,39,39,39,39,30,30,30,-71,30,30,-75,30,-76,-72,-73,-77,30,-74,]),'IF':([0,1,6,15,16,17,20,21,26,28,52,68,81,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[32,-61,-58,-62,-60,-63,32,-59,-67,-64,-70,-69,-68,32,32,32,-71,32,32,-75,32,-76,-72,-73,-77,32,-74,]),'EQ':([3,5,8,12,13,19,22,25,27,29,30,31,38,39,41,44,53,92,93,94,95,96,97,98,99,100,101,104,105,106,107,114,115,124,125,],[-23,-4,-21,-33,-3,-38,-5,-28,-9,-10,-2,79,-21,-2,-22,-11,-7,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,-40,-39,-19,-20,]),'LESSEREQ':([3,5,8,12,13,19,22,25,27,29,30,38,39,41,44,53,92,93,94,95,96,97,98,99,100,101,104,105,106,107,114,115,124,125,],[-23,-4,-21,-33,-3,63,-5,-28,-9,-10,-2,-21,-2,-22,-11,-7,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,63,63,-19,-20,]),'BREAK':([0,1,2,6,11,14,15,16,17,20,21,26,28,42,43,45,46,47,48,52,68,75,76,80,81,82,90,91,103,122,126,127,128,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[35,-61,35,-58,35,35,-62,-60,-63,35,-59,-67,-64,35,35,35,35,35,35,-70,-69,35,35,35,-68,35,35,35,35,35,35,35,35,35,35,35,-71,35,35,-75,35,-76,-72,-73,-77,35,-74,]),'CONTINUE':([0,1,2,6,11,14,15,16,17,20,21,26,28,42,43,45,46,47,48,52,68,75,76,80,81,82,90,91,103,122,126,127,128,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[36,-61,36,-58,36,36,-62,-60,-63,36,-59,-67,-64,36,36,36,36,36,36,-70,-69,36,36,36,-68,36,36,36,36,36,36,36,36,36,36,36,-71,36,36,-75,36,-76,-72,-73,-77,36,-74,]),'MULASSIGN':([5,8,13,22,27,29,30,44,53,92,97,124,125,],[-4,47,-3,-5,-9,-10,-2,-11,-7,-8,-6,-19,-20,]),'{':([3,5,12,13,19,22,25,27,29,31,33,35,36,38,39,40,41,44,49,50,51,53,92,93,94,95,96,97,98,99,100,101,104,105,106,107,114,115,117,118,119,123,124,125,129,139,152,],[-23,-4,-33,-3,-38,-5,-28,-9,-10,-41,-47,-46,-45,-21,-2,-44,-22,-11,-42,-17,-43,-7,-8,-29,-30,-31,-32,-6,-36,-37,-34,-35,-27,-24,-25,-26,-40,-39,-48,130,-18,132,-19,-20,137,147,154,]),'NORMSTRING':([0,1,2,4,6,9,11,14,15,16,17,20,21,26,28,42,43,45,46,47,48,52,58,59,60,61,63,64,65,66,68,71,72,73,74,75,76,77,78,79,80,81,82,90,91,103,122,126,127,128,129,130,132,136,137,144,146,147,148,149,150,153,154,156,],[22,-61,22,22,-58,51,22,22,-62,-60,-63,22,-59,-67,-64,22,22,22,22,22,22,-70,22,22,22,22,22,22,22,22,-69,22,22,22,22,22,22,22,22,22,22,-68,22,22,22,22,22,22,22,22,22,22,22,-71,22,22,-75,22,-76,-72,-73,-77,22,-74,]),'}':([1,6,15,16,17,20,21,26,28,52,67,68,81,136,138,140,145,146,148,149,150,151,153,155,156,],[-61,-58,-62,-60,-63,-65,-59,-67,-64,-70,-66,-69,-68,-71,146,148,150,-75,-76,-72,-73,153,-77,156,-74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([0,20,129,130,132,137,144,147,154,],[1,1,1,1,1,1,1,1,1,]),'unary_expression':([0,2,11,14,20,42,43,45,46,47,48,58,59,60,61,63,64,65,66,71,72,73,74,75,76,77,78,79,80,82,90,91,103,122,126,127,128,129,130,132,137,144,147,154,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,104,105,106,107,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'iteration_statement':([0,20,129,130,132,137,144,147,154,],[17,17,17,17,17,17,17,17,17,]),'additive_expression':([0,2,11,14,20,42,43,45,46,47,48,63,64,65,66,75,76,77,78,79,80,82,90,91,103,122,126,127,128,129,130,132,137,144,147,154,],[12,12,12,12,12,12,12,12,12,12,12,98,99,100,101,12,12,110,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'init_expression':([0,20,129,130,132,137,144,147,154,],[10,10,10,10,10,10,10,10,10,]),'selection_statement':([0,20,129,130,132,137,144,147,154,],[15,15,15,15,15,15,15,15,15,]),'assignment_statement':([0,20,129,130,132,137,144,147,154,],[16,16,16,16,16,16,16,16,16,]),'postfix_expression':([0,2,4,11,14,20,42,43,45,46,47,48,58,59,60,61,63,64,65,66,71,72,73,74,75,76,77,78,79,80,82,90,91,103,122,126,127,128,129,130,132,137,144,147,154,],[8,38,41,38,38,8,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,8,8,8,8,8,8,8,]),'program':([0,],[18,]),'relational_expression':([0,2,11,14,20,42,43,45,46,47,48,75,76,78,79,80,82,90,91,103,122,126,127,128,129,130,132,137,144,147,154,],[19,19,19,19,19,19,19,19,19,19,19,19,19,114,115,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'statement':([0,20,129,130,132,137,144,147,154,],[20,20,136,20,20,20,149,20,20,]),'assignment_expression':([0,20,129,130,132,137,144,147,154,],[23,23,23,23,23,23,23,23,23,]),'multiplicative_expression':([0,2,11,14,20,42,43,45,46,47,48,58,59,60,61,63,64,65,66,75,76,77,78,79,80,82,90,91,103,122,126,127,128,129,130,132,137,144,147,154,],[25,25,25,25,25,25,25,25,25,25,25,93,94,95,96,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'eostmt':([0,10,20,23,34,129,130,132,137,144,147,154,],[26,52,26,68,81,26,26,26,26,26,26,26,]),'index_expression_list':([11,75,76,126,127,128,],[55,108,109,133,134,135,]),'primary_expression':([0,2,4,11,14,20,42,43,45,46,47,48,58,59,60,61,63,64,65,66,71,72,73,74,75,76,77,78,79,80,82,90,91,103,122,126,127,128,129,130,132,137,144,147,154,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'init_statement':([0,20,129,130,132,137,144,147,154,],[28,28,28,28,28,28,28,28,28,]),'print_index_expression_list':([9,],[49,]),'array_expression':([0,2,4,11,14,20,42,43,45,46,47,48,58,59,60,61,63,64,65,66,71,72,73,74,75,76,77,78,79,80,82,90,91,103,122,126,127,128,129,130,132,137,144,147,154,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'equality_expression':([0,2,11,14,20,42,43,45,46,47,48,75,76,80,82,90,91,103,122,126,127,128,129,130,132,137,144,147,154,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'special_expression':([0,2,11,14,20,42,43,45,46,47,48,75,76,80,82,90,91,103,122,126,127,128,129,130,132,137,144,147,154,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,117,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'index_expression':([11,75,76,90,91,126,127,128,],[56,56,56,120,121,56,56,56,]),'statement_list':([0,20,130,132,137,147,154,],[37,67,138,140,145,151,155,]),'expression':([0,2,11,14,20,42,43,45,46,47,48,75,76,80,90,91,103,122,126,127,128,129,130,132,137,144,147,154,],[34,40,57,62,34,83,84,85,86,87,88,57,57,116,57,57,123,131,57,57,57,34,34,34,34,34,34,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Mparser.py',21),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','Mparser.py',27),
  ('primary_expression -> INTNUM','primary_expression',1,'p_primary_expression','Mparser.py',28),
  ('primary_expression -> FLOATNUM','primary_expression',1,'p_primary_expression','Mparser.py',29),
  ('primary_expression -> NORMSTRING','primary_expression',1,'p_primary_expression','Mparser.py',30),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','Mparser.py',31),
  ('primary_expression -> [ ]','primary_expression',2,'p_primary_expression','Mparser.py',32),
  ('primary_expression -> [ index_expression_list ]','primary_expression',3,'p_primary_expression','Mparser.py',33),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','Mparser.py',48),
  ('postfix_expression -> array_expression','postfix_expression',1,'p_postfix_expression','Mparser.py',49),
  ("postfix_expression -> postfix_expression '",'postfix_expression',2,'p_postfix_expression','Mparser.py',50),
  ('index_expression -> :','index_expression',1,'p_index_expression','Mparser.py',57),
  ('index_expression -> expression','index_expression',1,'p_index_expression','Mparser.py',58),
  ('index_expression_list -> index_expression','index_expression_list',1,'p_index_expression_list','Mparser.py',62),
  ('index_expression_list -> index_expression_list , index_expression','index_expression_list',3,'p_index_expression_list','Mparser.py',63),
  ('index_expression_list -> index_expression_list ; index_expression','index_expression_list',3,'p_index_expression_list','Mparser.py',64),
  ('print_index_expression_list -> ID','print_index_expression_list',1,'p_print_index_expression_list','Mparser.py',88),
  ('print_index_expression_list -> print_index_expression_list , ID','print_index_expression_list',3,'p_print_index_expression_list','Mparser.py',89),
  ('array_expression -> ID ( index_expression_list )','array_expression',4,'p_array_expression','Mparser.py',98),
  ('array_expression -> ID [ index_expression_list ]','array_expression',4,'p_array_expression','Mparser.py',99),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','Mparser.py',109),
  ('unary_expression -> - postfix_expression','unary_expression',2,'p_unary_expression','Mparser.py',110),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','Mparser.py',118),
  ('multiplicative_expression -> multiplicative_expression * unary_expression','multiplicative_expression',3,'p_multiplicative_expression','Mparser.py',119),
  ('multiplicative_expression -> multiplicative_expression / unary_expression','multiplicative_expression',3,'p_multiplicative_expression','Mparser.py',120),
  ('multiplicative_expression -> multiplicative_expression DOTMUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','Mparser.py',121),
  ('multiplicative_expression -> multiplicative_expression DOTDIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','Mparser.py',122),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','Mparser.py',136),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_expression','Mparser.py',137),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_expression','Mparser.py',138),
  ('additive_expression -> additive_expression DOTADD multiplicative_expression','additive_expression',3,'p_additive_expression','Mparser.py',139),
  ('additive_expression -> additive_expression DOTMINUS multiplicative_expression','additive_expression',3,'p_additive_expression','Mparser.py',140),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','Mparser.py',158),
  ('relational_expression -> relational_expression < additive_expression','relational_expression',3,'p_relational_expression','Mparser.py',159),
  ('relational_expression -> relational_expression > additive_expression','relational_expression',3,'p_relational_expression','Mparser.py',160),
  ('relational_expression -> relational_expression LESSEREQ additive_expression','relational_expression',3,'p_relational_expression','Mparser.py',161),
  ('relational_expression -> relational_expression GREATEREQ additive_expression','relational_expression',3,'p_relational_expression','Mparser.py',162),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','Mparser.py',175),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','Mparser.py',176),
  ('equality_expression -> equality_expression NOTEQ relational_expression','equality_expression',3,'p_equality_expression','Mparser.py',177),
  ('special_expression -> equality_expression','special_expression',1,'p_special_expression','Mparser.py',186),
  ('special_expression -> PRINT print_index_expression_list','special_expression',2,'p_special_expression','Mparser.py',187),
  ('special_expression -> PRINT NORMSTRING','special_expression',2,'p_special_expression','Mparser.py',188),
  ('special_expression -> RETURN expression','special_expression',2,'p_special_expression','Mparser.py',189),
  ('special_expression -> CONTINUE','special_expression',1,'p_special_expression','Mparser.py',190),
  ('special_expression -> BREAK','special_expression',1,'p_special_expression','Mparser.py',191),
  ('expression -> special_expression','expression',1,'p_expression','Mparser.py',206),
  ('expression -> expression : special_expression','expression',3,'p_expression','Mparser.py',207),
  ('assignment_expression -> postfix_expression = expression','assignment_expression',3,'p_assignment_expression','Mparser.py',215),
  ('assignment_expression -> postfix_expression ADDASSIGN expression','assignment_expression',3,'p_assignment_expression','Mparser.py',216),
  ('assignment_expression -> postfix_expression SUBASSIGN expression','assignment_expression',3,'p_assignment_expression','Mparser.py',217),
  ('assignment_expression -> postfix_expression MULASSIGN expression','assignment_expression',3,'p_assignment_expression','Mparser.py',218),
  ('assignment_expression -> postfix_expression DIVASSIGN expression','assignment_expression',3,'p_assignment_expression','Mparser.py',219),
  ('init_expression -> ID = additive_expression','init_expression',3,'p_init_expression','Mparser.py',232),
  ('init_expression -> ID = ZEROS ( index_expression_list )','init_expression',6,'p_init_expression','Mparser.py',233),
  ('init_expression -> ID = ONES ( index_expression_list )','init_expression',6,'p_init_expression','Mparser.py',234),
  ('init_expression -> ID = EYE ( index_expression_list )','init_expression',6,'p_init_expression','Mparser.py',235),
  ('eostmt -> ,','eostmt',1,'p_eostmt','Mparser.py',246),
  ('eostmt -> ;','eostmt',1,'p_eostmt','Mparser.py',247),
  ('statement -> assignment_statement','statement',1,'p_statement','Mparser.py',251),
  ('statement -> expression_statement','statement',1,'p_statement','Mparser.py',252),
  ('statement -> selection_statement','statement',1,'p_statement','Mparser.py',253),
  ('statement -> iteration_statement','statement',1,'p_statement','Mparser.py',254),
  ('statement -> init_statement','statement',1,'p_statement','Mparser.py',255),
  ('statement_list -> statement','statement_list',1,'p_statement_list','Mparser.py',260),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','Mparser.py',261),
  ('expression_statement -> eostmt','expression_statement',1,'p_expression_statement','Mparser.py',277),
  ('expression_statement -> expression eostmt','expression_statement',2,'p_expression_statement','Mparser.py',278),
  ('assignment_statement -> assignment_expression eostmt','assignment_statement',2,'p_assignment_statement','Mparser.py',286),
  ('init_statement -> init_expression eostmt','init_statement',2,'p_init_statement','Mparser.py',290),
  ('selection_statement -> IF ( expression ) statement','selection_statement',5,'p_selection_statement','Mparser.py',294),
  ('selection_statement -> IF ( expression ) statement ELSE statement','selection_statement',7,'p_selection_statement','Mparser.py',295),
  ('selection_statement -> IF ( expression ) { statement_list }','selection_statement',7,'p_selection_statement','Mparser.py',296),
  ('selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list }','selection_statement',11,'p_selection_statement','Mparser.py',297),
  ('iteration_statement -> WHILE ( expression ) { statement_list }','iteration_statement',7,'p_iteration_statement','Mparser.py',309),
  ('iteration_statement -> FOR ID = expression { statement_list }','iteration_statement',7,'p_iteration_statement','Mparser.py',310),
  ('iteration_statement -> FOR ( ID = expression ) { statement_list }','iteration_statement',9,'p_iteration_statement','Mparser.py',311),
]
