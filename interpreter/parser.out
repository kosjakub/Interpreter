Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     primary_expression -> ID
Rule 3     primary_expression -> INTNUM
Rule 4     primary_expression -> FLOATNUM
Rule 5     primary_expression -> NORMSTRING
Rule 6     primary_expression -> ( expression )
Rule 7     primary_expression -> [ ]
Rule 8     primary_expression -> [ index_expression_list ]
Rule 9     postfix_expression -> primary_expression
Rule 10    postfix_expression -> array_expression
Rule 11    postfix_expression -> postfix_expression '
Rule 12    index_expression -> :
Rule 13    index_expression -> expression
Rule 14    index_expression_list -> index_expression
Rule 15    index_expression_list -> index_expression_list , index_expression
Rule 16    index_expression_list -> index_expression_list ; index_expression
Rule 17    print_index_expression_list -> ID
Rule 18    print_index_expression_list -> print_index_expression_list , ID
Rule 19    array_expression -> ID ( index_expression_list )
Rule 20    array_expression -> ID [ index_expression_list ]
Rule 21    unary_expression -> postfix_expression
Rule 22    unary_expression -> - postfix_expression
Rule 23    multiplicative_expression -> unary_expression
Rule 24    multiplicative_expression -> multiplicative_expression * unary_expression
Rule 25    multiplicative_expression -> multiplicative_expression / unary_expression
Rule 26    multiplicative_expression -> multiplicative_expression DOTMUL unary_expression
Rule 27    multiplicative_expression -> multiplicative_expression DOTDIV unary_expression
Rule 28    additive_expression -> multiplicative_expression
Rule 29    additive_expression -> additive_expression + multiplicative_expression
Rule 30    additive_expression -> additive_expression - multiplicative_expression
Rule 31    additive_expression -> additive_expression DOTADD multiplicative_expression
Rule 32    additive_expression -> additive_expression DOTMINUS multiplicative_expression
Rule 33    relational_expression -> additive_expression
Rule 34    relational_expression -> relational_expression < additive_expression
Rule 35    relational_expression -> relational_expression > additive_expression
Rule 36    relational_expression -> relational_expression LESSEREQ additive_expression
Rule 37    relational_expression -> relational_expression GREATEREQ additive_expression
Rule 38    equality_expression -> relational_expression
Rule 39    equality_expression -> equality_expression EQ relational_expression
Rule 40    equality_expression -> equality_expression NOTEQ relational_expression
Rule 41    special_expression -> equality_expression
Rule 42    special_expression -> PRINT print_index_expression_list
Rule 43    special_expression -> PRINT NORMSTRING
Rule 44    special_expression -> RETURN expression
Rule 45    special_expression -> CONTINUE
Rule 46    special_expression -> BREAK
Rule 47    expression -> special_expression
Rule 48    expression -> expression : special_expression
Rule 49    assignment_expression -> postfix_expression = expression
Rule 50    assignment_expression -> postfix_expression ADDASSIGN expression
Rule 51    assignment_expression -> postfix_expression SUBASSIGN expression
Rule 52    assignment_expression -> postfix_expression MULASSIGN expression
Rule 53    assignment_expression -> postfix_expression DIVASSIGN expression
Rule 54    init_expression -> ID = additive_expression
Rule 55    init_expression -> ID = ZEROS ( index_expression_list )
Rule 56    init_expression -> ID = ONES ( index_expression_list )
Rule 57    init_expression -> ID = EYE ( index_expression_list )
Rule 58    eostmt -> ,
Rule 59    eostmt -> ;
Rule 60    statement -> assignment_statement
Rule 61    statement -> expression_statement
Rule 62    statement -> selection_statement
Rule 63    statement -> iteration_statement
Rule 64    statement -> init_statement
Rule 65    statement_list -> statement
Rule 66    statement_list -> statement statement_list
Rule 67    expression_statement -> eostmt
Rule 68    expression_statement -> expression eostmt
Rule 69    assignment_statement -> assignment_expression eostmt
Rule 70    init_statement -> init_expression eostmt
Rule 71    selection_statement -> IF ( expression ) statement
Rule 72    selection_statement -> IF ( expression ) statement ELSE statement
Rule 73    selection_statement -> IF ( expression ) { statement_list }
Rule 74    selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list }
Rule 75    iteration_statement -> WHILE ( expression ) { statement_list }
Rule 76    iteration_statement -> FOR ID = expression { statement_list }
Rule 77    iteration_statement -> FOR ( ID = expression ) { statement_list }

Terminals, with rules where they appear

'                    : 11
(                    : 6 19 55 56 57 71 72 73 74 75 77
)                    : 6 19 55 56 57 71 72 73 74 75 77
*                    : 24
+                    : 29
,                    : 15 18 58
-                    : 22 30
/                    : 25
:                    : 12 48
;                    : 16 59
<                    : 34
=                    : 49 54 55 56 57 76 77
>                    : 35
ADDASSIGN            : 50
BREAK                : 46
CONTINUE             : 45
DIVASSIGN            : 53
DOTADD               : 31
DOTDIV               : 27
DOTMINUS             : 32
DOTMUL               : 26
ELSE                 : 72 74
EQ                   : 39
EYE                  : 57
FLOATNUM             : 4
FOR                  : 76 77
GREATEREQ            : 37
ID                   : 2 17 18 19 20 54 55 56 57 76 77
IF                   : 71 72 73 74
INTNUM               : 3
LESSEREQ             : 36
MULASSIGN            : 52
NORMSTRING           : 5 43
NOTEQ                : 40
ONES                 : 56
PRINT                : 42 43
RETURN               : 44
SUBASSIGN            : 51
WHILE                : 75
ZEROS                : 55
[                    : 7 8 20
]                    : 7 8 20
error                : 
{                    : 73 74 74 75 76 77
}                    : 73 74 74 75 76 77

Nonterminals, with rules where they appear

additive_expression  : 29 30 31 32 33 34 35 36 37 54
array_expression     : 10
assignment_expression : 69
assignment_statement : 60
eostmt               : 67 68 69 70
equality_expression  : 39 40 41
expression           : 6 13 44 48 49 50 51 52 53 68 71 72 73 74 75 76 77
expression_statement : 61
index_expression     : 14 15 16
index_expression_list : 8 15 16 19 20 55 56 57
init_expression      : 70
init_statement       : 64
iteration_statement  : 63
multiplicative_expression : 24 25 26 27 28 29 30 31 32
postfix_expression   : 11 21 22 49 50 51 52 53
primary_expression   : 9
print_index_expression_list : 18 42
program              : 0
relational_expression : 34 35 36 37 38 39 40
selection_statement  : 62
special_expression   : 47 48
statement            : 65 66 71 72 72
statement_list       : 1 66 73 74 74 75 76 77
unary_expression     : 23 24 25 26 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (65) statement_list -> . statement
    (66) statement_list -> . statement statement_list
    (60) statement -> . assignment_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . init_statement
    (69) assignment_statement -> . assignment_expression eostmt
    (67) expression_statement -> . eostmt
    (68) expression_statement -> . expression eostmt
    (71) selection_statement -> . IF ( expression ) statement
    (72) selection_statement -> . IF ( expression ) statement ELSE statement
    (73) selection_statement -> . IF ( expression ) { statement_list }
    (74) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (75) iteration_statement -> . WHILE ( expression ) { statement_list }
    (76) iteration_statement -> . FOR ID = expression { statement_list }
    (77) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (70) init_statement -> . init_expression eostmt
    (49) assignment_expression -> . postfix_expression = expression
    (50) assignment_expression -> . postfix_expression ADDASSIGN expression
    (51) assignment_expression -> . postfix_expression SUBASSIGN expression
    (52) assignment_expression -> . postfix_expression MULASSIGN expression
    (53) assignment_expression -> . postfix_expression DIVASSIGN expression
    (58) eostmt -> . ,
    (59) eostmt -> . ;
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (54) init_expression -> . ID = additive_expression
    (55) init_expression -> . ID = ZEROS ( index_expression_list )
    (56) init_expression -> . ID = ONES ( index_expression_list )
    (57) init_expression -> . ID = EYE ( index_expression_list )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression

    IF              shift and go to state 32
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    ,               shift and go to state 6
    ;               shift and go to state 21
    ID              shift and go to state 30
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11
    -               shift and go to state 4

    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 3
    init_expression                shift and go to state 10
    additive_expression            shift and go to state 12
    iteration_statement            shift and go to state 17
    selection_statement            shift and go to state 15
    assignment_statement           shift and go to state 16
    postfix_expression             shift and go to state 8
    program                        shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 20
    assignment_expression          shift and go to state 23
    multiplicative_expression      shift and go to state 25
    eostmt                         shift and go to state 26
    primary_expression             shift and go to state 27
    init_statement                 shift and go to state 28
    array_expression               shift and go to state 29
    equality_expression            shift and go to state 31
    special_expression             shift and go to state 33
    statement_list                 shift and go to state 37
    expression                     shift and go to state 34

state 1

    (61) statement -> expression_statement .

    IF              reduce using rule 61 (statement -> expression_statement .)
    WHILE           reduce using rule 61 (statement -> expression_statement .)
    FOR             reduce using rule 61 (statement -> expression_statement .)
    ,               reduce using rule 61 (statement -> expression_statement .)
    ;               reduce using rule 61 (statement -> expression_statement .)
    ID              reduce using rule 61 (statement -> expression_statement .)
    PRINT           reduce using rule 61 (statement -> expression_statement .)
    RETURN          reduce using rule 61 (statement -> expression_statement .)
    CONTINUE        reduce using rule 61 (statement -> expression_statement .)
    BREAK           reduce using rule 61 (statement -> expression_statement .)
    INTNUM          reduce using rule 61 (statement -> expression_statement .)
    FLOATNUM        reduce using rule 61 (statement -> expression_statement .)
    NORMSTRING      reduce using rule 61 (statement -> expression_statement .)
    (               reduce using rule 61 (statement -> expression_statement .)
    [               reduce using rule 61 (statement -> expression_statement .)
    -               reduce using rule 61 (statement -> expression_statement .)
    $end            reduce using rule 61 (statement -> expression_statement .)
    ELSE            reduce using rule 61 (statement -> expression_statement .)
    }               reduce using rule 61 (statement -> expression_statement .)


state 2

    (44) special_expression -> RETURN . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 19
    expression                     shift and go to state 40
    additive_expression            shift and go to state 12
    primary_expression             shift and go to state 27

state 3

    (23) multiplicative_expression -> unary_expression .

    *               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    /               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    DOTMUL          reduce using rule 23 (multiplicative_expression -> unary_expression .)
    DOTDIV          reduce using rule 23 (multiplicative_expression -> unary_expression .)
    +               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    -               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    DOTADD          reduce using rule 23 (multiplicative_expression -> unary_expression .)
    DOTMINUS        reduce using rule 23 (multiplicative_expression -> unary_expression .)
    <               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    >               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    LESSEREQ        reduce using rule 23 (multiplicative_expression -> unary_expression .)
    GREATEREQ       reduce using rule 23 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 23 (multiplicative_expression -> unary_expression .)
    NOTEQ           reduce using rule 23 (multiplicative_expression -> unary_expression .)
    :               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    ,               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    ;               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    ]               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    )               reduce using rule 23 (multiplicative_expression -> unary_expression .)
    {               reduce using rule 23 (multiplicative_expression -> unary_expression .)


state 4

    (22) unary_expression -> - . postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    array_expression               shift and go to state 29
    primary_expression             shift and go to state 27
    postfix_expression             shift and go to state 41

state 5

    (4) primary_expression -> FLOATNUM .

    '               reduce using rule 4 (primary_expression -> FLOATNUM .)
    *               reduce using rule 4 (primary_expression -> FLOATNUM .)
    /               reduce using rule 4 (primary_expression -> FLOATNUM .)
    DOTMUL          reduce using rule 4 (primary_expression -> FLOATNUM .)
    DOTDIV          reduce using rule 4 (primary_expression -> FLOATNUM .)
    +               reduce using rule 4 (primary_expression -> FLOATNUM .)
    -               reduce using rule 4 (primary_expression -> FLOATNUM .)
    DOTADD          reduce using rule 4 (primary_expression -> FLOATNUM .)
    DOTMINUS        reduce using rule 4 (primary_expression -> FLOATNUM .)
    <               reduce using rule 4 (primary_expression -> FLOATNUM .)
    >               reduce using rule 4 (primary_expression -> FLOATNUM .)
    LESSEREQ        reduce using rule 4 (primary_expression -> FLOATNUM .)
    GREATEREQ       reduce using rule 4 (primary_expression -> FLOATNUM .)
    EQ              reduce using rule 4 (primary_expression -> FLOATNUM .)
    NOTEQ           reduce using rule 4 (primary_expression -> FLOATNUM .)
    {               reduce using rule 4 (primary_expression -> FLOATNUM .)
    :               reduce using rule 4 (primary_expression -> FLOATNUM .)
    ]               reduce using rule 4 (primary_expression -> FLOATNUM .)
    ,               reduce using rule 4 (primary_expression -> FLOATNUM .)
    ;               reduce using rule 4 (primary_expression -> FLOATNUM .)
    =               reduce using rule 4 (primary_expression -> FLOATNUM .)
    ADDASSIGN       reduce using rule 4 (primary_expression -> FLOATNUM .)
    SUBASSIGN       reduce using rule 4 (primary_expression -> FLOATNUM .)
    MULASSIGN       reduce using rule 4 (primary_expression -> FLOATNUM .)
    DIVASSIGN       reduce using rule 4 (primary_expression -> FLOATNUM .)
    )               reduce using rule 4 (primary_expression -> FLOATNUM .)


state 6

    (58) eostmt -> , .

    IF              reduce using rule 58 (eostmt -> , .)
    WHILE           reduce using rule 58 (eostmt -> , .)
    FOR             reduce using rule 58 (eostmt -> , .)
    ,               reduce using rule 58 (eostmt -> , .)
    ;               reduce using rule 58 (eostmt -> , .)
    ID              reduce using rule 58 (eostmt -> , .)
    PRINT           reduce using rule 58 (eostmt -> , .)
    RETURN          reduce using rule 58 (eostmt -> , .)
    CONTINUE        reduce using rule 58 (eostmt -> , .)
    BREAK           reduce using rule 58 (eostmt -> , .)
    INTNUM          reduce using rule 58 (eostmt -> , .)
    FLOATNUM        reduce using rule 58 (eostmt -> , .)
    NORMSTRING      reduce using rule 58 (eostmt -> , .)
    (               reduce using rule 58 (eostmt -> , .)
    [               reduce using rule 58 (eostmt -> , .)
    -               reduce using rule 58 (eostmt -> , .)
    }               reduce using rule 58 (eostmt -> , .)
    $end            reduce using rule 58 (eostmt -> , .)
    ELSE            reduce using rule 58 (eostmt -> , .)


state 7

    (75) iteration_statement -> WHILE . ( expression ) { statement_list }

    (               shift and go to state 42


state 8

    (49) assignment_expression -> postfix_expression . = expression
    (50) assignment_expression -> postfix_expression . ADDASSIGN expression
    (51) assignment_expression -> postfix_expression . SUBASSIGN expression
    (52) assignment_expression -> postfix_expression . MULASSIGN expression
    (53) assignment_expression -> postfix_expression . DIVASSIGN expression
    (11) postfix_expression -> postfix_expression . '
    (21) unary_expression -> postfix_expression .

    =               shift and go to state 45
    ADDASSIGN       shift and go to state 48
    SUBASSIGN       shift and go to state 43
    MULASSIGN       shift and go to state 47
    DIVASSIGN       shift and go to state 46
    '               shift and go to state 44
    *               reduce using rule 21 (unary_expression -> postfix_expression .)
    /               reduce using rule 21 (unary_expression -> postfix_expression .)
    DOTMUL          reduce using rule 21 (unary_expression -> postfix_expression .)
    DOTDIV          reduce using rule 21 (unary_expression -> postfix_expression .)
    +               reduce using rule 21 (unary_expression -> postfix_expression .)
    -               reduce using rule 21 (unary_expression -> postfix_expression .)
    DOTADD          reduce using rule 21 (unary_expression -> postfix_expression .)
    DOTMINUS        reduce using rule 21 (unary_expression -> postfix_expression .)
    <               reduce using rule 21 (unary_expression -> postfix_expression .)
    >               reduce using rule 21 (unary_expression -> postfix_expression .)
    LESSEREQ        reduce using rule 21 (unary_expression -> postfix_expression .)
    GREATEREQ       reduce using rule 21 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 21 (unary_expression -> postfix_expression .)
    NOTEQ           reduce using rule 21 (unary_expression -> postfix_expression .)
    :               reduce using rule 21 (unary_expression -> postfix_expression .)
    ,               reduce using rule 21 (unary_expression -> postfix_expression .)
    ;               reduce using rule 21 (unary_expression -> postfix_expression .)


state 9

    (42) special_expression -> PRINT . print_index_expression_list
    (43) special_expression -> PRINT . NORMSTRING
    (17) print_index_expression_list -> . ID
    (18) print_index_expression_list -> . print_index_expression_list , ID

    NORMSTRING      shift and go to state 51
    ID              shift and go to state 50

    print_index_expression_list    shift and go to state 49

state 10

    (70) init_statement -> init_expression . eostmt
    (58) eostmt -> . ,
    (59) eostmt -> . ;

    ,               shift and go to state 6
    ;               shift and go to state 21

    eostmt                         shift and go to state 52

state 11

    (7) primary_expression -> [ . ]
    (8) primary_expression -> [ . index_expression_list ]
    (14) index_expression_list -> . index_expression
    (15) index_expression_list -> . index_expression_list , index_expression
    (16) index_expression_list -> . index_expression_list ; index_expression
    (12) index_expression -> . :
    (13) index_expression -> . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    ]               shift and go to state 53
    :               shift and go to state 54
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    index_expression_list          shift and go to state 55
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    index_expression               shift and go to state 56
    primary_expression             shift and go to state 27
    expression                     shift and go to state 57
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 19

state 12

    (33) relational_expression -> additive_expression .
    (29) additive_expression -> additive_expression . + multiplicative_expression
    (30) additive_expression -> additive_expression . - multiplicative_expression
    (31) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (32) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    <               reduce using rule 33 (relational_expression -> additive_expression .)
    >               reduce using rule 33 (relational_expression -> additive_expression .)
    LESSEREQ        reduce using rule 33 (relational_expression -> additive_expression .)
    GREATEREQ       reduce using rule 33 (relational_expression -> additive_expression .)
    EQ              reduce using rule 33 (relational_expression -> additive_expression .)
    NOTEQ           reduce using rule 33 (relational_expression -> additive_expression .)
    :               reduce using rule 33 (relational_expression -> additive_expression .)
    ,               reduce using rule 33 (relational_expression -> additive_expression .)
    ;               reduce using rule 33 (relational_expression -> additive_expression .)
    ]               reduce using rule 33 (relational_expression -> additive_expression .)
    )               reduce using rule 33 (relational_expression -> additive_expression .)
    {               reduce using rule 33 (relational_expression -> additive_expression .)
    +               shift and go to state 58
    -               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61


state 13

    (3) primary_expression -> INTNUM .

    '               reduce using rule 3 (primary_expression -> INTNUM .)
    *               reduce using rule 3 (primary_expression -> INTNUM .)
    /               reduce using rule 3 (primary_expression -> INTNUM .)
    DOTMUL          reduce using rule 3 (primary_expression -> INTNUM .)
    DOTDIV          reduce using rule 3 (primary_expression -> INTNUM .)
    +               reduce using rule 3 (primary_expression -> INTNUM .)
    -               reduce using rule 3 (primary_expression -> INTNUM .)
    DOTADD          reduce using rule 3 (primary_expression -> INTNUM .)
    DOTMINUS        reduce using rule 3 (primary_expression -> INTNUM .)
    <               reduce using rule 3 (primary_expression -> INTNUM .)
    >               reduce using rule 3 (primary_expression -> INTNUM .)
    LESSEREQ        reduce using rule 3 (primary_expression -> INTNUM .)
    GREATEREQ       reduce using rule 3 (primary_expression -> INTNUM .)
    EQ              reduce using rule 3 (primary_expression -> INTNUM .)
    NOTEQ           reduce using rule 3 (primary_expression -> INTNUM .)
    {               reduce using rule 3 (primary_expression -> INTNUM .)
    :               reduce using rule 3 (primary_expression -> INTNUM .)
    ]               reduce using rule 3 (primary_expression -> INTNUM .)
    ,               reduce using rule 3 (primary_expression -> INTNUM .)
    ;               reduce using rule 3 (primary_expression -> INTNUM .)
    =               reduce using rule 3 (primary_expression -> INTNUM .)
    ADDASSIGN       reduce using rule 3 (primary_expression -> INTNUM .)
    SUBASSIGN       reduce using rule 3 (primary_expression -> INTNUM .)
    MULASSIGN       reduce using rule 3 (primary_expression -> INTNUM .)
    DIVASSIGN       reduce using rule 3 (primary_expression -> INTNUM .)
    )               reduce using rule 3 (primary_expression -> INTNUM .)


state 14

    (6) primary_expression -> ( . expression )
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 19
    expression                     shift and go to state 62
    additive_expression            shift and go to state 12
    primary_expression             shift and go to state 27

state 15

    (62) statement -> selection_statement .

    IF              reduce using rule 62 (statement -> selection_statement .)
    WHILE           reduce using rule 62 (statement -> selection_statement .)
    FOR             reduce using rule 62 (statement -> selection_statement .)
    ,               reduce using rule 62 (statement -> selection_statement .)
    ;               reduce using rule 62 (statement -> selection_statement .)
    ID              reduce using rule 62 (statement -> selection_statement .)
    PRINT           reduce using rule 62 (statement -> selection_statement .)
    RETURN          reduce using rule 62 (statement -> selection_statement .)
    CONTINUE        reduce using rule 62 (statement -> selection_statement .)
    BREAK           reduce using rule 62 (statement -> selection_statement .)
    INTNUM          reduce using rule 62 (statement -> selection_statement .)
    FLOATNUM        reduce using rule 62 (statement -> selection_statement .)
    NORMSTRING      reduce using rule 62 (statement -> selection_statement .)
    (               reduce using rule 62 (statement -> selection_statement .)
    [               reduce using rule 62 (statement -> selection_statement .)
    -               reduce using rule 62 (statement -> selection_statement .)
    $end            reduce using rule 62 (statement -> selection_statement .)
    ELSE            reduce using rule 62 (statement -> selection_statement .)
    }               reduce using rule 62 (statement -> selection_statement .)


state 16

    (60) statement -> assignment_statement .

    IF              reduce using rule 60 (statement -> assignment_statement .)
    WHILE           reduce using rule 60 (statement -> assignment_statement .)
    FOR             reduce using rule 60 (statement -> assignment_statement .)
    ,               reduce using rule 60 (statement -> assignment_statement .)
    ;               reduce using rule 60 (statement -> assignment_statement .)
    ID              reduce using rule 60 (statement -> assignment_statement .)
    PRINT           reduce using rule 60 (statement -> assignment_statement .)
    RETURN          reduce using rule 60 (statement -> assignment_statement .)
    CONTINUE        reduce using rule 60 (statement -> assignment_statement .)
    BREAK           reduce using rule 60 (statement -> assignment_statement .)
    INTNUM          reduce using rule 60 (statement -> assignment_statement .)
    FLOATNUM        reduce using rule 60 (statement -> assignment_statement .)
    NORMSTRING      reduce using rule 60 (statement -> assignment_statement .)
    (               reduce using rule 60 (statement -> assignment_statement .)
    [               reduce using rule 60 (statement -> assignment_statement .)
    -               reduce using rule 60 (statement -> assignment_statement .)
    $end            reduce using rule 60 (statement -> assignment_statement .)
    ELSE            reduce using rule 60 (statement -> assignment_statement .)
    }               reduce using rule 60 (statement -> assignment_statement .)


state 17

    (63) statement -> iteration_statement .

    IF              reduce using rule 63 (statement -> iteration_statement .)
    WHILE           reduce using rule 63 (statement -> iteration_statement .)
    FOR             reduce using rule 63 (statement -> iteration_statement .)
    ,               reduce using rule 63 (statement -> iteration_statement .)
    ;               reduce using rule 63 (statement -> iteration_statement .)
    ID              reduce using rule 63 (statement -> iteration_statement .)
    PRINT           reduce using rule 63 (statement -> iteration_statement .)
    RETURN          reduce using rule 63 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 63 (statement -> iteration_statement .)
    BREAK           reduce using rule 63 (statement -> iteration_statement .)
    INTNUM          reduce using rule 63 (statement -> iteration_statement .)
    FLOATNUM        reduce using rule 63 (statement -> iteration_statement .)
    NORMSTRING      reduce using rule 63 (statement -> iteration_statement .)
    (               reduce using rule 63 (statement -> iteration_statement .)
    [               reduce using rule 63 (statement -> iteration_statement .)
    -               reduce using rule 63 (statement -> iteration_statement .)
    $end            reduce using rule 63 (statement -> iteration_statement .)
    ELSE            reduce using rule 63 (statement -> iteration_statement .)
    }               reduce using rule 63 (statement -> iteration_statement .)


state 18

    (0) S' -> program .



state 19

    (38) equality_expression -> relational_expression .
    (34) relational_expression -> relational_expression . < additive_expression
    (35) relational_expression -> relational_expression . > additive_expression
    (36) relational_expression -> relational_expression . LESSEREQ additive_expression
    (37) relational_expression -> relational_expression . GREATEREQ additive_expression

    EQ              reduce using rule 38 (equality_expression -> relational_expression .)
    NOTEQ           reduce using rule 38 (equality_expression -> relational_expression .)
    :               reduce using rule 38 (equality_expression -> relational_expression .)
    ,               reduce using rule 38 (equality_expression -> relational_expression .)
    ;               reduce using rule 38 (equality_expression -> relational_expression .)
    )               reduce using rule 38 (equality_expression -> relational_expression .)
    ]               reduce using rule 38 (equality_expression -> relational_expression .)
    {               reduce using rule 38 (equality_expression -> relational_expression .)
    <               shift and go to state 65
    >               shift and go to state 66
    LESSEREQ        shift and go to state 63
    GREATEREQ       shift and go to state 64


state 20

    (65) statement_list -> statement .
    (66) statement_list -> statement . statement_list
    (65) statement_list -> . statement
    (66) statement_list -> . statement statement_list
    (60) statement -> . assignment_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . init_statement
    (69) assignment_statement -> . assignment_expression eostmt
    (67) expression_statement -> . eostmt
    (68) expression_statement -> . expression eostmt
    (71) selection_statement -> . IF ( expression ) statement
    (72) selection_statement -> . IF ( expression ) statement ELSE statement
    (73) selection_statement -> . IF ( expression ) { statement_list }
    (74) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (75) iteration_statement -> . WHILE ( expression ) { statement_list }
    (76) iteration_statement -> . FOR ID = expression { statement_list }
    (77) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (70) init_statement -> . init_expression eostmt
    (49) assignment_expression -> . postfix_expression = expression
    (50) assignment_expression -> . postfix_expression ADDASSIGN expression
    (51) assignment_expression -> . postfix_expression SUBASSIGN expression
    (52) assignment_expression -> . postfix_expression MULASSIGN expression
    (53) assignment_expression -> . postfix_expression DIVASSIGN expression
    (58) eostmt -> . ,
    (59) eostmt -> . ;
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (54) init_expression -> . ID = additive_expression
    (55) init_expression -> . ID = ZEROS ( index_expression_list )
    (56) init_expression -> . ID = ONES ( index_expression_list )
    (57) init_expression -> . ID = EYE ( index_expression_list )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression

    }               reduce using rule 65 (statement_list -> statement .)
    $end            reduce using rule 65 (statement_list -> statement .)
    IF              shift and go to state 32
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    ,               shift and go to state 6
    ;               shift and go to state 21
    ID              shift and go to state 30
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11
    -               shift and go to state 4

    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 3
    init_expression                shift and go to state 10
    additive_expression            shift and go to state 12
    iteration_statement            shift and go to state 17
    selection_statement            shift and go to state 15
    assignment_statement           shift and go to state 16
    postfix_expression             shift and go to state 8
    relational_expression          shift and go to state 19
    statement                      shift and go to state 20
    assignment_expression          shift and go to state 23
    multiplicative_expression      shift and go to state 25
    eostmt                         shift and go to state 26
    primary_expression             shift and go to state 27
    init_statement                 shift and go to state 28
    array_expression               shift and go to state 29
    equality_expression            shift and go to state 31
    special_expression             shift and go to state 33
    statement_list                 shift and go to state 67
    expression                     shift and go to state 34

state 21

    (59) eostmt -> ; .

    IF              reduce using rule 59 (eostmt -> ; .)
    WHILE           reduce using rule 59 (eostmt -> ; .)
    FOR             reduce using rule 59 (eostmt -> ; .)
    ,               reduce using rule 59 (eostmt -> ; .)
    ;               reduce using rule 59 (eostmt -> ; .)
    ID              reduce using rule 59 (eostmt -> ; .)
    PRINT           reduce using rule 59 (eostmt -> ; .)
    RETURN          reduce using rule 59 (eostmt -> ; .)
    CONTINUE        reduce using rule 59 (eostmt -> ; .)
    BREAK           reduce using rule 59 (eostmt -> ; .)
    INTNUM          reduce using rule 59 (eostmt -> ; .)
    FLOATNUM        reduce using rule 59 (eostmt -> ; .)
    NORMSTRING      reduce using rule 59 (eostmt -> ; .)
    (               reduce using rule 59 (eostmt -> ; .)
    [               reduce using rule 59 (eostmt -> ; .)
    -               reduce using rule 59 (eostmt -> ; .)
    }               reduce using rule 59 (eostmt -> ; .)
    $end            reduce using rule 59 (eostmt -> ; .)
    ELSE            reduce using rule 59 (eostmt -> ; .)


state 22

    (5) primary_expression -> NORMSTRING .

    '               reduce using rule 5 (primary_expression -> NORMSTRING .)
    *               reduce using rule 5 (primary_expression -> NORMSTRING .)
    /               reduce using rule 5 (primary_expression -> NORMSTRING .)
    DOTMUL          reduce using rule 5 (primary_expression -> NORMSTRING .)
    DOTDIV          reduce using rule 5 (primary_expression -> NORMSTRING .)
    +               reduce using rule 5 (primary_expression -> NORMSTRING .)
    -               reduce using rule 5 (primary_expression -> NORMSTRING .)
    DOTADD          reduce using rule 5 (primary_expression -> NORMSTRING .)
    DOTMINUS        reduce using rule 5 (primary_expression -> NORMSTRING .)
    <               reduce using rule 5 (primary_expression -> NORMSTRING .)
    >               reduce using rule 5 (primary_expression -> NORMSTRING .)
    LESSEREQ        reduce using rule 5 (primary_expression -> NORMSTRING .)
    GREATEREQ       reduce using rule 5 (primary_expression -> NORMSTRING .)
    EQ              reduce using rule 5 (primary_expression -> NORMSTRING .)
    NOTEQ           reduce using rule 5 (primary_expression -> NORMSTRING .)
    {               reduce using rule 5 (primary_expression -> NORMSTRING .)
    :               reduce using rule 5 (primary_expression -> NORMSTRING .)
    ]               reduce using rule 5 (primary_expression -> NORMSTRING .)
    ,               reduce using rule 5 (primary_expression -> NORMSTRING .)
    ;               reduce using rule 5 (primary_expression -> NORMSTRING .)
    =               reduce using rule 5 (primary_expression -> NORMSTRING .)
    ADDASSIGN       reduce using rule 5 (primary_expression -> NORMSTRING .)
    SUBASSIGN       reduce using rule 5 (primary_expression -> NORMSTRING .)
    MULASSIGN       reduce using rule 5 (primary_expression -> NORMSTRING .)
    DIVASSIGN       reduce using rule 5 (primary_expression -> NORMSTRING .)
    )               reduce using rule 5 (primary_expression -> NORMSTRING .)


state 23

    (69) assignment_statement -> assignment_expression . eostmt
    (58) eostmt -> . ,
    (59) eostmt -> . ;

    ,               shift and go to state 6
    ;               shift and go to state 21

    eostmt                         shift and go to state 68

state 24

    (76) iteration_statement -> FOR . ID = expression { statement_list }
    (77) iteration_statement -> FOR . ( ID = expression ) { statement_list }

    ID              shift and go to state 70
    (               shift and go to state 69


state 25

    (28) additive_expression -> multiplicative_expression .
    (24) multiplicative_expression -> multiplicative_expression . * unary_expression
    (25) multiplicative_expression -> multiplicative_expression . / unary_expression
    (26) multiplicative_expression -> multiplicative_expression . DOTMUL unary_expression
    (27) multiplicative_expression -> multiplicative_expression . DOTDIV unary_expression

    +               reduce using rule 28 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 28 (additive_expression -> multiplicative_expression .)
    DOTADD          reduce using rule 28 (additive_expression -> multiplicative_expression .)
    DOTMINUS        reduce using rule 28 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 28 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 28 (additive_expression -> multiplicative_expression .)
    LESSEREQ        reduce using rule 28 (additive_expression -> multiplicative_expression .)
    GREATEREQ       reduce using rule 28 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 28 (additive_expression -> multiplicative_expression .)
    NOTEQ           reduce using rule 28 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 28 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 28 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 28 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 28 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 28 (additive_expression -> multiplicative_expression .)
    {               reduce using rule 28 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 72
    /               shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 71


state 26

    (67) expression_statement -> eostmt .

    ELSE            reduce using rule 67 (expression_statement -> eostmt .)
    IF              reduce using rule 67 (expression_statement -> eostmt .)
    WHILE           reduce using rule 67 (expression_statement -> eostmt .)
    FOR             reduce using rule 67 (expression_statement -> eostmt .)
    ,               reduce using rule 67 (expression_statement -> eostmt .)
    ;               reduce using rule 67 (expression_statement -> eostmt .)
    ID              reduce using rule 67 (expression_statement -> eostmt .)
    PRINT           reduce using rule 67 (expression_statement -> eostmt .)
    RETURN          reduce using rule 67 (expression_statement -> eostmt .)
    CONTINUE        reduce using rule 67 (expression_statement -> eostmt .)
    BREAK           reduce using rule 67 (expression_statement -> eostmt .)
    INTNUM          reduce using rule 67 (expression_statement -> eostmt .)
    FLOATNUM        reduce using rule 67 (expression_statement -> eostmt .)
    NORMSTRING      reduce using rule 67 (expression_statement -> eostmt .)
    (               reduce using rule 67 (expression_statement -> eostmt .)
    [               reduce using rule 67 (expression_statement -> eostmt .)
    -               reduce using rule 67 (expression_statement -> eostmt .)
    $end            reduce using rule 67 (expression_statement -> eostmt .)
    }               reduce using rule 67 (expression_statement -> eostmt .)


state 27

    (9) postfix_expression -> primary_expression .

    '               reduce using rule 9 (postfix_expression -> primary_expression .)
    *               reduce using rule 9 (postfix_expression -> primary_expression .)
    /               reduce using rule 9 (postfix_expression -> primary_expression .)
    DOTMUL          reduce using rule 9 (postfix_expression -> primary_expression .)
    DOTDIV          reduce using rule 9 (postfix_expression -> primary_expression .)
    +               reduce using rule 9 (postfix_expression -> primary_expression .)
    -               reduce using rule 9 (postfix_expression -> primary_expression .)
    DOTADD          reduce using rule 9 (postfix_expression -> primary_expression .)
    DOTMINUS        reduce using rule 9 (postfix_expression -> primary_expression .)
    <               reduce using rule 9 (postfix_expression -> primary_expression .)
    >               reduce using rule 9 (postfix_expression -> primary_expression .)
    LESSEREQ        reduce using rule 9 (postfix_expression -> primary_expression .)
    GREATEREQ       reduce using rule 9 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 9 (postfix_expression -> primary_expression .)
    NOTEQ           reduce using rule 9 (postfix_expression -> primary_expression .)
    :               reduce using rule 9 (postfix_expression -> primary_expression .)
    ,               reduce using rule 9 (postfix_expression -> primary_expression .)
    ;               reduce using rule 9 (postfix_expression -> primary_expression .)
    ]               reduce using rule 9 (postfix_expression -> primary_expression .)
    )               reduce using rule 9 (postfix_expression -> primary_expression .)
    {               reduce using rule 9 (postfix_expression -> primary_expression .)
    =               reduce using rule 9 (postfix_expression -> primary_expression .)
    ADDASSIGN       reduce using rule 9 (postfix_expression -> primary_expression .)
    SUBASSIGN       reduce using rule 9 (postfix_expression -> primary_expression .)
    MULASSIGN       reduce using rule 9 (postfix_expression -> primary_expression .)
    DIVASSIGN       reduce using rule 9 (postfix_expression -> primary_expression .)


state 28

    (64) statement -> init_statement .

    IF              reduce using rule 64 (statement -> init_statement .)
    WHILE           reduce using rule 64 (statement -> init_statement .)
    FOR             reduce using rule 64 (statement -> init_statement .)
    ,               reduce using rule 64 (statement -> init_statement .)
    ;               reduce using rule 64 (statement -> init_statement .)
    ID              reduce using rule 64 (statement -> init_statement .)
    PRINT           reduce using rule 64 (statement -> init_statement .)
    RETURN          reduce using rule 64 (statement -> init_statement .)
    CONTINUE        reduce using rule 64 (statement -> init_statement .)
    BREAK           reduce using rule 64 (statement -> init_statement .)
    INTNUM          reduce using rule 64 (statement -> init_statement .)
    FLOATNUM        reduce using rule 64 (statement -> init_statement .)
    NORMSTRING      reduce using rule 64 (statement -> init_statement .)
    (               reduce using rule 64 (statement -> init_statement .)
    [               reduce using rule 64 (statement -> init_statement .)
    -               reduce using rule 64 (statement -> init_statement .)
    $end            reduce using rule 64 (statement -> init_statement .)
    ELSE            reduce using rule 64 (statement -> init_statement .)
    }               reduce using rule 64 (statement -> init_statement .)


state 29

    (10) postfix_expression -> array_expression .

    '               reduce using rule 10 (postfix_expression -> array_expression .)
    *               reduce using rule 10 (postfix_expression -> array_expression .)
    /               reduce using rule 10 (postfix_expression -> array_expression .)
    DOTMUL          reduce using rule 10 (postfix_expression -> array_expression .)
    DOTDIV          reduce using rule 10 (postfix_expression -> array_expression .)
    +               reduce using rule 10 (postfix_expression -> array_expression .)
    -               reduce using rule 10 (postfix_expression -> array_expression .)
    DOTADD          reduce using rule 10 (postfix_expression -> array_expression .)
    DOTMINUS        reduce using rule 10 (postfix_expression -> array_expression .)
    <               reduce using rule 10 (postfix_expression -> array_expression .)
    >               reduce using rule 10 (postfix_expression -> array_expression .)
    LESSEREQ        reduce using rule 10 (postfix_expression -> array_expression .)
    GREATEREQ       reduce using rule 10 (postfix_expression -> array_expression .)
    EQ              reduce using rule 10 (postfix_expression -> array_expression .)
    NOTEQ           reduce using rule 10 (postfix_expression -> array_expression .)
    :               reduce using rule 10 (postfix_expression -> array_expression .)
    ,               reduce using rule 10 (postfix_expression -> array_expression .)
    ;               reduce using rule 10 (postfix_expression -> array_expression .)
    ]               reduce using rule 10 (postfix_expression -> array_expression .)
    )               reduce using rule 10 (postfix_expression -> array_expression .)
    {               reduce using rule 10 (postfix_expression -> array_expression .)
    =               reduce using rule 10 (postfix_expression -> array_expression .)
    ADDASSIGN       reduce using rule 10 (postfix_expression -> array_expression .)
    SUBASSIGN       reduce using rule 10 (postfix_expression -> array_expression .)
    MULASSIGN       reduce using rule 10 (postfix_expression -> array_expression .)
    DIVASSIGN       reduce using rule 10 (postfix_expression -> array_expression .)


state 30

    (54) init_expression -> ID . = additive_expression
    (55) init_expression -> ID . = ZEROS ( index_expression_list )
    (56) init_expression -> ID . = ONES ( index_expression_list )
    (57) init_expression -> ID . = EYE ( index_expression_list )
    (2) primary_expression -> ID .
    (19) array_expression -> ID . ( index_expression_list )
    (20) array_expression -> ID . [ index_expression_list ]

  ! shift/reduce conflict for = resolved as shift
    =               shift and go to state 77
    ADDASSIGN       reduce using rule 2 (primary_expression -> ID .)
    SUBASSIGN       reduce using rule 2 (primary_expression -> ID .)
    MULASSIGN       reduce using rule 2 (primary_expression -> ID .)
    DIVASSIGN       reduce using rule 2 (primary_expression -> ID .)
    '               reduce using rule 2 (primary_expression -> ID .)
    *               reduce using rule 2 (primary_expression -> ID .)
    /               reduce using rule 2 (primary_expression -> ID .)
    DOTMUL          reduce using rule 2 (primary_expression -> ID .)
    DOTDIV          reduce using rule 2 (primary_expression -> ID .)
    +               reduce using rule 2 (primary_expression -> ID .)
    -               reduce using rule 2 (primary_expression -> ID .)
    DOTADD          reduce using rule 2 (primary_expression -> ID .)
    DOTMINUS        reduce using rule 2 (primary_expression -> ID .)
    <               reduce using rule 2 (primary_expression -> ID .)
    >               reduce using rule 2 (primary_expression -> ID .)
    LESSEREQ        reduce using rule 2 (primary_expression -> ID .)
    GREATEREQ       reduce using rule 2 (primary_expression -> ID .)
    EQ              reduce using rule 2 (primary_expression -> ID .)
    NOTEQ           reduce using rule 2 (primary_expression -> ID .)
    :               reduce using rule 2 (primary_expression -> ID .)
    ,               reduce using rule 2 (primary_expression -> ID .)
    ;               reduce using rule 2 (primary_expression -> ID .)
    (               shift and go to state 75
    [               shift and go to state 76

  ! =               [ reduce using rule 2 (primary_expression -> ID .) ]


state 31

    (41) special_expression -> equality_expression .
    (39) equality_expression -> equality_expression . EQ relational_expression
    (40) equality_expression -> equality_expression . NOTEQ relational_expression

    :               reduce using rule 41 (special_expression -> equality_expression .)
    ]               reduce using rule 41 (special_expression -> equality_expression .)
    ,               reduce using rule 41 (special_expression -> equality_expression .)
    ;               reduce using rule 41 (special_expression -> equality_expression .)
    )               reduce using rule 41 (special_expression -> equality_expression .)
    {               reduce using rule 41 (special_expression -> equality_expression .)
    EQ              shift and go to state 79
    NOTEQ           shift and go to state 78


state 32

    (71) selection_statement -> IF . ( expression ) statement
    (72) selection_statement -> IF . ( expression ) statement ELSE statement
    (73) selection_statement -> IF . ( expression ) { statement_list }
    (74) selection_statement -> IF . ( expression ) { statement_list } ELSE { statement_list }

    (               shift and go to state 80


state 33

    (47) expression -> special_expression .

    :               reduce using rule 47 (expression -> special_expression .)
    ,               reduce using rule 47 (expression -> special_expression .)
    ;               reduce using rule 47 (expression -> special_expression .)
    )               reduce using rule 47 (expression -> special_expression .)
    ]               reduce using rule 47 (expression -> special_expression .)
    {               reduce using rule 47 (expression -> special_expression .)


state 34

    (68) expression_statement -> expression . eostmt
    (48) expression -> expression . : special_expression
    (58) eostmt -> . ,
    (59) eostmt -> . ;

    :               shift and go to state 82
    ,               shift and go to state 6
    ;               shift and go to state 21

    eostmt                         shift and go to state 81

state 35

    (46) special_expression -> BREAK .

    :               reduce using rule 46 (special_expression -> BREAK .)
    ]               reduce using rule 46 (special_expression -> BREAK .)
    ,               reduce using rule 46 (special_expression -> BREAK .)
    ;               reduce using rule 46 (special_expression -> BREAK .)
    )               reduce using rule 46 (special_expression -> BREAK .)
    {               reduce using rule 46 (special_expression -> BREAK .)


state 36

    (45) special_expression -> CONTINUE .

    :               reduce using rule 45 (special_expression -> CONTINUE .)
    ]               reduce using rule 45 (special_expression -> CONTINUE .)
    ,               reduce using rule 45 (special_expression -> CONTINUE .)
    ;               reduce using rule 45 (special_expression -> CONTINUE .)
    )               reduce using rule 45 (special_expression -> CONTINUE .)
    {               reduce using rule 45 (special_expression -> CONTINUE .)


state 37

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 38

    (21) unary_expression -> postfix_expression .
    (11) postfix_expression -> postfix_expression . '

    *               reduce using rule 21 (unary_expression -> postfix_expression .)
    /               reduce using rule 21 (unary_expression -> postfix_expression .)
    DOTMUL          reduce using rule 21 (unary_expression -> postfix_expression .)
    DOTDIV          reduce using rule 21 (unary_expression -> postfix_expression .)
    +               reduce using rule 21 (unary_expression -> postfix_expression .)
    -               reduce using rule 21 (unary_expression -> postfix_expression .)
    DOTADD          reduce using rule 21 (unary_expression -> postfix_expression .)
    DOTMINUS        reduce using rule 21 (unary_expression -> postfix_expression .)
    <               reduce using rule 21 (unary_expression -> postfix_expression .)
    >               reduce using rule 21 (unary_expression -> postfix_expression .)
    LESSEREQ        reduce using rule 21 (unary_expression -> postfix_expression .)
    GREATEREQ       reduce using rule 21 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 21 (unary_expression -> postfix_expression .)
    NOTEQ           reduce using rule 21 (unary_expression -> postfix_expression .)
    :               reduce using rule 21 (unary_expression -> postfix_expression .)
    )               reduce using rule 21 (unary_expression -> postfix_expression .)
    ,               reduce using rule 21 (unary_expression -> postfix_expression .)
    ;               reduce using rule 21 (unary_expression -> postfix_expression .)
    ]               reduce using rule 21 (unary_expression -> postfix_expression .)
    {               reduce using rule 21 (unary_expression -> postfix_expression .)
    '               shift and go to state 44


state 39

    (2) primary_expression -> ID .
    (19) array_expression -> ID . ( index_expression_list )
    (20) array_expression -> ID . [ index_expression_list ]

    '               reduce using rule 2 (primary_expression -> ID .)
    *               reduce using rule 2 (primary_expression -> ID .)
    /               reduce using rule 2 (primary_expression -> ID .)
    DOTMUL          reduce using rule 2 (primary_expression -> ID .)
    DOTDIV          reduce using rule 2 (primary_expression -> ID .)
    +               reduce using rule 2 (primary_expression -> ID .)
    -               reduce using rule 2 (primary_expression -> ID .)
    DOTADD          reduce using rule 2 (primary_expression -> ID .)
    DOTMINUS        reduce using rule 2 (primary_expression -> ID .)
    <               reduce using rule 2 (primary_expression -> ID .)
    >               reduce using rule 2 (primary_expression -> ID .)
    LESSEREQ        reduce using rule 2 (primary_expression -> ID .)
    GREATEREQ       reduce using rule 2 (primary_expression -> ID .)
    EQ              reduce using rule 2 (primary_expression -> ID .)
    NOTEQ           reduce using rule 2 (primary_expression -> ID .)
    {               reduce using rule 2 (primary_expression -> ID .)
    :               reduce using rule 2 (primary_expression -> ID .)
    ]               reduce using rule 2 (primary_expression -> ID .)
    ,               reduce using rule 2 (primary_expression -> ID .)
    ;               reduce using rule 2 (primary_expression -> ID .)
    )               reduce using rule 2 (primary_expression -> ID .)
    (               shift and go to state 75
    [               shift and go to state 76


state 40

    (44) special_expression -> RETURN expression .
    (48) expression -> expression . : special_expression

  ! shift/reduce conflict for : resolved as shift
    ]               reduce using rule 44 (special_expression -> RETURN expression .)
    ,               reduce using rule 44 (special_expression -> RETURN expression .)
    ;               reduce using rule 44 (special_expression -> RETURN expression .)
    )               reduce using rule 44 (special_expression -> RETURN expression .)
    {               reduce using rule 44 (special_expression -> RETURN expression .)
    :               shift and go to state 82

  ! :               [ reduce using rule 44 (special_expression -> RETURN expression .) ]


state 41

    (22) unary_expression -> - postfix_expression .
    (11) postfix_expression -> postfix_expression . '

    *               reduce using rule 22 (unary_expression -> - postfix_expression .)
    /               reduce using rule 22 (unary_expression -> - postfix_expression .)
    DOTMUL          reduce using rule 22 (unary_expression -> - postfix_expression .)
    DOTDIV          reduce using rule 22 (unary_expression -> - postfix_expression .)
    +               reduce using rule 22 (unary_expression -> - postfix_expression .)
    -               reduce using rule 22 (unary_expression -> - postfix_expression .)
    DOTADD          reduce using rule 22 (unary_expression -> - postfix_expression .)
    DOTMINUS        reduce using rule 22 (unary_expression -> - postfix_expression .)
    <               reduce using rule 22 (unary_expression -> - postfix_expression .)
    >               reduce using rule 22 (unary_expression -> - postfix_expression .)
    LESSEREQ        reduce using rule 22 (unary_expression -> - postfix_expression .)
    GREATEREQ       reduce using rule 22 (unary_expression -> - postfix_expression .)
    EQ              reduce using rule 22 (unary_expression -> - postfix_expression .)
    NOTEQ           reduce using rule 22 (unary_expression -> - postfix_expression .)
    :               reduce using rule 22 (unary_expression -> - postfix_expression .)
    ,               reduce using rule 22 (unary_expression -> - postfix_expression .)
    ;               reduce using rule 22 (unary_expression -> - postfix_expression .)
    )               reduce using rule 22 (unary_expression -> - postfix_expression .)
    ]               reduce using rule 22 (unary_expression -> - postfix_expression .)
    {               reduce using rule 22 (unary_expression -> - postfix_expression .)
    '               shift and go to state 44


state 42

    (75) iteration_statement -> WHILE ( . expression ) { statement_list }
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    relational_expression          shift and go to state 19
    expression                     shift and go to state 83
    equality_expression            shift and go to state 31
    primary_expression             shift and go to state 27

state 43

    (51) assignment_expression -> postfix_expression SUBASSIGN . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    relational_expression          shift and go to state 19
    expression                     shift and go to state 84
    equality_expression            shift and go to state 31
    primary_expression             shift and go to state 27

state 44

    (11) postfix_expression -> postfix_expression ' .

    '               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    *               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    /               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    DOTMUL          reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    DOTDIV          reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    +               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    -               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    DOTADD          reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    DOTMINUS        reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    <               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    >               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    LESSEREQ        reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    GREATEREQ       reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    EQ              reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    NOTEQ           reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    :               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    ,               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    ;               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    ]               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    )               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    {               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    =               reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    ADDASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    SUBASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    MULASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression ' .)
    DIVASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression ' .)


state 45

    (49) assignment_expression -> postfix_expression = . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    relational_expression          shift and go to state 19
    expression                     shift and go to state 85
    equality_expression            shift and go to state 31
    primary_expression             shift and go to state 27

state 46

    (53) assignment_expression -> postfix_expression DIVASSIGN . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    relational_expression          shift and go to state 19
    expression                     shift and go to state 86
    equality_expression            shift and go to state 31
    primary_expression             shift and go to state 27

state 47

    (52) assignment_expression -> postfix_expression MULASSIGN . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    relational_expression          shift and go to state 19
    expression                     shift and go to state 87
    equality_expression            shift and go to state 31
    primary_expression             shift and go to state 27

state 48

    (50) assignment_expression -> postfix_expression ADDASSIGN . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    relational_expression          shift and go to state 19
    expression                     shift and go to state 88
    equality_expression            shift and go to state 31
    primary_expression             shift and go to state 27

state 49

    (42) special_expression -> PRINT print_index_expression_list .
    (18) print_index_expression_list -> print_index_expression_list . , ID

  ! shift/reduce conflict for , resolved as shift
    :               reduce using rule 42 (special_expression -> PRINT print_index_expression_list .)
    ]               reduce using rule 42 (special_expression -> PRINT print_index_expression_list .)
    ;               reduce using rule 42 (special_expression -> PRINT print_index_expression_list .)
    )               reduce using rule 42 (special_expression -> PRINT print_index_expression_list .)
    {               reduce using rule 42 (special_expression -> PRINT print_index_expression_list .)
    ,               shift and go to state 89

  ! ,               [ reduce using rule 42 (special_expression -> PRINT print_index_expression_list .) ]


state 50

    (17) print_index_expression_list -> ID .

    ,               reduce using rule 17 (print_index_expression_list -> ID .)
    :               reduce using rule 17 (print_index_expression_list -> ID .)
    ;               reduce using rule 17 (print_index_expression_list -> ID .)
    ]               reduce using rule 17 (print_index_expression_list -> ID .)
    )               reduce using rule 17 (print_index_expression_list -> ID .)
    {               reduce using rule 17 (print_index_expression_list -> ID .)


state 51

    (43) special_expression -> PRINT NORMSTRING .

    :               reduce using rule 43 (special_expression -> PRINT NORMSTRING .)
    ]               reduce using rule 43 (special_expression -> PRINT NORMSTRING .)
    ,               reduce using rule 43 (special_expression -> PRINT NORMSTRING .)
    ;               reduce using rule 43 (special_expression -> PRINT NORMSTRING .)
    )               reduce using rule 43 (special_expression -> PRINT NORMSTRING .)
    {               reduce using rule 43 (special_expression -> PRINT NORMSTRING .)


state 52

    (70) init_statement -> init_expression eostmt .

    IF              reduce using rule 70 (init_statement -> init_expression eostmt .)
    WHILE           reduce using rule 70 (init_statement -> init_expression eostmt .)
    FOR             reduce using rule 70 (init_statement -> init_expression eostmt .)
    ,               reduce using rule 70 (init_statement -> init_expression eostmt .)
    ;               reduce using rule 70 (init_statement -> init_expression eostmt .)
    ID              reduce using rule 70 (init_statement -> init_expression eostmt .)
    PRINT           reduce using rule 70 (init_statement -> init_expression eostmt .)
    RETURN          reduce using rule 70 (init_statement -> init_expression eostmt .)
    CONTINUE        reduce using rule 70 (init_statement -> init_expression eostmt .)
    BREAK           reduce using rule 70 (init_statement -> init_expression eostmt .)
    INTNUM          reduce using rule 70 (init_statement -> init_expression eostmt .)
    FLOATNUM        reduce using rule 70 (init_statement -> init_expression eostmt .)
    NORMSTRING      reduce using rule 70 (init_statement -> init_expression eostmt .)
    (               reduce using rule 70 (init_statement -> init_expression eostmt .)
    [               reduce using rule 70 (init_statement -> init_expression eostmt .)
    -               reduce using rule 70 (init_statement -> init_expression eostmt .)
    }               reduce using rule 70 (init_statement -> init_expression eostmt .)
    $end            reduce using rule 70 (init_statement -> init_expression eostmt .)
    ELSE            reduce using rule 70 (init_statement -> init_expression eostmt .)


state 53

    (7) primary_expression -> [ ] .

    '               reduce using rule 7 (primary_expression -> [ ] .)
    *               reduce using rule 7 (primary_expression -> [ ] .)
    /               reduce using rule 7 (primary_expression -> [ ] .)
    DOTMUL          reduce using rule 7 (primary_expression -> [ ] .)
    DOTDIV          reduce using rule 7 (primary_expression -> [ ] .)
    +               reduce using rule 7 (primary_expression -> [ ] .)
    -               reduce using rule 7 (primary_expression -> [ ] .)
    DOTADD          reduce using rule 7 (primary_expression -> [ ] .)
    DOTMINUS        reduce using rule 7 (primary_expression -> [ ] .)
    <               reduce using rule 7 (primary_expression -> [ ] .)
    >               reduce using rule 7 (primary_expression -> [ ] .)
    LESSEREQ        reduce using rule 7 (primary_expression -> [ ] .)
    GREATEREQ       reduce using rule 7 (primary_expression -> [ ] .)
    EQ              reduce using rule 7 (primary_expression -> [ ] .)
    NOTEQ           reduce using rule 7 (primary_expression -> [ ] .)
    {               reduce using rule 7 (primary_expression -> [ ] .)
    :               reduce using rule 7 (primary_expression -> [ ] .)
    ]               reduce using rule 7 (primary_expression -> [ ] .)
    ,               reduce using rule 7 (primary_expression -> [ ] .)
    ;               reduce using rule 7 (primary_expression -> [ ] .)
    =               reduce using rule 7 (primary_expression -> [ ] .)
    ADDASSIGN       reduce using rule 7 (primary_expression -> [ ] .)
    SUBASSIGN       reduce using rule 7 (primary_expression -> [ ] .)
    MULASSIGN       reduce using rule 7 (primary_expression -> [ ] .)
    DIVASSIGN       reduce using rule 7 (primary_expression -> [ ] .)
    )               reduce using rule 7 (primary_expression -> [ ] .)


state 54

    (12) index_expression -> : .

    )               reduce using rule 12 (index_expression -> : .)
    ,               reduce using rule 12 (index_expression -> : .)
    ;               reduce using rule 12 (index_expression -> : .)
    ]               reduce using rule 12 (index_expression -> : .)


state 55

    (8) primary_expression -> [ index_expression_list . ]
    (15) index_expression_list -> index_expression_list . , index_expression
    (16) index_expression_list -> index_expression_list . ; index_expression

    ]               shift and go to state 92
    ,               shift and go to state 90
    ;               shift and go to state 91


state 56

    (14) index_expression_list -> index_expression .

    )               reduce using rule 14 (index_expression_list -> index_expression .)
    ,               reduce using rule 14 (index_expression_list -> index_expression .)
    ;               reduce using rule 14 (index_expression_list -> index_expression .)
    ]               reduce using rule 14 (index_expression_list -> index_expression .)


state 57

    (13) index_expression -> expression .
    (48) expression -> expression . : special_expression

    )               reduce using rule 13 (index_expression -> expression .)
    ,               reduce using rule 13 (index_expression -> expression .)
    ;               reduce using rule 13 (index_expression -> expression .)
    ]               reduce using rule 13 (index_expression -> expression .)
    :               shift and go to state 82


state 58

    (29) additive_expression -> additive_expression + . multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 93
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27
    array_expression               shift and go to state 29

state 59

    (30) additive_expression -> additive_expression - . multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 94
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27
    array_expression               shift and go to state 29

state 60

    (31) additive_expression -> additive_expression DOTADD . multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 95
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27
    array_expression               shift and go to state 29

state 61

    (32) additive_expression -> additive_expression DOTMINUS . multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 96
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27
    array_expression               shift and go to state 29

state 62

    (6) primary_expression -> ( expression . )
    (48) expression -> expression . : special_expression

    )               shift and go to state 97
    :               shift and go to state 82


state 63

    (36) relational_expression -> relational_expression LESSEREQ . additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27
    array_expression               shift and go to state 29
    additive_expression            shift and go to state 98

state 64

    (37) relational_expression -> relational_expression GREATEREQ . additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27
    array_expression               shift and go to state 29
    additive_expression            shift and go to state 99

state 65

    (34) relational_expression -> relational_expression < . additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27
    array_expression               shift and go to state 29
    additive_expression            shift and go to state 100

state 66

    (35) relational_expression -> relational_expression > . additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27
    array_expression               shift and go to state 29
    additive_expression            shift and go to state 101

state 67

    (66) statement_list -> statement statement_list .

    }               reduce using rule 66 (statement_list -> statement statement_list .)
    $end            reduce using rule 66 (statement_list -> statement statement_list .)


state 68

    (69) assignment_statement -> assignment_expression eostmt .

    IF              reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    WHILE           reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    FOR             reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    ,               reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    ;               reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    ID              reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    PRINT           reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    RETURN          reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    CONTINUE        reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    BREAK           reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    INTNUM          reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    FLOATNUM        reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    NORMSTRING      reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    (               reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    [               reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    -               reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    }               reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    ELSE            reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)
    $end            reduce using rule 69 (assignment_statement -> assignment_expression eostmt .)


state 69

    (77) iteration_statement -> FOR ( . ID = expression ) { statement_list }

    ID              shift and go to state 102


state 70

    (76) iteration_statement -> FOR ID . = expression { statement_list }

    =               shift and go to state 103


state 71

    (27) multiplicative_expression -> multiplicative_expression DOTDIV . unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 104
    array_expression               shift and go to state 29
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27

state 72

    (24) multiplicative_expression -> multiplicative_expression * . unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 105
    array_expression               shift and go to state 29
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27

state 73

    (25) multiplicative_expression -> multiplicative_expression / . unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 106
    array_expression               shift and go to state 29
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27

state 74

    (26) multiplicative_expression -> multiplicative_expression DOTMUL . unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 107
    array_expression               shift and go to state 29
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27

state 75

    (19) array_expression -> ID ( . index_expression_list )
    (14) index_expression_list -> . index_expression
    (15) index_expression_list -> . index_expression_list , index_expression
    (16) index_expression_list -> . index_expression_list ; index_expression
    (12) index_expression -> . :
    (13) index_expression -> . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    :               shift and go to state 54
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    index_expression_list          shift and go to state 108
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    index_expression               shift and go to state 56
    primary_expression             shift and go to state 27
    expression                     shift and go to state 57
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 19

state 76

    (20) array_expression -> ID [ . index_expression_list ]
    (14) index_expression_list -> . index_expression
    (15) index_expression_list -> . index_expression_list , index_expression
    (16) index_expression_list -> . index_expression_list ; index_expression
    (12) index_expression -> . :
    (13) index_expression -> . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    :               shift and go to state 54
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    index_expression_list          shift and go to state 109
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    index_expression               shift and go to state 56
    primary_expression             shift and go to state 27
    expression                     shift and go to state 57
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 19

state 77

    (54) init_expression -> ID = . additive_expression
    (55) init_expression -> ID = . ZEROS ( index_expression_list )
    (56) init_expression -> ID = . ONES ( index_expression_list )
    (57) init_expression -> ID = . EYE ( index_expression_list )
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 113
    ONES            shift and go to state 112
    EYE             shift and go to state 111
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    primary_expression             shift and go to state 27
    array_expression               shift and go to state 29
    additive_expression            shift and go to state 110

state 78

    (40) equality_expression -> equality_expression NOTEQ . relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    relational_expression          shift and go to state 114
    array_expression               shift and go to state 29
    additive_expression            shift and go to state 12
    primary_expression             shift and go to state 27

state 79

    (39) equality_expression -> equality_expression EQ . relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    relational_expression          shift and go to state 115
    array_expression               shift and go to state 29
    additive_expression            shift and go to state 12
    primary_expression             shift and go to state 27

state 80

    (71) selection_statement -> IF ( . expression ) statement
    (72) selection_statement -> IF ( . expression ) statement ELSE statement
    (73) selection_statement -> IF ( . expression ) { statement_list }
    (74) selection_statement -> IF ( . expression ) { statement_list } ELSE { statement_list }
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    relational_expression          shift and go to state 19
    expression                     shift and go to state 116
    equality_expression            shift and go to state 31
    primary_expression             shift and go to state 27

state 81

    (68) expression_statement -> expression eostmt .

    ELSE            reduce using rule 68 (expression_statement -> expression eostmt .)
    IF              reduce using rule 68 (expression_statement -> expression eostmt .)
    WHILE           reduce using rule 68 (expression_statement -> expression eostmt .)
    FOR             reduce using rule 68 (expression_statement -> expression eostmt .)
    ,               reduce using rule 68 (expression_statement -> expression eostmt .)
    ;               reduce using rule 68 (expression_statement -> expression eostmt .)
    ID              reduce using rule 68 (expression_statement -> expression eostmt .)
    PRINT           reduce using rule 68 (expression_statement -> expression eostmt .)
    RETURN          reduce using rule 68 (expression_statement -> expression eostmt .)
    CONTINUE        reduce using rule 68 (expression_statement -> expression eostmt .)
    BREAK           reduce using rule 68 (expression_statement -> expression eostmt .)
    INTNUM          reduce using rule 68 (expression_statement -> expression eostmt .)
    FLOATNUM        reduce using rule 68 (expression_statement -> expression eostmt .)
    NORMSTRING      reduce using rule 68 (expression_statement -> expression eostmt .)
    (               reduce using rule 68 (expression_statement -> expression eostmt .)
    [               reduce using rule 68 (expression_statement -> expression eostmt .)
    -               reduce using rule 68 (expression_statement -> expression eostmt .)
    $end            reduce using rule 68 (expression_statement -> expression eostmt .)
    }               reduce using rule 68 (expression_statement -> expression eostmt .)


state 82

    (48) expression -> expression : . special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 117
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 19
    additive_expression            shift and go to state 12
    primary_expression             shift and go to state 27

state 83

    (75) iteration_statement -> WHILE ( expression . ) { statement_list }
    (48) expression -> expression . : special_expression

    )               shift and go to state 118
    :               shift and go to state 82


state 84

    (51) assignment_expression -> postfix_expression SUBASSIGN expression .
    (48) expression -> expression . : special_expression

    ,               reduce using rule 51 (assignment_expression -> postfix_expression SUBASSIGN expression .)
    ;               reduce using rule 51 (assignment_expression -> postfix_expression SUBASSIGN expression .)
    :               shift and go to state 82


state 85

    (49) assignment_expression -> postfix_expression = expression .
    (48) expression -> expression . : special_expression

    ,               reduce using rule 49 (assignment_expression -> postfix_expression = expression .)
    ;               reduce using rule 49 (assignment_expression -> postfix_expression = expression .)
    :               shift and go to state 82


state 86

    (53) assignment_expression -> postfix_expression DIVASSIGN expression .
    (48) expression -> expression . : special_expression

    ,               reduce using rule 53 (assignment_expression -> postfix_expression DIVASSIGN expression .)
    ;               reduce using rule 53 (assignment_expression -> postfix_expression DIVASSIGN expression .)
    :               shift and go to state 82


state 87

    (52) assignment_expression -> postfix_expression MULASSIGN expression .
    (48) expression -> expression . : special_expression

    ,               reduce using rule 52 (assignment_expression -> postfix_expression MULASSIGN expression .)
    ;               reduce using rule 52 (assignment_expression -> postfix_expression MULASSIGN expression .)
    :               shift and go to state 82


state 88

    (50) assignment_expression -> postfix_expression ADDASSIGN expression .
    (48) expression -> expression . : special_expression

    ,               reduce using rule 50 (assignment_expression -> postfix_expression ADDASSIGN expression .)
    ;               reduce using rule 50 (assignment_expression -> postfix_expression ADDASSIGN expression .)
    :               shift and go to state 82


state 89

    (18) print_index_expression_list -> print_index_expression_list , . ID

    ID              shift and go to state 119


state 90

    (15) index_expression_list -> index_expression_list , . index_expression
    (12) index_expression -> . :
    (13) index_expression -> . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    :               shift and go to state 54
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    index_expression               shift and go to state 120
    primary_expression             shift and go to state 27
    expression                     shift and go to state 57
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 19

state 91

    (16) index_expression_list -> index_expression_list ; . index_expression
    (12) index_expression -> . :
    (13) index_expression -> . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    :               shift and go to state 54
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    index_expression               shift and go to state 121
    primary_expression             shift and go to state 27
    expression                     shift and go to state 57
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 19

state 92

    (8) primary_expression -> [ index_expression_list ] .

    '               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    *               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    /               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    DOTMUL          reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    DOTDIV          reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    +               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    -               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    DOTADD          reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    DOTMINUS        reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    <               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    >               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    LESSEREQ        reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    GREATEREQ       reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    EQ              reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    NOTEQ           reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    {               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    :               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    ]               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    ,               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    ;               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    =               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    ADDASSIGN       reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    SUBASSIGN       reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    MULASSIGN       reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    DIVASSIGN       reduce using rule 8 (primary_expression -> [ index_expression_list ] .)
    )               reduce using rule 8 (primary_expression -> [ index_expression_list ] .)


state 93

    (29) additive_expression -> additive_expression + multiplicative_expression .
    (24) multiplicative_expression -> multiplicative_expression . * unary_expression
    (25) multiplicative_expression -> multiplicative_expression . / unary_expression
    (26) multiplicative_expression -> multiplicative_expression . DOTMUL unary_expression
    (27) multiplicative_expression -> multiplicative_expression . DOTDIV unary_expression

    +               reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    DOTADD          reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    DOTMINUS        reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    LESSEREQ        reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    GREATEREQ       reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ              reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    NOTEQ           reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    {               reduce using rule 29 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 72
    /               shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 71


state 94

    (30) additive_expression -> additive_expression - multiplicative_expression .
    (24) multiplicative_expression -> multiplicative_expression . * unary_expression
    (25) multiplicative_expression -> multiplicative_expression . / unary_expression
    (26) multiplicative_expression -> multiplicative_expression . DOTMUL unary_expression
    (27) multiplicative_expression -> multiplicative_expression . DOTDIV unary_expression

    +               reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    DOTADD          reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    DOTMINUS        reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    LESSEREQ        reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    GREATEREQ       reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ              reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    NOTEQ           reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    {               reduce using rule 30 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 72
    /               shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 71


state 95

    (31) additive_expression -> additive_expression DOTADD multiplicative_expression .
    (24) multiplicative_expression -> multiplicative_expression . * unary_expression
    (25) multiplicative_expression -> multiplicative_expression . / unary_expression
    (26) multiplicative_expression -> multiplicative_expression . DOTMUL unary_expression
    (27) multiplicative_expression -> multiplicative_expression . DOTDIV unary_expression

    +               reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    -               reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    DOTADD          reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    DOTMINUS        reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    <               reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    >               reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    LESSEREQ        reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    GREATEREQ       reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    EQ              reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    NOTEQ           reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    :               reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    ]               reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    ,               reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    ;               reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    )               reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    {               reduce using rule 31 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    *               shift and go to state 72
    /               shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 71


state 96

    (32) additive_expression -> additive_expression DOTMINUS multiplicative_expression .
    (24) multiplicative_expression -> multiplicative_expression . * unary_expression
    (25) multiplicative_expression -> multiplicative_expression . / unary_expression
    (26) multiplicative_expression -> multiplicative_expression . DOTMUL unary_expression
    (27) multiplicative_expression -> multiplicative_expression . DOTDIV unary_expression

    +               reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    -               reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    DOTADD          reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    DOTMINUS        reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    <               reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    >               reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    LESSEREQ        reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    GREATEREQ       reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    EQ              reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    NOTEQ           reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    :               reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    ]               reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    ,               reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    ;               reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    )               reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    {               reduce using rule 32 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    *               shift and go to state 72
    /               shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 71


state 97

    (6) primary_expression -> ( expression ) .

    '               reduce using rule 6 (primary_expression -> ( expression ) .)
    *               reduce using rule 6 (primary_expression -> ( expression ) .)
    /               reduce using rule 6 (primary_expression -> ( expression ) .)
    DOTMUL          reduce using rule 6 (primary_expression -> ( expression ) .)
    DOTDIV          reduce using rule 6 (primary_expression -> ( expression ) .)
    +               reduce using rule 6 (primary_expression -> ( expression ) .)
    -               reduce using rule 6 (primary_expression -> ( expression ) .)
    DOTADD          reduce using rule 6 (primary_expression -> ( expression ) .)
    DOTMINUS        reduce using rule 6 (primary_expression -> ( expression ) .)
    <               reduce using rule 6 (primary_expression -> ( expression ) .)
    >               reduce using rule 6 (primary_expression -> ( expression ) .)
    LESSEREQ        reduce using rule 6 (primary_expression -> ( expression ) .)
    GREATEREQ       reduce using rule 6 (primary_expression -> ( expression ) .)
    EQ              reduce using rule 6 (primary_expression -> ( expression ) .)
    NOTEQ           reduce using rule 6 (primary_expression -> ( expression ) .)
    {               reduce using rule 6 (primary_expression -> ( expression ) .)
    :               reduce using rule 6 (primary_expression -> ( expression ) .)
    ]               reduce using rule 6 (primary_expression -> ( expression ) .)
    ,               reduce using rule 6 (primary_expression -> ( expression ) .)
    ;               reduce using rule 6 (primary_expression -> ( expression ) .)
    =               reduce using rule 6 (primary_expression -> ( expression ) .)
    ADDASSIGN       reduce using rule 6 (primary_expression -> ( expression ) .)
    SUBASSIGN       reduce using rule 6 (primary_expression -> ( expression ) .)
    MULASSIGN       reduce using rule 6 (primary_expression -> ( expression ) .)
    DIVASSIGN       reduce using rule 6 (primary_expression -> ( expression ) .)
    )               reduce using rule 6 (primary_expression -> ( expression ) .)


state 98

    (36) relational_expression -> relational_expression LESSEREQ additive_expression .
    (29) additive_expression -> additive_expression . + multiplicative_expression
    (30) additive_expression -> additive_expression . - multiplicative_expression
    (31) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (32) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    <               reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    >               reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    LESSEREQ        reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    GREATEREQ       reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    EQ              reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    NOTEQ           reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    :               reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    ,               reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    ;               reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    ]               reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    )               reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    {               reduce using rule 36 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    +               shift and go to state 58
    -               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61


state 99

    (37) relational_expression -> relational_expression GREATEREQ additive_expression .
    (29) additive_expression -> additive_expression . + multiplicative_expression
    (30) additive_expression -> additive_expression . - multiplicative_expression
    (31) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (32) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    <               reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    >               reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    LESSEREQ        reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    GREATEREQ       reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    EQ              reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    NOTEQ           reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    :               reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    ,               reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    ;               reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    ]               reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    )               reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    {               reduce using rule 37 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    +               shift and go to state 58
    -               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61


state 100

    (34) relational_expression -> relational_expression < additive_expression .
    (29) additive_expression -> additive_expression . + multiplicative_expression
    (30) additive_expression -> additive_expression . - multiplicative_expression
    (31) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (32) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    <               reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    >               reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    LESSEREQ        reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    GREATEREQ       reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    EQ              reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    NOTEQ           reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    :               reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    ,               reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    ;               reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    ]               reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    )               reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    {               reduce using rule 34 (relational_expression -> relational_expression < additive_expression .)
    +               shift and go to state 58
    -               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61


state 101

    (35) relational_expression -> relational_expression > additive_expression .
    (29) additive_expression -> additive_expression . + multiplicative_expression
    (30) additive_expression -> additive_expression . - multiplicative_expression
    (31) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (32) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    <               reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    >               reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    LESSEREQ        reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    GREATEREQ       reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    EQ              reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    NOTEQ           reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    :               reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    ,               reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    ;               reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    ]               reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    )               reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    {               reduce using rule 35 (relational_expression -> relational_expression > additive_expression .)
    +               shift and go to state 58
    -               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61


state 102

    (77) iteration_statement -> FOR ( ID . = expression ) { statement_list }

    =               shift and go to state 122


state 103

    (76) iteration_statement -> FOR ID = . expression { statement_list }
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    relational_expression          shift and go to state 19
    expression                     shift and go to state 123
    equality_expression            shift and go to state 31
    primary_expression             shift and go to state 27

state 104

    (27) multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .

    *               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    /               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    DOTMUL          reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    DOTDIV          reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    +               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    -               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    DOTADD          reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    DOTMINUS        reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    <               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    >               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    LESSEREQ        reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    GREATEREQ       reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    EQ              reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    NOTEQ           reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    :               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    ,               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    ;               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    ]               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    )               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    {               reduce using rule 27 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)


state 105

    (24) multiplicative_expression -> multiplicative_expression * unary_expression .

    *               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    /               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    DOTMUL          reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    DOTDIV          reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    +               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    -               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    DOTADD          reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    DOTMINUS        reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    <               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    >               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LESSEREQ        reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    GREATEREQ       reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    EQ              reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    NOTEQ           reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    :               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ,               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ;               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ]               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    )               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    {               reduce using rule 24 (multiplicative_expression -> multiplicative_expression * unary_expression .)


state 106

    (25) multiplicative_expression -> multiplicative_expression / unary_expression .

    *               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    /               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    DOTMUL          reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    DOTDIV          reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    +               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    -               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    DOTADD          reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    DOTMINUS        reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    <               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    >               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    LESSEREQ        reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    GREATEREQ       reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    EQ              reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    NOTEQ           reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    :               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ,               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ;               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ]               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    )               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    {               reduce using rule 25 (multiplicative_expression -> multiplicative_expression / unary_expression .)


state 107

    (26) multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .

    *               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    /               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    DOTMUL          reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    DOTDIV          reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    +               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    -               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    DOTADD          reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    DOTMINUS        reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    <               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    >               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    LESSEREQ        reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    GREATEREQ       reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    EQ              reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    NOTEQ           reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    :               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    ,               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    ;               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    ]               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    )               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    {               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)


state 108

    (19) array_expression -> ID ( index_expression_list . )
    (15) index_expression_list -> index_expression_list . , index_expression
    (16) index_expression_list -> index_expression_list . ; index_expression

    )               shift and go to state 124
    ,               shift and go to state 90
    ;               shift and go to state 91


state 109

    (20) array_expression -> ID [ index_expression_list . ]
    (15) index_expression_list -> index_expression_list . , index_expression
    (16) index_expression_list -> index_expression_list . ; index_expression

    ]               shift and go to state 125
    ,               shift and go to state 90
    ;               shift and go to state 91


state 110

    (54) init_expression -> ID = additive_expression .
    (29) additive_expression -> additive_expression . + multiplicative_expression
    (30) additive_expression -> additive_expression . - multiplicative_expression
    (31) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (32) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    ,               reduce using rule 54 (init_expression -> ID = additive_expression .)
    ;               reduce using rule 54 (init_expression -> ID = additive_expression .)
    +               shift and go to state 58
    -               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTMINUS        shift and go to state 61


state 111

    (57) init_expression -> ID = EYE . ( index_expression_list )

    (               shift and go to state 126


state 112

    (56) init_expression -> ID = ONES . ( index_expression_list )

    (               shift and go to state 127


state 113

    (55) init_expression -> ID = ZEROS . ( index_expression_list )

    (               shift and go to state 128


state 114

    (40) equality_expression -> equality_expression NOTEQ relational_expression .
    (34) relational_expression -> relational_expression . < additive_expression
    (35) relational_expression -> relational_expression . > additive_expression
    (36) relational_expression -> relational_expression . LESSEREQ additive_expression
    (37) relational_expression -> relational_expression . GREATEREQ additive_expression

    EQ              reduce using rule 40 (equality_expression -> equality_expression NOTEQ relational_expression .)
    NOTEQ           reduce using rule 40 (equality_expression -> equality_expression NOTEQ relational_expression .)
    :               reduce using rule 40 (equality_expression -> equality_expression NOTEQ relational_expression .)
    ,               reduce using rule 40 (equality_expression -> equality_expression NOTEQ relational_expression .)
    ;               reduce using rule 40 (equality_expression -> equality_expression NOTEQ relational_expression .)
    )               reduce using rule 40 (equality_expression -> equality_expression NOTEQ relational_expression .)
    ]               reduce using rule 40 (equality_expression -> equality_expression NOTEQ relational_expression .)
    {               reduce using rule 40 (equality_expression -> equality_expression NOTEQ relational_expression .)
    <               shift and go to state 65
    >               shift and go to state 66
    LESSEREQ        shift and go to state 63
    GREATEREQ       shift and go to state 64


state 115

    (39) equality_expression -> equality_expression EQ relational_expression .
    (34) relational_expression -> relational_expression . < additive_expression
    (35) relational_expression -> relational_expression . > additive_expression
    (36) relational_expression -> relational_expression . LESSEREQ additive_expression
    (37) relational_expression -> relational_expression . GREATEREQ additive_expression

    EQ              reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    NOTEQ           reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    :               reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    ,               reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    ;               reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    )               reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    ]               reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    {               reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    <               shift and go to state 65
    >               shift and go to state 66
    LESSEREQ        shift and go to state 63
    GREATEREQ       shift and go to state 64


state 116

    (71) selection_statement -> IF ( expression . ) statement
    (72) selection_statement -> IF ( expression . ) statement ELSE statement
    (73) selection_statement -> IF ( expression . ) { statement_list }
    (74) selection_statement -> IF ( expression . ) { statement_list } ELSE { statement_list }
    (48) expression -> expression . : special_expression

    )               shift and go to state 129
    :               shift and go to state 82


state 117

    (48) expression -> expression : special_expression .

    :               reduce using rule 48 (expression -> expression : special_expression .)
    ,               reduce using rule 48 (expression -> expression : special_expression .)
    ;               reduce using rule 48 (expression -> expression : special_expression .)
    )               reduce using rule 48 (expression -> expression : special_expression .)
    ]               reduce using rule 48 (expression -> expression : special_expression .)
    {               reduce using rule 48 (expression -> expression : special_expression .)


state 118

    (75) iteration_statement -> WHILE ( expression ) . { statement_list }

    {               shift and go to state 130


state 119

    (18) print_index_expression_list -> print_index_expression_list , ID .

    ,               reduce using rule 18 (print_index_expression_list -> print_index_expression_list , ID .)
    :               reduce using rule 18 (print_index_expression_list -> print_index_expression_list , ID .)
    ;               reduce using rule 18 (print_index_expression_list -> print_index_expression_list , ID .)
    ]               reduce using rule 18 (print_index_expression_list -> print_index_expression_list , ID .)
    )               reduce using rule 18 (print_index_expression_list -> print_index_expression_list , ID .)
    {               reduce using rule 18 (print_index_expression_list -> print_index_expression_list , ID .)


state 120

    (15) index_expression_list -> index_expression_list , index_expression .

    )               reduce using rule 15 (index_expression_list -> index_expression_list , index_expression .)
    ,               reduce using rule 15 (index_expression_list -> index_expression_list , index_expression .)
    ;               reduce using rule 15 (index_expression_list -> index_expression_list , index_expression .)
    ]               reduce using rule 15 (index_expression_list -> index_expression_list , index_expression .)


state 121

    (16) index_expression_list -> index_expression_list ; index_expression .

    )               reduce using rule 16 (index_expression_list -> index_expression_list ; index_expression .)
    ,               reduce using rule 16 (index_expression_list -> index_expression_list ; index_expression .)
    ;               reduce using rule 16 (index_expression_list -> index_expression_list ; index_expression .)
    ]               reduce using rule 16 (index_expression_list -> index_expression_list ; index_expression .)


state 122

    (77) iteration_statement -> FOR ( ID = . expression ) { statement_list }
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    relational_expression          shift and go to state 19
    expression                     shift and go to state 131
    equality_expression            shift and go to state 31
    primary_expression             shift and go to state 27

state 123

    (76) iteration_statement -> FOR ID = expression . { statement_list }
    (48) expression -> expression . : special_expression

    {               shift and go to state 132
    :               shift and go to state 82


state 124

    (19) array_expression -> ID ( index_expression_list ) .

    '               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    *               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    /               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    DOTMUL          reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    DOTDIV          reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    +               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    -               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    DOTADD          reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    DOTMINUS        reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    <               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    >               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    LESSEREQ        reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    GREATEREQ       reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    EQ              reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    NOTEQ           reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    :               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    ,               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    ;               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    ]               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    )               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    {               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    =               reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    ADDASSIGN       reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    SUBASSIGN       reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    MULASSIGN       reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)
    DIVASSIGN       reduce using rule 19 (array_expression -> ID ( index_expression_list ) .)


state 125

    (20) array_expression -> ID [ index_expression_list ] .

    '               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    *               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    /               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    DOTMUL          reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    DOTDIV          reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    +               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    -               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    DOTADD          reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    DOTMINUS        reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    <               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    >               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    LESSEREQ        reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    GREATEREQ       reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    EQ              reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    NOTEQ           reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    :               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    ,               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    ;               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    ]               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    )               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    {               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    =               reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    ADDASSIGN       reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    SUBASSIGN       reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    MULASSIGN       reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)
    DIVASSIGN       reduce using rule 20 (array_expression -> ID [ index_expression_list ] .)


state 126

    (57) init_expression -> ID = EYE ( . index_expression_list )
    (14) index_expression_list -> . index_expression
    (15) index_expression_list -> . index_expression_list , index_expression
    (16) index_expression_list -> . index_expression_list ; index_expression
    (12) index_expression -> . :
    (13) index_expression -> . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    :               shift and go to state 54
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    index_expression_list          shift and go to state 133
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    index_expression               shift and go to state 56
    primary_expression             shift and go to state 27
    expression                     shift and go to state 57
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 19

state 127

    (56) init_expression -> ID = ONES ( . index_expression_list )
    (14) index_expression_list -> . index_expression
    (15) index_expression_list -> . index_expression_list , index_expression
    (16) index_expression_list -> . index_expression_list ; index_expression
    (12) index_expression -> . :
    (13) index_expression -> . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    :               shift and go to state 54
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    index_expression_list          shift and go to state 134
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    index_expression               shift and go to state 56
    primary_expression             shift and go to state 27
    expression                     shift and go to state 57
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 19

state 128

    (55) init_expression -> ID = ZEROS ( . index_expression_list )
    (14) index_expression_list -> . index_expression
    (15) index_expression_list -> . index_expression_list , index_expression
    (16) index_expression_list -> . index_expression_list ; index_expression
    (12) index_expression -> . :
    (13) index_expression -> . expression
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]

    :               shift and go to state 54
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    -               shift and go to state 4
    ID              shift and go to state 39
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11

    unary_expression               shift and go to state 3
    special_expression             shift and go to state 33
    array_expression               shift and go to state 29
    multiplicative_expression      shift and go to state 25
    index_expression_list          shift and go to state 135
    postfix_expression             shift and go to state 38
    additive_expression            shift and go to state 12
    index_expression               shift and go to state 56
    primary_expression             shift and go to state 27
    expression                     shift and go to state 57
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 19

state 129

    (71) selection_statement -> IF ( expression ) . statement
    (72) selection_statement -> IF ( expression ) . statement ELSE statement
    (73) selection_statement -> IF ( expression ) . { statement_list }
    (74) selection_statement -> IF ( expression ) . { statement_list } ELSE { statement_list }
    (60) statement -> . assignment_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . init_statement
    (69) assignment_statement -> . assignment_expression eostmt
    (67) expression_statement -> . eostmt
    (68) expression_statement -> . expression eostmt
    (71) selection_statement -> . IF ( expression ) statement
    (72) selection_statement -> . IF ( expression ) statement ELSE statement
    (73) selection_statement -> . IF ( expression ) { statement_list }
    (74) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (75) iteration_statement -> . WHILE ( expression ) { statement_list }
    (76) iteration_statement -> . FOR ID = expression { statement_list }
    (77) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (70) init_statement -> . init_expression eostmt
    (49) assignment_expression -> . postfix_expression = expression
    (50) assignment_expression -> . postfix_expression ADDASSIGN expression
    (51) assignment_expression -> . postfix_expression SUBASSIGN expression
    (52) assignment_expression -> . postfix_expression MULASSIGN expression
    (53) assignment_expression -> . postfix_expression DIVASSIGN expression
    (58) eostmt -> . ,
    (59) eostmt -> . ;
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (54) init_expression -> . ID = additive_expression
    (55) init_expression -> . ID = ZEROS ( index_expression_list )
    (56) init_expression -> . ID = ONES ( index_expression_list )
    (57) init_expression -> . ID = EYE ( index_expression_list )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression

    {               shift and go to state 137
    IF              shift and go to state 32
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    ,               shift and go to state 6
    ;               shift and go to state 21
    ID              shift and go to state 30
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11
    -               shift and go to state 4

    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 17
    additive_expression            shift and go to state 12
    init_expression                shift and go to state 10
    selection_statement            shift and go to state 15
    assignment_statement           shift and go to state 16
    postfix_expression             shift and go to state 8
    relational_expression          shift and go to state 19
    statement                      shift and go to state 136
    assignment_expression          shift and go to state 23
    multiplicative_expression      shift and go to state 25
    eostmt                         shift and go to state 26
    primary_expression             shift and go to state 27
    init_statement                 shift and go to state 28
    array_expression               shift and go to state 29
    equality_expression            shift and go to state 31
    special_expression             shift and go to state 33
    expression                     shift and go to state 34

state 130

    (75) iteration_statement -> WHILE ( expression ) { . statement_list }
    (65) statement_list -> . statement
    (66) statement_list -> . statement statement_list
    (60) statement -> . assignment_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . init_statement
    (69) assignment_statement -> . assignment_expression eostmt
    (67) expression_statement -> . eostmt
    (68) expression_statement -> . expression eostmt
    (71) selection_statement -> . IF ( expression ) statement
    (72) selection_statement -> . IF ( expression ) statement ELSE statement
    (73) selection_statement -> . IF ( expression ) { statement_list }
    (74) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (75) iteration_statement -> . WHILE ( expression ) { statement_list }
    (76) iteration_statement -> . FOR ID = expression { statement_list }
    (77) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (70) init_statement -> . init_expression eostmt
    (49) assignment_expression -> . postfix_expression = expression
    (50) assignment_expression -> . postfix_expression ADDASSIGN expression
    (51) assignment_expression -> . postfix_expression SUBASSIGN expression
    (52) assignment_expression -> . postfix_expression MULASSIGN expression
    (53) assignment_expression -> . postfix_expression DIVASSIGN expression
    (58) eostmt -> . ,
    (59) eostmt -> . ;
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (54) init_expression -> . ID = additive_expression
    (55) init_expression -> . ID = ZEROS ( index_expression_list )
    (56) init_expression -> . ID = ONES ( index_expression_list )
    (57) init_expression -> . ID = EYE ( index_expression_list )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression

    IF              shift and go to state 32
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    ,               shift and go to state 6
    ;               shift and go to state 21
    ID              shift and go to state 30
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11
    -               shift and go to state 4

    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 17
    additive_expression            shift and go to state 12
    init_expression                shift and go to state 10
    selection_statement            shift and go to state 15
    assignment_statement           shift and go to state 16
    postfix_expression             shift and go to state 8
    relational_expression          shift and go to state 19
    statement                      shift and go to state 20
    assignment_expression          shift and go to state 23
    multiplicative_expression      shift and go to state 25
    eostmt                         shift and go to state 26
    primary_expression             shift and go to state 27
    init_statement                 shift and go to state 28
    array_expression               shift and go to state 29
    equality_expression            shift and go to state 31
    special_expression             shift and go to state 33
    statement_list                 shift and go to state 138
    expression                     shift and go to state 34

state 131

    (77) iteration_statement -> FOR ( ID = expression . ) { statement_list }
    (48) expression -> expression . : special_expression

    )               shift and go to state 139
    :               shift and go to state 82


state 132

    (76) iteration_statement -> FOR ID = expression { . statement_list }
    (65) statement_list -> . statement
    (66) statement_list -> . statement statement_list
    (60) statement -> . assignment_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . init_statement
    (69) assignment_statement -> . assignment_expression eostmt
    (67) expression_statement -> . eostmt
    (68) expression_statement -> . expression eostmt
    (71) selection_statement -> . IF ( expression ) statement
    (72) selection_statement -> . IF ( expression ) statement ELSE statement
    (73) selection_statement -> . IF ( expression ) { statement_list }
    (74) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (75) iteration_statement -> . WHILE ( expression ) { statement_list }
    (76) iteration_statement -> . FOR ID = expression { statement_list }
    (77) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (70) init_statement -> . init_expression eostmt
    (49) assignment_expression -> . postfix_expression = expression
    (50) assignment_expression -> . postfix_expression ADDASSIGN expression
    (51) assignment_expression -> . postfix_expression SUBASSIGN expression
    (52) assignment_expression -> . postfix_expression MULASSIGN expression
    (53) assignment_expression -> . postfix_expression DIVASSIGN expression
    (58) eostmt -> . ,
    (59) eostmt -> . ;
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (54) init_expression -> . ID = additive_expression
    (55) init_expression -> . ID = ZEROS ( index_expression_list )
    (56) init_expression -> . ID = ONES ( index_expression_list )
    (57) init_expression -> . ID = EYE ( index_expression_list )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression

    IF              shift and go to state 32
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    ,               shift and go to state 6
    ;               shift and go to state 21
    ID              shift and go to state 30
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11
    -               shift and go to state 4

    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 17
    additive_expression            shift and go to state 12
    init_expression                shift and go to state 10
    selection_statement            shift and go to state 15
    assignment_statement           shift and go to state 16
    postfix_expression             shift and go to state 8
    relational_expression          shift and go to state 19
    statement                      shift and go to state 20
    assignment_expression          shift and go to state 23
    multiplicative_expression      shift and go to state 25
    eostmt                         shift and go to state 26
    primary_expression             shift and go to state 27
    init_statement                 shift and go to state 28
    array_expression               shift and go to state 29
    equality_expression            shift and go to state 31
    special_expression             shift and go to state 33
    statement_list                 shift and go to state 140
    expression                     shift and go to state 34

state 133

    (57) init_expression -> ID = EYE ( index_expression_list . )
    (15) index_expression_list -> index_expression_list . , index_expression
    (16) index_expression_list -> index_expression_list . ; index_expression

    )               shift and go to state 141
    ,               shift and go to state 90
    ;               shift and go to state 91


state 134

    (56) init_expression -> ID = ONES ( index_expression_list . )
    (15) index_expression_list -> index_expression_list . , index_expression
    (16) index_expression_list -> index_expression_list . ; index_expression

    )               shift and go to state 142
    ,               shift and go to state 90
    ;               shift and go to state 91


state 135

    (55) init_expression -> ID = ZEROS ( index_expression_list . )
    (15) index_expression_list -> index_expression_list . , index_expression
    (16) index_expression_list -> index_expression_list . ; index_expression

    )               shift and go to state 143
    ,               shift and go to state 90
    ;               shift and go to state 91


state 136

    (71) selection_statement -> IF ( expression ) statement .
    (72) selection_statement -> IF ( expression ) statement . ELSE statement

    IF              reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    ,               reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    ID              reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    PRINT           reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    INTNUM          reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    FLOATNUM        reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    NORMSTRING      reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    [               reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    }               reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    $end            reduce using rule 71 (selection_statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 144

  ! ELSE            [ reduce using rule 71 (selection_statement -> IF ( expression ) statement .) ]


state 137

    (73) selection_statement -> IF ( expression ) { . statement_list }
    (74) selection_statement -> IF ( expression ) { . statement_list } ELSE { statement_list }
    (65) statement_list -> . statement
    (66) statement_list -> . statement statement_list
    (60) statement -> . assignment_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . init_statement
    (69) assignment_statement -> . assignment_expression eostmt
    (67) expression_statement -> . eostmt
    (68) expression_statement -> . expression eostmt
    (71) selection_statement -> . IF ( expression ) statement
    (72) selection_statement -> . IF ( expression ) statement ELSE statement
    (73) selection_statement -> . IF ( expression ) { statement_list }
    (74) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (75) iteration_statement -> . WHILE ( expression ) { statement_list }
    (76) iteration_statement -> . FOR ID = expression { statement_list }
    (77) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (70) init_statement -> . init_expression eostmt
    (49) assignment_expression -> . postfix_expression = expression
    (50) assignment_expression -> . postfix_expression ADDASSIGN expression
    (51) assignment_expression -> . postfix_expression SUBASSIGN expression
    (52) assignment_expression -> . postfix_expression MULASSIGN expression
    (53) assignment_expression -> . postfix_expression DIVASSIGN expression
    (58) eostmt -> . ,
    (59) eostmt -> . ;
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (54) init_expression -> . ID = additive_expression
    (55) init_expression -> . ID = ZEROS ( index_expression_list )
    (56) init_expression -> . ID = ONES ( index_expression_list )
    (57) init_expression -> . ID = EYE ( index_expression_list )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression

    IF              shift and go to state 32
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    ,               shift and go to state 6
    ;               shift and go to state 21
    ID              shift and go to state 30
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11
    -               shift and go to state 4

    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 17
    additive_expression            shift and go to state 12
    init_expression                shift and go to state 10
    selection_statement            shift and go to state 15
    assignment_statement           shift and go to state 16
    postfix_expression             shift and go to state 8
    relational_expression          shift and go to state 19
    statement                      shift and go to state 20
    assignment_expression          shift and go to state 23
    multiplicative_expression      shift and go to state 25
    eostmt                         shift and go to state 26
    primary_expression             shift and go to state 27
    init_statement                 shift and go to state 28
    array_expression               shift and go to state 29
    equality_expression            shift and go to state 31
    special_expression             shift and go to state 33
    statement_list                 shift and go to state 145
    expression                     shift and go to state 34

state 138

    (75) iteration_statement -> WHILE ( expression ) { statement_list . }

    }               shift and go to state 146


state 139

    (77) iteration_statement -> FOR ( ID = expression ) . { statement_list }

    {               shift and go to state 147


state 140

    (76) iteration_statement -> FOR ID = expression { statement_list . }

    }               shift and go to state 148


state 141

    (57) init_expression -> ID = EYE ( index_expression_list ) .

    ,               reduce using rule 57 (init_expression -> ID = EYE ( index_expression_list ) .)
    ;               reduce using rule 57 (init_expression -> ID = EYE ( index_expression_list ) .)


state 142

    (56) init_expression -> ID = ONES ( index_expression_list ) .

    ,               reduce using rule 56 (init_expression -> ID = ONES ( index_expression_list ) .)
    ;               reduce using rule 56 (init_expression -> ID = ONES ( index_expression_list ) .)


state 143

    (55) init_expression -> ID = ZEROS ( index_expression_list ) .

    ,               reduce using rule 55 (init_expression -> ID = ZEROS ( index_expression_list ) .)
    ;               reduce using rule 55 (init_expression -> ID = ZEROS ( index_expression_list ) .)


state 144

    (72) selection_statement -> IF ( expression ) statement ELSE . statement
    (60) statement -> . assignment_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . init_statement
    (69) assignment_statement -> . assignment_expression eostmt
    (67) expression_statement -> . eostmt
    (68) expression_statement -> . expression eostmt
    (71) selection_statement -> . IF ( expression ) statement
    (72) selection_statement -> . IF ( expression ) statement ELSE statement
    (73) selection_statement -> . IF ( expression ) { statement_list }
    (74) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (75) iteration_statement -> . WHILE ( expression ) { statement_list }
    (76) iteration_statement -> . FOR ID = expression { statement_list }
    (77) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (70) init_statement -> . init_expression eostmt
    (49) assignment_expression -> . postfix_expression = expression
    (50) assignment_expression -> . postfix_expression ADDASSIGN expression
    (51) assignment_expression -> . postfix_expression SUBASSIGN expression
    (52) assignment_expression -> . postfix_expression MULASSIGN expression
    (53) assignment_expression -> . postfix_expression DIVASSIGN expression
    (58) eostmt -> . ,
    (59) eostmt -> . ;
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (54) init_expression -> . ID = additive_expression
    (55) init_expression -> . ID = ZEROS ( index_expression_list )
    (56) init_expression -> . ID = ONES ( index_expression_list )
    (57) init_expression -> . ID = EYE ( index_expression_list )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression

    IF              shift and go to state 32
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    ,               shift and go to state 6
    ;               shift and go to state 21
    ID              shift and go to state 30
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11
    -               shift and go to state 4

    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 3
    init_expression                shift and go to state 10
    additive_expression            shift and go to state 12
    iteration_statement            shift and go to state 17
    selection_statement            shift and go to state 15
    assignment_statement           shift and go to state 16
    postfix_expression             shift and go to state 8
    relational_expression          shift and go to state 19
    statement                      shift and go to state 149
    assignment_expression          shift and go to state 23
    multiplicative_expression      shift and go to state 25
    eostmt                         shift and go to state 26
    primary_expression             shift and go to state 27
    init_statement                 shift and go to state 28
    array_expression               shift and go to state 29
    equality_expression            shift and go to state 31
    special_expression             shift and go to state 33
    expression                     shift and go to state 34

state 145

    (73) selection_statement -> IF ( expression ) { statement_list . }
    (74) selection_statement -> IF ( expression ) { statement_list . } ELSE { statement_list }

    }               shift and go to state 150


state 146

    (75) iteration_statement -> WHILE ( expression ) { statement_list } .

    IF              reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    WHILE           reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    FOR             reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    ,               reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    ;               reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    ID              reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    PRINT           reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    RETURN          reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    CONTINUE        reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    BREAK           reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    INTNUM          reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    FLOATNUM        reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    NORMSTRING      reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    (               reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    [               reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    -               reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    }               reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    $end            reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    ELSE            reduce using rule 75 (iteration_statement -> WHILE ( expression ) { statement_list } .)


state 147

    (77) iteration_statement -> FOR ( ID = expression ) { . statement_list }
    (65) statement_list -> . statement
    (66) statement_list -> . statement statement_list
    (60) statement -> . assignment_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . init_statement
    (69) assignment_statement -> . assignment_expression eostmt
    (67) expression_statement -> . eostmt
    (68) expression_statement -> . expression eostmt
    (71) selection_statement -> . IF ( expression ) statement
    (72) selection_statement -> . IF ( expression ) statement ELSE statement
    (73) selection_statement -> . IF ( expression ) { statement_list }
    (74) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (75) iteration_statement -> . WHILE ( expression ) { statement_list }
    (76) iteration_statement -> . FOR ID = expression { statement_list }
    (77) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (70) init_statement -> . init_expression eostmt
    (49) assignment_expression -> . postfix_expression = expression
    (50) assignment_expression -> . postfix_expression ADDASSIGN expression
    (51) assignment_expression -> . postfix_expression SUBASSIGN expression
    (52) assignment_expression -> . postfix_expression MULASSIGN expression
    (53) assignment_expression -> . postfix_expression DIVASSIGN expression
    (58) eostmt -> . ,
    (59) eostmt -> . ;
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (54) init_expression -> . ID = additive_expression
    (55) init_expression -> . ID = ZEROS ( index_expression_list )
    (56) init_expression -> . ID = ONES ( index_expression_list )
    (57) init_expression -> . ID = EYE ( index_expression_list )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression

    IF              shift and go to state 32
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    ,               shift and go to state 6
    ;               shift and go to state 21
    ID              shift and go to state 30
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11
    -               shift and go to state 4

    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 17
    additive_expression            shift and go to state 12
    init_expression                shift and go to state 10
    selection_statement            shift and go to state 15
    assignment_statement           shift and go to state 16
    postfix_expression             shift and go to state 8
    relational_expression          shift and go to state 19
    statement                      shift and go to state 20
    assignment_expression          shift and go to state 23
    multiplicative_expression      shift and go to state 25
    eostmt                         shift and go to state 26
    primary_expression             shift and go to state 27
    init_statement                 shift and go to state 28
    array_expression               shift and go to state 29
    equality_expression            shift and go to state 31
    special_expression             shift and go to state 33
    statement_list                 shift and go to state 151
    expression                     shift and go to state 34

state 148

    (76) iteration_statement -> FOR ID = expression { statement_list } .

    IF              reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    WHILE           reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    FOR             reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    ,               reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    ;               reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    ID              reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    PRINT           reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    RETURN          reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    CONTINUE        reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    BREAK           reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    INTNUM          reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    FLOATNUM        reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    NORMSTRING      reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    (               reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    [               reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    -               reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    }               reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    $end            reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)
    ELSE            reduce using rule 76 (iteration_statement -> FOR ID = expression { statement_list } .)


state 149

    (72) selection_statement -> IF ( expression ) statement ELSE statement .

    IF              reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ,               reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ID              reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    PRINT           reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INTNUM          reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FLOATNUM        reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    NORMSTRING      reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    [               reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    }               reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    $end            reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 72 (selection_statement -> IF ( expression ) statement ELSE statement .)


state 150

    (73) selection_statement -> IF ( expression ) { statement_list } .
    (74) selection_statement -> IF ( expression ) { statement_list } . ELSE { statement_list }

    IF              reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    WHILE           reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    FOR             reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    ,               reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    ;               reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    ID              reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    PRINT           reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    RETURN          reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    CONTINUE        reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    BREAK           reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    INTNUM          reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    FLOATNUM        reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    NORMSTRING      reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    (               reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    [               reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    -               reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    }               reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    $end            reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .)
    ELSE            shift and go to state 152

  ! ELSE            [ reduce using rule 73 (selection_statement -> IF ( expression ) { statement_list } .) ]


state 151

    (77) iteration_statement -> FOR ( ID = expression ) { statement_list . }

    }               shift and go to state 153


state 152

    (74) selection_statement -> IF ( expression ) { statement_list } ELSE . { statement_list }

    {               shift and go to state 154


state 153

    (77) iteration_statement -> FOR ( ID = expression ) { statement_list } .

    IF              reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    WHILE           reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    FOR             reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    ,               reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    ;               reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    ID              reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    PRINT           reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    RETURN          reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    CONTINUE        reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    BREAK           reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    INTNUM          reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    FLOATNUM        reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    NORMSTRING      reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    (               reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    [               reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    -               reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    }               reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    $end            reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    ELSE            reduce using rule 77 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)


state 154

    (74) selection_statement -> IF ( expression ) { statement_list } ELSE { . statement_list }
    (65) statement_list -> . statement
    (66) statement_list -> . statement statement_list
    (60) statement -> . assignment_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . init_statement
    (69) assignment_statement -> . assignment_expression eostmt
    (67) expression_statement -> . eostmt
    (68) expression_statement -> . expression eostmt
    (71) selection_statement -> . IF ( expression ) statement
    (72) selection_statement -> . IF ( expression ) statement ELSE statement
    (73) selection_statement -> . IF ( expression ) { statement_list }
    (74) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (75) iteration_statement -> . WHILE ( expression ) { statement_list }
    (76) iteration_statement -> . FOR ID = expression { statement_list }
    (77) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (70) init_statement -> . init_expression eostmt
    (49) assignment_expression -> . postfix_expression = expression
    (50) assignment_expression -> . postfix_expression ADDASSIGN expression
    (51) assignment_expression -> . postfix_expression SUBASSIGN expression
    (52) assignment_expression -> . postfix_expression MULASSIGN expression
    (53) assignment_expression -> . postfix_expression DIVASSIGN expression
    (58) eostmt -> . ,
    (59) eostmt -> . ;
    (47) expression -> . special_expression
    (48) expression -> . expression : special_expression
    (54) init_expression -> . ID = additive_expression
    (55) init_expression -> . ID = ZEROS ( index_expression_list )
    (56) init_expression -> . ID = ONES ( index_expression_list )
    (57) init_expression -> . ID = EYE ( index_expression_list )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . array_expression
    (11) postfix_expression -> . postfix_expression '
    (41) special_expression -> . equality_expression
    (42) special_expression -> . PRINT print_index_expression_list
    (43) special_expression -> . PRINT NORMSTRING
    (44) special_expression -> . RETURN expression
    (45) special_expression -> . CONTINUE
    (46) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . NORMSTRING
    (6) primary_expression -> . ( expression )
    (7) primary_expression -> . [ ]
    (8) primary_expression -> . [ index_expression_list ]
    (19) array_expression -> . ID ( index_expression_list )
    (20) array_expression -> . ID [ index_expression_list ]
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NOTEQ relational_expression
    (33) relational_expression -> . additive_expression
    (34) relational_expression -> . relational_expression < additive_expression
    (35) relational_expression -> . relational_expression > additive_expression
    (36) relational_expression -> . relational_expression LESSEREQ additive_expression
    (37) relational_expression -> . relational_expression GREATEREQ additive_expression
    (28) additive_expression -> . multiplicative_expression
    (29) additive_expression -> . additive_expression + multiplicative_expression
    (30) additive_expression -> . additive_expression - multiplicative_expression
    (31) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (32) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (23) multiplicative_expression -> . unary_expression
    (24) multiplicative_expression -> . multiplicative_expression * unary_expression
    (25) multiplicative_expression -> . multiplicative_expression / unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (27) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (21) unary_expression -> . postfix_expression
    (22) unary_expression -> . - postfix_expression

    IF              shift and go to state 32
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    ,               shift and go to state 6
    ;               shift and go to state 21
    ID              shift and go to state 30
    PRINT           shift and go to state 9
    RETURN          shift and go to state 2
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 35
    INTNUM          shift and go to state 13
    FLOATNUM        shift and go to state 5
    NORMSTRING      shift and go to state 22
    (               shift and go to state 14
    [               shift and go to state 11
    -               shift and go to state 4

    expression_statement           shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 17
    additive_expression            shift and go to state 12
    init_expression                shift and go to state 10
    selection_statement            shift and go to state 15
    assignment_statement           shift and go to state 16
    postfix_expression             shift and go to state 8
    relational_expression          shift and go to state 19
    statement                      shift and go to state 20
    assignment_expression          shift and go to state 23
    multiplicative_expression      shift and go to state 25
    eostmt                         shift and go to state 26
    primary_expression             shift and go to state 27
    init_statement                 shift and go to state 28
    array_expression               shift and go to state 29
    equality_expression            shift and go to state 31
    special_expression             shift and go to state 33
    statement_list                 shift and go to state 155
    expression                     shift and go to state 34

state 155

    (74) selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list . }

    }               shift and go to state 156


state 156

    (74) selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .

    IF              reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    WHILE           reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    FOR             reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    ,               reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    ;               reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    ID              reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    PRINT           reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    RETURN          reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    CONTINUE        reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    BREAK           reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    INTNUM          reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    FLOATNUM        reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    NORMSTRING      reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    (               reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    [               reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    -               reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    }               reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    $end            reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    ELSE            reduce using rule 74 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for = in state 30 resolved as shift
WARNING: shift/reduce conflict for : in state 40 resolved as shift
WARNING: shift/reduce conflict for , in state 49 resolved as shift
