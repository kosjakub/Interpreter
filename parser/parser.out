Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     primary_expression -> ID
Rule 3     primary_expression -> INTNUM
Rule 4     primary_expression -> FLOATNUM
Rule 5     primary_expression -> ( expression )
Rule 6     primary_expression -> [ ]
Rule 7     primary_expression -> [ index_expression_list ]
Rule 8     postfix_expression -> primary_expression
Rule 9     postfix_expression -> array_expression
Rule 10    postfix_expression -> postfix_expression '
Rule 11    index_expression -> :
Rule 12    index_expression -> expression
Rule 13    index_expression_list -> index_expression
Rule 14    index_expression_list -> index_expression_list , index_expression
Rule 15    index_expression_list -> index_expression_list ; index_expression_list
Rule 16    print_index_expression_list -> ID
Rule 17    print_index_expression_list -> print_index_expression_list , ID
Rule 18    array_expression -> ID ( index_expression_list )
Rule 19    array_expression -> ID [ index_expression_list ]
Rule 20    unary_expression -> postfix_expression
Rule 21    unary_expression -> - postfix_expression
Rule 22    multiplicative_expression -> unary_expression
Rule 23    multiplicative_expression -> multiplicative_expression * unary_expression
Rule 24    multiplicative_expression -> multiplicative_expression / unary_expression
Rule 25    multiplicative_expression -> multiplicative_expression DOTMUL unary_expression
Rule 26    multiplicative_expression -> multiplicative_expression DOTDIV unary_expression
Rule 27    additive_expression -> multiplicative_expression
Rule 28    additive_expression -> additive_expression + multiplicative_expression
Rule 29    additive_expression -> additive_expression - multiplicative_expression
Rule 30    additive_expression -> additive_expression DOTADD multiplicative_expression
Rule 31    additive_expression -> additive_expression DOTMINUS multiplicative_expression
Rule 32    relational_expression -> additive_expression
Rule 33    relational_expression -> relational_expression < additive_expression
Rule 34    relational_expression -> relational_expression > additive_expression
Rule 35    relational_expression -> relational_expression LESSEREQ additive_expression
Rule 36    relational_expression -> relational_expression GREATEREQ additive_expression
Rule 37    equality_expression -> relational_expression
Rule 38    equality_expression -> equality_expression EQ relational_expression
Rule 39    equality_expression -> equality_expression NOTEQ relational_expression
Rule 40    special_expression -> equality_expression
Rule 41    special_expression -> ZEROS ( additive_expression )
Rule 42    special_expression -> ONES ( additive_expression )
Rule 43    special_expression -> EYE ( additive_expression )
Rule 44    special_expression -> PRINT print_index_expression_list
Rule 45    special_expression -> PRINT NORMSTRING
Rule 46    special_expression -> RETURN postfix_expression
Rule 47    special_expression -> CONTINUE
Rule 48    special_expression -> BREAK
Rule 49    expression -> special_expression
Rule 50    expression -> expression : special_expression
Rule 51    assignment_expression -> postfix_expression = expression
Rule 52    assignment_expression -> postfix_expression ADDASSIGN expression
Rule 53    assignment_expression -> postfix_expression SUBASSIGN expression
Rule 54    assignment_expression -> postfix_expression MULASSIGN expression
Rule 55    assignment_expression -> postfix_expression DIVASSIGN expression
Rule 56    eostmt -> ,
Rule 57    eostmt -> ;
Rule 58    statement -> assignment_statement
Rule 59    statement -> expression_statement
Rule 60    statement -> selection_statement
Rule 61    statement -> iteration_statement
Rule 62    statement_list -> statement
Rule 63    statement_list -> statement statement_list
Rule 64    expression_statement -> eostmt
Rule 65    expression_statement -> expression eostmt
Rule 66    assignment_statement -> assignment_expression eostmt
Rule 67    selection_statement -> IF ( expression ) statement
Rule 68    selection_statement -> IF ( expression ) statement ELSE statement
Rule 69    selection_statement -> IF ( expression ) { statement_list }
Rule 70    selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list }
Rule 71    iteration_statement -> WHILE ( expression ) { statement_list }
Rule 72    iteration_statement -> FOR ID = expression { statement_list }
Rule 73    iteration_statement -> FOR ( ID = expression ) { statement_list }

Terminals, with rules where they appear

'                    : 10
(                    : 5 18 41 42 43 67 68 69 70 71 73
)                    : 5 18 41 42 43 67 68 69 70 71 73
*                    : 23
+                    : 28
,                    : 14 17 56
-                    : 21 29
/                    : 24
:                    : 11 50
;                    : 15 57
<                    : 33
=                    : 51 72 73
>                    : 34
ADDASSIGN            : 52
BREAK                : 48
CONTINUE             : 47
DIVASSIGN            : 55
DOTADD               : 30
DOTDIV               : 26
DOTMINUS             : 31
DOTMUL               : 25
ELSE                 : 68 70
EQ                   : 38
EYE                  : 43
FLOATNUM             : 4
FOR                  : 72 73
GREATEREQ            : 36
ID                   : 2 16 17 18 19 72 73
IF                   : 67 68 69 70
INTNUM               : 3
LESSEREQ             : 35
MULASSIGN            : 54
NORMSTRING           : 45
NOTEQ                : 39
ONES                 : 42
PRINT                : 44 45
RETURN               : 46
SUBASSIGN            : 53
WHILE                : 71
ZEROS                : 41
[                    : 6 7 19
]                    : 6 7 19
error                : 
{                    : 69 70 70 71 72 73
}                    : 69 70 70 71 72 73

Nonterminals, with rules where they appear

additive_expression  : 28 29 30 31 32 33 34 35 36 41 42 43
array_expression     : 9
assignment_expression : 66
assignment_statement : 58
eostmt               : 64 65 66
equality_expression  : 38 39 40
expression           : 5 12 50 51 52 53 54 55 65 67 68 69 70 71 72 73
expression_statement : 59
index_expression     : 13 14
index_expression_list : 7 14 15 15 18 19
iteration_statement  : 61
multiplicative_expression : 23 24 25 26 27 28 29 30 31
postfix_expression   : 10 20 21 46 51 52 53 54 55
primary_expression   : 8
print_index_expression_list : 17 44
program              : 0
relational_expression : 33 34 35 36 37 38 39
selection_statement  : 60
special_expression   : 49 50
statement            : 62 63 67 68 68
statement_list       : 1 63 69 70 70 71 72 73
unary_expression     : 22 23 24 25 26

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (62) statement_list -> . statement
    (63) statement_list -> . statement statement_list
    (58) statement -> . assignment_statement
    (59) statement -> . expression_statement
    (60) statement -> . selection_statement
    (61) statement -> . iteration_statement
    (66) assignment_statement -> . assignment_expression eostmt
    (64) expression_statement -> . eostmt
    (65) expression_statement -> . expression eostmt
    (67) selection_statement -> . IF ( expression ) statement
    (68) selection_statement -> . IF ( expression ) statement ELSE statement
    (69) selection_statement -> . IF ( expression ) { statement_list }
    (70) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (71) iteration_statement -> . WHILE ( expression ) { statement_list }
    (72) iteration_statement -> . FOR ID = expression { statement_list }
    (73) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (51) assignment_expression -> . postfix_expression = expression
    (52) assignment_expression -> . postfix_expression ADDASSIGN expression
    (53) assignment_expression -> . postfix_expression SUBASSIGN expression
    (54) assignment_expression -> . postfix_expression MULASSIGN expression
    (55) assignment_expression -> . postfix_expression DIVASSIGN expression
    (56) eostmt -> . ,
    (57) eostmt -> . ;
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression

    IF              shift and go to state 11
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    ,               shift and go to state 17
    ;               shift and go to state 18
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33
    -               shift and go to state 36

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    assignment_expression          shift and go to state 8
    eostmt                         shift and go to state 9
    expression                     shift and go to state 10
    postfix_expression             shift and go to state 16
    special_expression             shift and go to state 19
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 3

    (62) statement_list -> statement .
    (63) statement_list -> statement . statement_list
    (62) statement_list -> . statement
    (63) statement_list -> . statement statement_list
    (58) statement -> . assignment_statement
    (59) statement -> . expression_statement
    (60) statement -> . selection_statement
    (61) statement -> . iteration_statement
    (66) assignment_statement -> . assignment_expression eostmt
    (64) expression_statement -> . eostmt
    (65) expression_statement -> . expression eostmt
    (67) selection_statement -> . IF ( expression ) statement
    (68) selection_statement -> . IF ( expression ) statement ELSE statement
    (69) selection_statement -> . IF ( expression ) { statement_list }
    (70) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (71) iteration_statement -> . WHILE ( expression ) { statement_list }
    (72) iteration_statement -> . FOR ID = expression { statement_list }
    (73) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (51) assignment_expression -> . postfix_expression = expression
    (52) assignment_expression -> . postfix_expression ADDASSIGN expression
    (53) assignment_expression -> . postfix_expression SUBASSIGN expression
    (54) assignment_expression -> . postfix_expression MULASSIGN expression
    (55) assignment_expression -> . postfix_expression DIVASSIGN expression
    (56) eostmt -> . ,
    (57) eostmt -> . ;
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression

    $end            reduce using rule 62 (statement_list -> statement .)
    }               reduce using rule 62 (statement_list -> statement .)
    IF              shift and go to state 11
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    ,               shift and go to state 17
    ;               shift and go to state 18
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33
    -               shift and go to state 36

    statement                      shift and go to state 3
    statement_list                 shift and go to state 38
    assignment_statement           shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    assignment_expression          shift and go to state 8
    eostmt                         shift and go to state 9
    expression                     shift and go to state 10
    postfix_expression             shift and go to state 16
    special_expression             shift and go to state 19
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37

state 4

    (58) statement -> assignment_statement .

    IF              reduce using rule 58 (statement -> assignment_statement .)
    WHILE           reduce using rule 58 (statement -> assignment_statement .)
    FOR             reduce using rule 58 (statement -> assignment_statement .)
    ,               reduce using rule 58 (statement -> assignment_statement .)
    ;               reduce using rule 58 (statement -> assignment_statement .)
    ZEROS           reduce using rule 58 (statement -> assignment_statement .)
    ONES            reduce using rule 58 (statement -> assignment_statement .)
    EYE             reduce using rule 58 (statement -> assignment_statement .)
    PRINT           reduce using rule 58 (statement -> assignment_statement .)
    RETURN          reduce using rule 58 (statement -> assignment_statement .)
    CONTINUE        reduce using rule 58 (statement -> assignment_statement .)
    BREAK           reduce using rule 58 (statement -> assignment_statement .)
    ID              reduce using rule 58 (statement -> assignment_statement .)
    INTNUM          reduce using rule 58 (statement -> assignment_statement .)
    FLOATNUM        reduce using rule 58 (statement -> assignment_statement .)
    (               reduce using rule 58 (statement -> assignment_statement .)
    [               reduce using rule 58 (statement -> assignment_statement .)
    -               reduce using rule 58 (statement -> assignment_statement .)
    $end            reduce using rule 58 (statement -> assignment_statement .)
    }               reduce using rule 58 (statement -> assignment_statement .)
    ELSE            reduce using rule 58 (statement -> assignment_statement .)


state 5

    (59) statement -> expression_statement .

    IF              reduce using rule 59 (statement -> expression_statement .)
    WHILE           reduce using rule 59 (statement -> expression_statement .)
    FOR             reduce using rule 59 (statement -> expression_statement .)
    ,               reduce using rule 59 (statement -> expression_statement .)
    ;               reduce using rule 59 (statement -> expression_statement .)
    ZEROS           reduce using rule 59 (statement -> expression_statement .)
    ONES            reduce using rule 59 (statement -> expression_statement .)
    EYE             reduce using rule 59 (statement -> expression_statement .)
    PRINT           reduce using rule 59 (statement -> expression_statement .)
    RETURN          reduce using rule 59 (statement -> expression_statement .)
    CONTINUE        reduce using rule 59 (statement -> expression_statement .)
    BREAK           reduce using rule 59 (statement -> expression_statement .)
    ID              reduce using rule 59 (statement -> expression_statement .)
    INTNUM          reduce using rule 59 (statement -> expression_statement .)
    FLOATNUM        reduce using rule 59 (statement -> expression_statement .)
    (               reduce using rule 59 (statement -> expression_statement .)
    [               reduce using rule 59 (statement -> expression_statement .)
    -               reduce using rule 59 (statement -> expression_statement .)
    $end            reduce using rule 59 (statement -> expression_statement .)
    }               reduce using rule 59 (statement -> expression_statement .)
    ELSE            reduce using rule 59 (statement -> expression_statement .)


state 6

    (60) statement -> selection_statement .

    IF              reduce using rule 60 (statement -> selection_statement .)
    WHILE           reduce using rule 60 (statement -> selection_statement .)
    FOR             reduce using rule 60 (statement -> selection_statement .)
    ,               reduce using rule 60 (statement -> selection_statement .)
    ;               reduce using rule 60 (statement -> selection_statement .)
    ZEROS           reduce using rule 60 (statement -> selection_statement .)
    ONES            reduce using rule 60 (statement -> selection_statement .)
    EYE             reduce using rule 60 (statement -> selection_statement .)
    PRINT           reduce using rule 60 (statement -> selection_statement .)
    RETURN          reduce using rule 60 (statement -> selection_statement .)
    CONTINUE        reduce using rule 60 (statement -> selection_statement .)
    BREAK           reduce using rule 60 (statement -> selection_statement .)
    ID              reduce using rule 60 (statement -> selection_statement .)
    INTNUM          reduce using rule 60 (statement -> selection_statement .)
    FLOATNUM        reduce using rule 60 (statement -> selection_statement .)
    (               reduce using rule 60 (statement -> selection_statement .)
    [               reduce using rule 60 (statement -> selection_statement .)
    -               reduce using rule 60 (statement -> selection_statement .)
    $end            reduce using rule 60 (statement -> selection_statement .)
    }               reduce using rule 60 (statement -> selection_statement .)
    ELSE            reduce using rule 60 (statement -> selection_statement .)


state 7

    (61) statement -> iteration_statement .

    IF              reduce using rule 61 (statement -> iteration_statement .)
    WHILE           reduce using rule 61 (statement -> iteration_statement .)
    FOR             reduce using rule 61 (statement -> iteration_statement .)
    ,               reduce using rule 61 (statement -> iteration_statement .)
    ;               reduce using rule 61 (statement -> iteration_statement .)
    ZEROS           reduce using rule 61 (statement -> iteration_statement .)
    ONES            reduce using rule 61 (statement -> iteration_statement .)
    EYE             reduce using rule 61 (statement -> iteration_statement .)
    PRINT           reduce using rule 61 (statement -> iteration_statement .)
    RETURN          reduce using rule 61 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 61 (statement -> iteration_statement .)
    BREAK           reduce using rule 61 (statement -> iteration_statement .)
    ID              reduce using rule 61 (statement -> iteration_statement .)
    INTNUM          reduce using rule 61 (statement -> iteration_statement .)
    FLOATNUM        reduce using rule 61 (statement -> iteration_statement .)
    (               reduce using rule 61 (statement -> iteration_statement .)
    [               reduce using rule 61 (statement -> iteration_statement .)
    -               reduce using rule 61 (statement -> iteration_statement .)
    $end            reduce using rule 61 (statement -> iteration_statement .)
    }               reduce using rule 61 (statement -> iteration_statement .)
    ELSE            reduce using rule 61 (statement -> iteration_statement .)


state 8

    (66) assignment_statement -> assignment_expression . eostmt
    (56) eostmt -> . ,
    (57) eostmt -> . ;

    ,               shift and go to state 17
    ;               shift and go to state 18

    eostmt                         shift and go to state 39

state 9

    (64) expression_statement -> eostmt .

    IF              reduce using rule 64 (expression_statement -> eostmt .)
    WHILE           reduce using rule 64 (expression_statement -> eostmt .)
    FOR             reduce using rule 64 (expression_statement -> eostmt .)
    ,               reduce using rule 64 (expression_statement -> eostmt .)
    ;               reduce using rule 64 (expression_statement -> eostmt .)
    ZEROS           reduce using rule 64 (expression_statement -> eostmt .)
    ONES            reduce using rule 64 (expression_statement -> eostmt .)
    EYE             reduce using rule 64 (expression_statement -> eostmt .)
    PRINT           reduce using rule 64 (expression_statement -> eostmt .)
    RETURN          reduce using rule 64 (expression_statement -> eostmt .)
    CONTINUE        reduce using rule 64 (expression_statement -> eostmt .)
    BREAK           reduce using rule 64 (expression_statement -> eostmt .)
    ID              reduce using rule 64 (expression_statement -> eostmt .)
    INTNUM          reduce using rule 64 (expression_statement -> eostmt .)
    FLOATNUM        reduce using rule 64 (expression_statement -> eostmt .)
    (               reduce using rule 64 (expression_statement -> eostmt .)
    [               reduce using rule 64 (expression_statement -> eostmt .)
    -               reduce using rule 64 (expression_statement -> eostmt .)
    $end            reduce using rule 64 (expression_statement -> eostmt .)
    }               reduce using rule 64 (expression_statement -> eostmt .)
    ELSE            reduce using rule 64 (expression_statement -> eostmt .)


state 10

    (65) expression_statement -> expression . eostmt
    (50) expression -> expression . : special_expression
    (56) eostmt -> . ,
    (57) eostmt -> . ;

    :               shift and go to state 41
    ,               shift and go to state 17
    ;               shift and go to state 18

    eostmt                         shift and go to state 40

state 11

    (67) selection_statement -> IF . ( expression ) statement
    (68) selection_statement -> IF . ( expression ) statement ELSE statement
    (69) selection_statement -> IF . ( expression ) { statement_list }
    (70) selection_statement -> IF . ( expression ) { statement_list } ELSE { statement_list }

    (               shift and go to state 42


state 12

    (5) primary_expression -> ( . expression )
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    expression                     shift and go to state 43
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    postfix_expression             shift and go to state 44
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 13

    (71) iteration_statement -> WHILE . ( expression ) { statement_list }

    (               shift and go to state 45


state 14

    (72) iteration_statement -> FOR . ID = expression { statement_list }
    (73) iteration_statement -> FOR . ( ID = expression ) { statement_list }

    ID              shift and go to state 46
    (               shift and go to state 47


state 15

    (2) primary_expression -> ID .
    (18) array_expression -> ID . ( index_expression_list )
    (19) array_expression -> ID . [ index_expression_list ]

    =               reduce using rule 2 (primary_expression -> ID .)
    ADDASSIGN       reduce using rule 2 (primary_expression -> ID .)
    SUBASSIGN       reduce using rule 2 (primary_expression -> ID .)
    MULASSIGN       reduce using rule 2 (primary_expression -> ID .)
    DIVASSIGN       reduce using rule 2 (primary_expression -> ID .)
    '               reduce using rule 2 (primary_expression -> ID .)
    *               reduce using rule 2 (primary_expression -> ID .)
    /               reduce using rule 2 (primary_expression -> ID .)
    DOTMUL          reduce using rule 2 (primary_expression -> ID .)
    DOTDIV          reduce using rule 2 (primary_expression -> ID .)
    +               reduce using rule 2 (primary_expression -> ID .)
    -               reduce using rule 2 (primary_expression -> ID .)
    DOTADD          reduce using rule 2 (primary_expression -> ID .)
    DOTMINUS        reduce using rule 2 (primary_expression -> ID .)
    <               reduce using rule 2 (primary_expression -> ID .)
    >               reduce using rule 2 (primary_expression -> ID .)
    LESSEREQ        reduce using rule 2 (primary_expression -> ID .)
    GREATEREQ       reduce using rule 2 (primary_expression -> ID .)
    EQ              reduce using rule 2 (primary_expression -> ID .)
    NOTEQ           reduce using rule 2 (primary_expression -> ID .)
    :               reduce using rule 2 (primary_expression -> ID .)
    ,               reduce using rule 2 (primary_expression -> ID .)
    ;               reduce using rule 2 (primary_expression -> ID .)
    )               reduce using rule 2 (primary_expression -> ID .)
    ]               reduce using rule 2 (primary_expression -> ID .)
    {               reduce using rule 2 (primary_expression -> ID .)
    (               shift and go to state 48
    [               shift and go to state 49


state 16

    (51) assignment_expression -> postfix_expression . = expression
    (52) assignment_expression -> postfix_expression . ADDASSIGN expression
    (53) assignment_expression -> postfix_expression . SUBASSIGN expression
    (54) assignment_expression -> postfix_expression . MULASSIGN expression
    (55) assignment_expression -> postfix_expression . DIVASSIGN expression
    (10) postfix_expression -> postfix_expression . '
    (20) unary_expression -> postfix_expression .

    =               shift and go to state 50
    ADDASSIGN       shift and go to state 51
    SUBASSIGN       shift and go to state 52
    MULASSIGN       shift and go to state 53
    DIVASSIGN       shift and go to state 54
    '               shift and go to state 55
    *               reduce using rule 20 (unary_expression -> postfix_expression .)
    /               reduce using rule 20 (unary_expression -> postfix_expression .)
    DOTMUL          reduce using rule 20 (unary_expression -> postfix_expression .)
    DOTDIV          reduce using rule 20 (unary_expression -> postfix_expression .)
    +               reduce using rule 20 (unary_expression -> postfix_expression .)
    -               reduce using rule 20 (unary_expression -> postfix_expression .)
    DOTADD          reduce using rule 20 (unary_expression -> postfix_expression .)
    DOTMINUS        reduce using rule 20 (unary_expression -> postfix_expression .)
    <               reduce using rule 20 (unary_expression -> postfix_expression .)
    >               reduce using rule 20 (unary_expression -> postfix_expression .)
    LESSEREQ        reduce using rule 20 (unary_expression -> postfix_expression .)
    GREATEREQ       reduce using rule 20 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 20 (unary_expression -> postfix_expression .)
    NOTEQ           reduce using rule 20 (unary_expression -> postfix_expression .)
    :               reduce using rule 20 (unary_expression -> postfix_expression .)
    ,               reduce using rule 20 (unary_expression -> postfix_expression .)
    ;               reduce using rule 20 (unary_expression -> postfix_expression .)


state 17

    (56) eostmt -> , .

    IF              reduce using rule 56 (eostmt -> , .)
    WHILE           reduce using rule 56 (eostmt -> , .)
    FOR             reduce using rule 56 (eostmt -> , .)
    ,               reduce using rule 56 (eostmt -> , .)
    ;               reduce using rule 56 (eostmt -> , .)
    ZEROS           reduce using rule 56 (eostmt -> , .)
    ONES            reduce using rule 56 (eostmt -> , .)
    EYE             reduce using rule 56 (eostmt -> , .)
    PRINT           reduce using rule 56 (eostmt -> , .)
    RETURN          reduce using rule 56 (eostmt -> , .)
    CONTINUE        reduce using rule 56 (eostmt -> , .)
    BREAK           reduce using rule 56 (eostmt -> , .)
    ID              reduce using rule 56 (eostmt -> , .)
    INTNUM          reduce using rule 56 (eostmt -> , .)
    FLOATNUM        reduce using rule 56 (eostmt -> , .)
    (               reduce using rule 56 (eostmt -> , .)
    [               reduce using rule 56 (eostmt -> , .)
    -               reduce using rule 56 (eostmt -> , .)
    $end            reduce using rule 56 (eostmt -> , .)
    }               reduce using rule 56 (eostmt -> , .)
    ELSE            reduce using rule 56 (eostmt -> , .)


state 18

    (57) eostmt -> ; .

    IF              reduce using rule 57 (eostmt -> ; .)
    WHILE           reduce using rule 57 (eostmt -> ; .)
    FOR             reduce using rule 57 (eostmt -> ; .)
    ,               reduce using rule 57 (eostmt -> ; .)
    ;               reduce using rule 57 (eostmt -> ; .)
    ZEROS           reduce using rule 57 (eostmt -> ; .)
    ONES            reduce using rule 57 (eostmt -> ; .)
    EYE             reduce using rule 57 (eostmt -> ; .)
    PRINT           reduce using rule 57 (eostmt -> ; .)
    RETURN          reduce using rule 57 (eostmt -> ; .)
    CONTINUE        reduce using rule 57 (eostmt -> ; .)
    BREAK           reduce using rule 57 (eostmt -> ; .)
    ID              reduce using rule 57 (eostmt -> ; .)
    INTNUM          reduce using rule 57 (eostmt -> ; .)
    FLOATNUM        reduce using rule 57 (eostmt -> ; .)
    (               reduce using rule 57 (eostmt -> ; .)
    [               reduce using rule 57 (eostmt -> ; .)
    -               reduce using rule 57 (eostmt -> ; .)
    $end            reduce using rule 57 (eostmt -> ; .)
    }               reduce using rule 57 (eostmt -> ; .)
    ELSE            reduce using rule 57 (eostmt -> ; .)


state 19

    (49) expression -> special_expression .

    :               reduce using rule 49 (expression -> special_expression .)
    ,               reduce using rule 49 (expression -> special_expression .)
    ;               reduce using rule 49 (expression -> special_expression .)
    )               reduce using rule 49 (expression -> special_expression .)
    ]               reduce using rule 49 (expression -> special_expression .)
    {               reduce using rule 49 (expression -> special_expression .)


state 20

    (8) postfix_expression -> primary_expression .

    =               reduce using rule 8 (postfix_expression -> primary_expression .)
    ADDASSIGN       reduce using rule 8 (postfix_expression -> primary_expression .)
    SUBASSIGN       reduce using rule 8 (postfix_expression -> primary_expression .)
    MULASSIGN       reduce using rule 8 (postfix_expression -> primary_expression .)
    DIVASSIGN       reduce using rule 8 (postfix_expression -> primary_expression .)
    '               reduce using rule 8 (postfix_expression -> primary_expression .)
    *               reduce using rule 8 (postfix_expression -> primary_expression .)
    /               reduce using rule 8 (postfix_expression -> primary_expression .)
    DOTMUL          reduce using rule 8 (postfix_expression -> primary_expression .)
    DOTDIV          reduce using rule 8 (postfix_expression -> primary_expression .)
    +               reduce using rule 8 (postfix_expression -> primary_expression .)
    -               reduce using rule 8 (postfix_expression -> primary_expression .)
    DOTADD          reduce using rule 8 (postfix_expression -> primary_expression .)
    DOTMINUS        reduce using rule 8 (postfix_expression -> primary_expression .)
    <               reduce using rule 8 (postfix_expression -> primary_expression .)
    >               reduce using rule 8 (postfix_expression -> primary_expression .)
    LESSEREQ        reduce using rule 8 (postfix_expression -> primary_expression .)
    GREATEREQ       reduce using rule 8 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 8 (postfix_expression -> primary_expression .)
    NOTEQ           reduce using rule 8 (postfix_expression -> primary_expression .)
    :               reduce using rule 8 (postfix_expression -> primary_expression .)
    ,               reduce using rule 8 (postfix_expression -> primary_expression .)
    ;               reduce using rule 8 (postfix_expression -> primary_expression .)
    )               reduce using rule 8 (postfix_expression -> primary_expression .)
    ]               reduce using rule 8 (postfix_expression -> primary_expression .)
    {               reduce using rule 8 (postfix_expression -> primary_expression .)


state 21

    (9) postfix_expression -> array_expression .

    =               reduce using rule 9 (postfix_expression -> array_expression .)
    ADDASSIGN       reduce using rule 9 (postfix_expression -> array_expression .)
    SUBASSIGN       reduce using rule 9 (postfix_expression -> array_expression .)
    MULASSIGN       reduce using rule 9 (postfix_expression -> array_expression .)
    DIVASSIGN       reduce using rule 9 (postfix_expression -> array_expression .)
    '               reduce using rule 9 (postfix_expression -> array_expression .)
    *               reduce using rule 9 (postfix_expression -> array_expression .)
    /               reduce using rule 9 (postfix_expression -> array_expression .)
    DOTMUL          reduce using rule 9 (postfix_expression -> array_expression .)
    DOTDIV          reduce using rule 9 (postfix_expression -> array_expression .)
    +               reduce using rule 9 (postfix_expression -> array_expression .)
    -               reduce using rule 9 (postfix_expression -> array_expression .)
    DOTADD          reduce using rule 9 (postfix_expression -> array_expression .)
    DOTMINUS        reduce using rule 9 (postfix_expression -> array_expression .)
    <               reduce using rule 9 (postfix_expression -> array_expression .)
    >               reduce using rule 9 (postfix_expression -> array_expression .)
    LESSEREQ        reduce using rule 9 (postfix_expression -> array_expression .)
    GREATEREQ       reduce using rule 9 (postfix_expression -> array_expression .)
    EQ              reduce using rule 9 (postfix_expression -> array_expression .)
    NOTEQ           reduce using rule 9 (postfix_expression -> array_expression .)
    :               reduce using rule 9 (postfix_expression -> array_expression .)
    ,               reduce using rule 9 (postfix_expression -> array_expression .)
    ;               reduce using rule 9 (postfix_expression -> array_expression .)
    )               reduce using rule 9 (postfix_expression -> array_expression .)
    ]               reduce using rule 9 (postfix_expression -> array_expression .)
    {               reduce using rule 9 (postfix_expression -> array_expression .)


state 22

    (40) special_expression -> equality_expression .
    (38) equality_expression -> equality_expression . EQ relational_expression
    (39) equality_expression -> equality_expression . NOTEQ relational_expression

    :               reduce using rule 40 (special_expression -> equality_expression .)
    ,               reduce using rule 40 (special_expression -> equality_expression .)
    ;               reduce using rule 40 (special_expression -> equality_expression .)
    )               reduce using rule 40 (special_expression -> equality_expression .)
    ]               reduce using rule 40 (special_expression -> equality_expression .)
    {               reduce using rule 40 (special_expression -> equality_expression .)
    EQ              shift and go to state 56
    NOTEQ           shift and go to state 57


state 23

    (41) special_expression -> ZEROS . ( additive_expression )

    (               shift and go to state 58


state 24

    (32) relational_expression -> additive_expression .
    (28) additive_expression -> additive_expression . + multiplicative_expression
    (29) additive_expression -> additive_expression . - multiplicative_expression
    (30) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (31) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    <               reduce using rule 32 (relational_expression -> additive_expression .)
    >               reduce using rule 32 (relational_expression -> additive_expression .)
    LESSEREQ        reduce using rule 32 (relational_expression -> additive_expression .)
    GREATEREQ       reduce using rule 32 (relational_expression -> additive_expression .)
    EQ              reduce using rule 32 (relational_expression -> additive_expression .)
    NOTEQ           reduce using rule 32 (relational_expression -> additive_expression .)
    :               reduce using rule 32 (relational_expression -> additive_expression .)
    ,               reduce using rule 32 (relational_expression -> additive_expression .)
    ;               reduce using rule 32 (relational_expression -> additive_expression .)
    )               reduce using rule 32 (relational_expression -> additive_expression .)
    ]               reduce using rule 32 (relational_expression -> additive_expression .)
    {               reduce using rule 32 (relational_expression -> additive_expression .)
    +               shift and go to state 59
    -               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTMINUS        shift and go to state 62


state 25

    (42) special_expression -> ONES . ( additive_expression )

    (               shift and go to state 63


state 26

    (43) special_expression -> EYE . ( additive_expression )

    (               shift and go to state 64


state 27

    (44) special_expression -> PRINT . print_index_expression_list
    (45) special_expression -> PRINT . NORMSTRING
    (16) print_index_expression_list -> . ID
    (17) print_index_expression_list -> . print_index_expression_list , ID

    NORMSTRING      shift and go to state 66
    ID              shift and go to state 67

    print_index_expression_list    shift and go to state 65

state 28

    (46) special_expression -> RETURN . postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    postfix_expression             shift and go to state 68
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 29

    (47) special_expression -> CONTINUE .

    :               reduce using rule 47 (special_expression -> CONTINUE .)
    ,               reduce using rule 47 (special_expression -> CONTINUE .)
    ;               reduce using rule 47 (special_expression -> CONTINUE .)
    )               reduce using rule 47 (special_expression -> CONTINUE .)
    ]               reduce using rule 47 (special_expression -> CONTINUE .)
    {               reduce using rule 47 (special_expression -> CONTINUE .)


state 30

    (48) special_expression -> BREAK .

    :               reduce using rule 48 (special_expression -> BREAK .)
    ,               reduce using rule 48 (special_expression -> BREAK .)
    ;               reduce using rule 48 (special_expression -> BREAK .)
    )               reduce using rule 48 (special_expression -> BREAK .)
    ]               reduce using rule 48 (special_expression -> BREAK .)
    {               reduce using rule 48 (special_expression -> BREAK .)


state 31

    (3) primary_expression -> INTNUM .

    =               reduce using rule 3 (primary_expression -> INTNUM .)
    ADDASSIGN       reduce using rule 3 (primary_expression -> INTNUM .)
    SUBASSIGN       reduce using rule 3 (primary_expression -> INTNUM .)
    MULASSIGN       reduce using rule 3 (primary_expression -> INTNUM .)
    DIVASSIGN       reduce using rule 3 (primary_expression -> INTNUM .)
    '               reduce using rule 3 (primary_expression -> INTNUM .)
    *               reduce using rule 3 (primary_expression -> INTNUM .)
    /               reduce using rule 3 (primary_expression -> INTNUM .)
    DOTMUL          reduce using rule 3 (primary_expression -> INTNUM .)
    DOTDIV          reduce using rule 3 (primary_expression -> INTNUM .)
    +               reduce using rule 3 (primary_expression -> INTNUM .)
    -               reduce using rule 3 (primary_expression -> INTNUM .)
    DOTADD          reduce using rule 3 (primary_expression -> INTNUM .)
    DOTMINUS        reduce using rule 3 (primary_expression -> INTNUM .)
    <               reduce using rule 3 (primary_expression -> INTNUM .)
    >               reduce using rule 3 (primary_expression -> INTNUM .)
    LESSEREQ        reduce using rule 3 (primary_expression -> INTNUM .)
    GREATEREQ       reduce using rule 3 (primary_expression -> INTNUM .)
    EQ              reduce using rule 3 (primary_expression -> INTNUM .)
    NOTEQ           reduce using rule 3 (primary_expression -> INTNUM .)
    :               reduce using rule 3 (primary_expression -> INTNUM .)
    ,               reduce using rule 3 (primary_expression -> INTNUM .)
    ;               reduce using rule 3 (primary_expression -> INTNUM .)
    )               reduce using rule 3 (primary_expression -> INTNUM .)
    ]               reduce using rule 3 (primary_expression -> INTNUM .)
    {               reduce using rule 3 (primary_expression -> INTNUM .)


state 32

    (4) primary_expression -> FLOATNUM .

    =               reduce using rule 4 (primary_expression -> FLOATNUM .)
    ADDASSIGN       reduce using rule 4 (primary_expression -> FLOATNUM .)
    SUBASSIGN       reduce using rule 4 (primary_expression -> FLOATNUM .)
    MULASSIGN       reduce using rule 4 (primary_expression -> FLOATNUM .)
    DIVASSIGN       reduce using rule 4 (primary_expression -> FLOATNUM .)
    '               reduce using rule 4 (primary_expression -> FLOATNUM .)
    *               reduce using rule 4 (primary_expression -> FLOATNUM .)
    /               reduce using rule 4 (primary_expression -> FLOATNUM .)
    DOTMUL          reduce using rule 4 (primary_expression -> FLOATNUM .)
    DOTDIV          reduce using rule 4 (primary_expression -> FLOATNUM .)
    +               reduce using rule 4 (primary_expression -> FLOATNUM .)
    -               reduce using rule 4 (primary_expression -> FLOATNUM .)
    DOTADD          reduce using rule 4 (primary_expression -> FLOATNUM .)
    DOTMINUS        reduce using rule 4 (primary_expression -> FLOATNUM .)
    <               reduce using rule 4 (primary_expression -> FLOATNUM .)
    >               reduce using rule 4 (primary_expression -> FLOATNUM .)
    LESSEREQ        reduce using rule 4 (primary_expression -> FLOATNUM .)
    GREATEREQ       reduce using rule 4 (primary_expression -> FLOATNUM .)
    EQ              reduce using rule 4 (primary_expression -> FLOATNUM .)
    NOTEQ           reduce using rule 4 (primary_expression -> FLOATNUM .)
    :               reduce using rule 4 (primary_expression -> FLOATNUM .)
    ,               reduce using rule 4 (primary_expression -> FLOATNUM .)
    ;               reduce using rule 4 (primary_expression -> FLOATNUM .)
    )               reduce using rule 4 (primary_expression -> FLOATNUM .)
    ]               reduce using rule 4 (primary_expression -> FLOATNUM .)
    {               reduce using rule 4 (primary_expression -> FLOATNUM .)


state 33

    (6) primary_expression -> [ . ]
    (7) primary_expression -> [ . index_expression_list ]
    (13) index_expression_list -> . index_expression
    (14) index_expression_list -> . index_expression_list , index_expression
    (15) index_expression_list -> . index_expression_list ; index_expression_list
    (11) index_expression -> . :
    (12) index_expression -> . expression
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ]               shift and go to state 69
    :               shift and go to state 72
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    index_expression_list          shift and go to state 70
    index_expression               shift and go to state 71
    expression                     shift and go to state 73
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    postfix_expression             shift and go to state 44
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 34

    (37) equality_expression -> relational_expression .
    (33) relational_expression -> relational_expression . < additive_expression
    (34) relational_expression -> relational_expression . > additive_expression
    (35) relational_expression -> relational_expression . LESSEREQ additive_expression
    (36) relational_expression -> relational_expression . GREATEREQ additive_expression

    EQ              reduce using rule 37 (equality_expression -> relational_expression .)
    NOTEQ           reduce using rule 37 (equality_expression -> relational_expression .)
    :               reduce using rule 37 (equality_expression -> relational_expression .)
    ,               reduce using rule 37 (equality_expression -> relational_expression .)
    ;               reduce using rule 37 (equality_expression -> relational_expression .)
    )               reduce using rule 37 (equality_expression -> relational_expression .)
    ]               reduce using rule 37 (equality_expression -> relational_expression .)
    {               reduce using rule 37 (equality_expression -> relational_expression .)
    <               shift and go to state 74
    >               shift and go to state 75
    LESSEREQ        shift and go to state 76
    GREATEREQ       shift and go to state 77


state 35

    (27) additive_expression -> multiplicative_expression .
    (23) multiplicative_expression -> multiplicative_expression . * unary_expression
    (24) multiplicative_expression -> multiplicative_expression . / unary_expression
    (25) multiplicative_expression -> multiplicative_expression . DOTMUL unary_expression
    (26) multiplicative_expression -> multiplicative_expression . DOTDIV unary_expression

    +               reduce using rule 27 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 27 (additive_expression -> multiplicative_expression .)
    DOTADD          reduce using rule 27 (additive_expression -> multiplicative_expression .)
    DOTMINUS        reduce using rule 27 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 27 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 27 (additive_expression -> multiplicative_expression .)
    LESSEREQ        reduce using rule 27 (additive_expression -> multiplicative_expression .)
    GREATEREQ       reduce using rule 27 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 27 (additive_expression -> multiplicative_expression .)
    NOTEQ           reduce using rule 27 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 27 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 27 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 27 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 27 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 27 (additive_expression -> multiplicative_expression .)
    {               reduce using rule 27 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 78
    /               shift and go to state 79
    DOTMUL          shift and go to state 80
    DOTDIV          shift and go to state 81


state 36

    (21) unary_expression -> - . postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    postfix_expression             shift and go to state 82
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 37

    (22) multiplicative_expression -> unary_expression .

    *               reduce using rule 22 (multiplicative_expression -> unary_expression .)
    /               reduce using rule 22 (multiplicative_expression -> unary_expression .)
    DOTMUL          reduce using rule 22 (multiplicative_expression -> unary_expression .)
    DOTDIV          reduce using rule 22 (multiplicative_expression -> unary_expression .)
    +               reduce using rule 22 (multiplicative_expression -> unary_expression .)
    -               reduce using rule 22 (multiplicative_expression -> unary_expression .)
    DOTADD          reduce using rule 22 (multiplicative_expression -> unary_expression .)
    DOTMINUS        reduce using rule 22 (multiplicative_expression -> unary_expression .)
    <               reduce using rule 22 (multiplicative_expression -> unary_expression .)
    >               reduce using rule 22 (multiplicative_expression -> unary_expression .)
    LESSEREQ        reduce using rule 22 (multiplicative_expression -> unary_expression .)
    GREATEREQ       reduce using rule 22 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 22 (multiplicative_expression -> unary_expression .)
    NOTEQ           reduce using rule 22 (multiplicative_expression -> unary_expression .)
    :               reduce using rule 22 (multiplicative_expression -> unary_expression .)
    ,               reduce using rule 22 (multiplicative_expression -> unary_expression .)
    ;               reduce using rule 22 (multiplicative_expression -> unary_expression .)
    )               reduce using rule 22 (multiplicative_expression -> unary_expression .)
    ]               reduce using rule 22 (multiplicative_expression -> unary_expression .)
    {               reduce using rule 22 (multiplicative_expression -> unary_expression .)


state 38

    (63) statement_list -> statement statement_list .

    $end            reduce using rule 63 (statement_list -> statement statement_list .)
    }               reduce using rule 63 (statement_list -> statement statement_list .)


state 39

    (66) assignment_statement -> assignment_expression eostmt .

    IF              reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    WHILE           reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    FOR             reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    ,               reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    ;               reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    ZEROS           reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    ONES            reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    EYE             reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    PRINT           reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    RETURN          reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    CONTINUE        reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    BREAK           reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    ID              reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    INTNUM          reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    FLOATNUM        reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    (               reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    [               reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    -               reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    $end            reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    }               reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)
    ELSE            reduce using rule 66 (assignment_statement -> assignment_expression eostmt .)


state 40

    (65) expression_statement -> expression eostmt .

    IF              reduce using rule 65 (expression_statement -> expression eostmt .)
    WHILE           reduce using rule 65 (expression_statement -> expression eostmt .)
    FOR             reduce using rule 65 (expression_statement -> expression eostmt .)
    ,               reduce using rule 65 (expression_statement -> expression eostmt .)
    ;               reduce using rule 65 (expression_statement -> expression eostmt .)
    ZEROS           reduce using rule 65 (expression_statement -> expression eostmt .)
    ONES            reduce using rule 65 (expression_statement -> expression eostmt .)
    EYE             reduce using rule 65 (expression_statement -> expression eostmt .)
    PRINT           reduce using rule 65 (expression_statement -> expression eostmt .)
    RETURN          reduce using rule 65 (expression_statement -> expression eostmt .)
    CONTINUE        reduce using rule 65 (expression_statement -> expression eostmt .)
    BREAK           reduce using rule 65 (expression_statement -> expression eostmt .)
    ID              reduce using rule 65 (expression_statement -> expression eostmt .)
    INTNUM          reduce using rule 65 (expression_statement -> expression eostmt .)
    FLOATNUM        reduce using rule 65 (expression_statement -> expression eostmt .)
    (               reduce using rule 65 (expression_statement -> expression eostmt .)
    [               reduce using rule 65 (expression_statement -> expression eostmt .)
    -               reduce using rule 65 (expression_statement -> expression eostmt .)
    $end            reduce using rule 65 (expression_statement -> expression eostmt .)
    }               reduce using rule 65 (expression_statement -> expression eostmt .)
    ELSE            reduce using rule 65 (expression_statement -> expression eostmt .)


state 41

    (50) expression -> expression : . special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    special_expression             shift and go to state 83
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    postfix_expression             shift and go to state 44
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 42

    (67) selection_statement -> IF ( . expression ) statement
    (68) selection_statement -> IF ( . expression ) statement ELSE statement
    (69) selection_statement -> IF ( . expression ) { statement_list }
    (70) selection_statement -> IF ( . expression ) { statement_list } ELSE { statement_list }
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    expression                     shift and go to state 84
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    postfix_expression             shift and go to state 44
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 43

    (5) primary_expression -> ( expression . )
    (50) expression -> expression . : special_expression

    )               shift and go to state 85
    :               shift and go to state 41


state 44

    (20) unary_expression -> postfix_expression .
    (10) postfix_expression -> postfix_expression . '

    *               reduce using rule 20 (unary_expression -> postfix_expression .)
    /               reduce using rule 20 (unary_expression -> postfix_expression .)
    DOTMUL          reduce using rule 20 (unary_expression -> postfix_expression .)
    DOTDIV          reduce using rule 20 (unary_expression -> postfix_expression .)
    +               reduce using rule 20 (unary_expression -> postfix_expression .)
    -               reduce using rule 20 (unary_expression -> postfix_expression .)
    DOTADD          reduce using rule 20 (unary_expression -> postfix_expression .)
    DOTMINUS        reduce using rule 20 (unary_expression -> postfix_expression .)
    <               reduce using rule 20 (unary_expression -> postfix_expression .)
    >               reduce using rule 20 (unary_expression -> postfix_expression .)
    LESSEREQ        reduce using rule 20 (unary_expression -> postfix_expression .)
    GREATEREQ       reduce using rule 20 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 20 (unary_expression -> postfix_expression .)
    NOTEQ           reduce using rule 20 (unary_expression -> postfix_expression .)
    )               reduce using rule 20 (unary_expression -> postfix_expression .)
    :               reduce using rule 20 (unary_expression -> postfix_expression .)
    ]               reduce using rule 20 (unary_expression -> postfix_expression .)
    ,               reduce using rule 20 (unary_expression -> postfix_expression .)
    ;               reduce using rule 20 (unary_expression -> postfix_expression .)
    {               reduce using rule 20 (unary_expression -> postfix_expression .)
    '               shift and go to state 55


state 45

    (71) iteration_statement -> WHILE ( . expression ) { statement_list }
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    expression                     shift and go to state 86
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    postfix_expression             shift and go to state 44
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 46

    (72) iteration_statement -> FOR ID . = expression { statement_list }

    =               shift and go to state 87


state 47

    (73) iteration_statement -> FOR ( . ID = expression ) { statement_list }

    ID              shift and go to state 88


state 48

    (18) array_expression -> ID ( . index_expression_list )
    (13) index_expression_list -> . index_expression
    (14) index_expression_list -> . index_expression_list , index_expression
    (15) index_expression_list -> . index_expression_list ; index_expression_list
    (11) index_expression -> . :
    (12) index_expression -> . expression
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    :               shift and go to state 72
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    index_expression_list          shift and go to state 89
    index_expression               shift and go to state 71
    expression                     shift and go to state 73
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    postfix_expression             shift and go to state 44
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 49

    (19) array_expression -> ID [ . index_expression_list ]
    (13) index_expression_list -> . index_expression
    (14) index_expression_list -> . index_expression_list , index_expression
    (15) index_expression_list -> . index_expression_list ; index_expression_list
    (11) index_expression -> . :
    (12) index_expression -> . expression
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    :               shift and go to state 72
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    index_expression_list          shift and go to state 90
    index_expression               shift and go to state 71
    expression                     shift and go to state 73
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    postfix_expression             shift and go to state 44
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 50

    (51) assignment_expression -> postfix_expression = . expression
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    postfix_expression             shift and go to state 44
    expression                     shift and go to state 91
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 51

    (52) assignment_expression -> postfix_expression ADDASSIGN . expression
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    postfix_expression             shift and go to state 44
    expression                     shift and go to state 92
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 52

    (53) assignment_expression -> postfix_expression SUBASSIGN . expression
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    postfix_expression             shift and go to state 44
    expression                     shift and go to state 93
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 53

    (54) assignment_expression -> postfix_expression MULASSIGN . expression
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    postfix_expression             shift and go to state 44
    expression                     shift and go to state 94
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 54

    (55) assignment_expression -> postfix_expression DIVASSIGN . expression
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    postfix_expression             shift and go to state 44
    expression                     shift and go to state 95
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 55

    (10) postfix_expression -> postfix_expression ' .

    =               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    ADDASSIGN       reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    SUBASSIGN       reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    MULASSIGN       reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    DIVASSIGN       reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    '               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    *               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    /               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    DOTMUL          reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    DOTDIV          reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    +               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    -               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    DOTADD          reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    DOTMINUS        reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    <               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    >               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    LESSEREQ        reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    GREATEREQ       reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    EQ              reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    NOTEQ           reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    :               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    ,               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    ;               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    )               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    ]               reduce using rule 10 (postfix_expression -> postfix_expression ' .)
    {               reduce using rule 10 (postfix_expression -> postfix_expression ' .)


state 56

    (38) equality_expression -> equality_expression EQ . relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    relational_expression          shift and go to state 96
    additive_expression            shift and go to state 24
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 57

    (39) equality_expression -> equality_expression NOTEQ . relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    relational_expression          shift and go to state 97
    additive_expression            shift and go to state 24
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 58

    (41) special_expression -> ZEROS ( . additive_expression )
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    additive_expression            shift and go to state 98
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 59

    (28) additive_expression -> additive_expression + . multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    multiplicative_expression      shift and go to state 99
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 60

    (29) additive_expression -> additive_expression - . multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    multiplicative_expression      shift and go to state 100
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 61

    (30) additive_expression -> additive_expression DOTADD . multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    multiplicative_expression      shift and go to state 101
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 62

    (31) additive_expression -> additive_expression DOTMINUS . multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    multiplicative_expression      shift and go to state 102
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 63

    (42) special_expression -> ONES ( . additive_expression )
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    additive_expression            shift and go to state 103
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 64

    (43) special_expression -> EYE ( . additive_expression )
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 65

    (44) special_expression -> PRINT print_index_expression_list .
    (17) print_index_expression_list -> print_index_expression_list . , ID

  ! shift/reduce conflict for , resolved as shift
    :               reduce using rule 44 (special_expression -> PRINT print_index_expression_list .)
    ;               reduce using rule 44 (special_expression -> PRINT print_index_expression_list .)
    )               reduce using rule 44 (special_expression -> PRINT print_index_expression_list .)
    ]               reduce using rule 44 (special_expression -> PRINT print_index_expression_list .)
    {               reduce using rule 44 (special_expression -> PRINT print_index_expression_list .)
    ,               shift and go to state 105

  ! ,               [ reduce using rule 44 (special_expression -> PRINT print_index_expression_list .) ]


state 66

    (45) special_expression -> PRINT NORMSTRING .

    :               reduce using rule 45 (special_expression -> PRINT NORMSTRING .)
    ,               reduce using rule 45 (special_expression -> PRINT NORMSTRING .)
    ;               reduce using rule 45 (special_expression -> PRINT NORMSTRING .)
    )               reduce using rule 45 (special_expression -> PRINT NORMSTRING .)
    ]               reduce using rule 45 (special_expression -> PRINT NORMSTRING .)
    {               reduce using rule 45 (special_expression -> PRINT NORMSTRING .)


state 67

    (16) print_index_expression_list -> ID .

    ,               reduce using rule 16 (print_index_expression_list -> ID .)
    :               reduce using rule 16 (print_index_expression_list -> ID .)
    ;               reduce using rule 16 (print_index_expression_list -> ID .)
    )               reduce using rule 16 (print_index_expression_list -> ID .)
    ]               reduce using rule 16 (print_index_expression_list -> ID .)
    {               reduce using rule 16 (print_index_expression_list -> ID .)


state 68

    (46) special_expression -> RETURN postfix_expression .
    (10) postfix_expression -> postfix_expression . '

    :               reduce using rule 46 (special_expression -> RETURN postfix_expression .)
    ,               reduce using rule 46 (special_expression -> RETURN postfix_expression .)
    ;               reduce using rule 46 (special_expression -> RETURN postfix_expression .)
    )               reduce using rule 46 (special_expression -> RETURN postfix_expression .)
    ]               reduce using rule 46 (special_expression -> RETURN postfix_expression .)
    {               reduce using rule 46 (special_expression -> RETURN postfix_expression .)
    '               shift and go to state 55


state 69

    (6) primary_expression -> [ ] .

    =               reduce using rule 6 (primary_expression -> [ ] .)
    ADDASSIGN       reduce using rule 6 (primary_expression -> [ ] .)
    SUBASSIGN       reduce using rule 6 (primary_expression -> [ ] .)
    MULASSIGN       reduce using rule 6 (primary_expression -> [ ] .)
    DIVASSIGN       reduce using rule 6 (primary_expression -> [ ] .)
    '               reduce using rule 6 (primary_expression -> [ ] .)
    *               reduce using rule 6 (primary_expression -> [ ] .)
    /               reduce using rule 6 (primary_expression -> [ ] .)
    DOTMUL          reduce using rule 6 (primary_expression -> [ ] .)
    DOTDIV          reduce using rule 6 (primary_expression -> [ ] .)
    +               reduce using rule 6 (primary_expression -> [ ] .)
    -               reduce using rule 6 (primary_expression -> [ ] .)
    DOTADD          reduce using rule 6 (primary_expression -> [ ] .)
    DOTMINUS        reduce using rule 6 (primary_expression -> [ ] .)
    <               reduce using rule 6 (primary_expression -> [ ] .)
    >               reduce using rule 6 (primary_expression -> [ ] .)
    LESSEREQ        reduce using rule 6 (primary_expression -> [ ] .)
    GREATEREQ       reduce using rule 6 (primary_expression -> [ ] .)
    EQ              reduce using rule 6 (primary_expression -> [ ] .)
    NOTEQ           reduce using rule 6 (primary_expression -> [ ] .)
    :               reduce using rule 6 (primary_expression -> [ ] .)
    ,               reduce using rule 6 (primary_expression -> [ ] .)
    ;               reduce using rule 6 (primary_expression -> [ ] .)
    )               reduce using rule 6 (primary_expression -> [ ] .)
    ]               reduce using rule 6 (primary_expression -> [ ] .)
    {               reduce using rule 6 (primary_expression -> [ ] .)


state 70

    (7) primary_expression -> [ index_expression_list . ]
    (14) index_expression_list -> index_expression_list . , index_expression
    (15) index_expression_list -> index_expression_list . ; index_expression_list

    ]               shift and go to state 106
    ,               shift and go to state 107
    ;               shift and go to state 108


state 71

    (13) index_expression_list -> index_expression .

    ]               reduce using rule 13 (index_expression_list -> index_expression .)
    ,               reduce using rule 13 (index_expression_list -> index_expression .)
    ;               reduce using rule 13 (index_expression_list -> index_expression .)
    )               reduce using rule 13 (index_expression_list -> index_expression .)


state 72

    (11) index_expression -> : .

    ]               reduce using rule 11 (index_expression -> : .)
    ,               reduce using rule 11 (index_expression -> : .)
    ;               reduce using rule 11 (index_expression -> : .)
    )               reduce using rule 11 (index_expression -> : .)


state 73

    (12) index_expression -> expression .
    (50) expression -> expression . : special_expression

    ]               reduce using rule 12 (index_expression -> expression .)
    ,               reduce using rule 12 (index_expression -> expression .)
    ;               reduce using rule 12 (index_expression -> expression .)
    )               reduce using rule 12 (index_expression -> expression .)
    :               shift and go to state 41


state 74

    (33) relational_expression -> relational_expression < . additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    additive_expression            shift and go to state 109
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 75

    (34) relational_expression -> relational_expression > . additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 76

    (35) relational_expression -> relational_expression LESSEREQ . additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 77

    (36) relational_expression -> relational_expression GREATEREQ . additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 78

    (23) multiplicative_expression -> multiplicative_expression * . unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    unary_expression               shift and go to state 113
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 79

    (24) multiplicative_expression -> multiplicative_expression / . unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 80

    (25) multiplicative_expression -> multiplicative_expression DOTMUL . unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    unary_expression               shift and go to state 115
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 81

    (26) multiplicative_expression -> multiplicative_expression DOTDIV . unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    unary_expression               shift and go to state 116
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 82

    (21) unary_expression -> - postfix_expression .
    (10) postfix_expression -> postfix_expression . '

    *               reduce using rule 21 (unary_expression -> - postfix_expression .)
    /               reduce using rule 21 (unary_expression -> - postfix_expression .)
    DOTMUL          reduce using rule 21 (unary_expression -> - postfix_expression .)
    DOTDIV          reduce using rule 21 (unary_expression -> - postfix_expression .)
    +               reduce using rule 21 (unary_expression -> - postfix_expression .)
    -               reduce using rule 21 (unary_expression -> - postfix_expression .)
    DOTADD          reduce using rule 21 (unary_expression -> - postfix_expression .)
    DOTMINUS        reduce using rule 21 (unary_expression -> - postfix_expression .)
    <               reduce using rule 21 (unary_expression -> - postfix_expression .)
    >               reduce using rule 21 (unary_expression -> - postfix_expression .)
    LESSEREQ        reduce using rule 21 (unary_expression -> - postfix_expression .)
    GREATEREQ       reduce using rule 21 (unary_expression -> - postfix_expression .)
    EQ              reduce using rule 21 (unary_expression -> - postfix_expression .)
    NOTEQ           reduce using rule 21 (unary_expression -> - postfix_expression .)
    :               reduce using rule 21 (unary_expression -> - postfix_expression .)
    ,               reduce using rule 21 (unary_expression -> - postfix_expression .)
    ;               reduce using rule 21 (unary_expression -> - postfix_expression .)
    )               reduce using rule 21 (unary_expression -> - postfix_expression .)
    ]               reduce using rule 21 (unary_expression -> - postfix_expression .)
    {               reduce using rule 21 (unary_expression -> - postfix_expression .)
    '               shift and go to state 55


state 83

    (50) expression -> expression : special_expression .

    :               reduce using rule 50 (expression -> expression : special_expression .)
    ,               reduce using rule 50 (expression -> expression : special_expression .)
    ;               reduce using rule 50 (expression -> expression : special_expression .)
    )               reduce using rule 50 (expression -> expression : special_expression .)
    ]               reduce using rule 50 (expression -> expression : special_expression .)
    {               reduce using rule 50 (expression -> expression : special_expression .)


state 84

    (67) selection_statement -> IF ( expression . ) statement
    (68) selection_statement -> IF ( expression . ) statement ELSE statement
    (69) selection_statement -> IF ( expression . ) { statement_list }
    (70) selection_statement -> IF ( expression . ) { statement_list } ELSE { statement_list }
    (50) expression -> expression . : special_expression

    )               shift and go to state 117
    :               shift and go to state 41


state 85

    (5) primary_expression -> ( expression ) .

    =               reduce using rule 5 (primary_expression -> ( expression ) .)
    ADDASSIGN       reduce using rule 5 (primary_expression -> ( expression ) .)
    SUBASSIGN       reduce using rule 5 (primary_expression -> ( expression ) .)
    MULASSIGN       reduce using rule 5 (primary_expression -> ( expression ) .)
    DIVASSIGN       reduce using rule 5 (primary_expression -> ( expression ) .)
    '               reduce using rule 5 (primary_expression -> ( expression ) .)
    *               reduce using rule 5 (primary_expression -> ( expression ) .)
    /               reduce using rule 5 (primary_expression -> ( expression ) .)
    DOTMUL          reduce using rule 5 (primary_expression -> ( expression ) .)
    DOTDIV          reduce using rule 5 (primary_expression -> ( expression ) .)
    +               reduce using rule 5 (primary_expression -> ( expression ) .)
    -               reduce using rule 5 (primary_expression -> ( expression ) .)
    DOTADD          reduce using rule 5 (primary_expression -> ( expression ) .)
    DOTMINUS        reduce using rule 5 (primary_expression -> ( expression ) .)
    <               reduce using rule 5 (primary_expression -> ( expression ) .)
    >               reduce using rule 5 (primary_expression -> ( expression ) .)
    LESSEREQ        reduce using rule 5 (primary_expression -> ( expression ) .)
    GREATEREQ       reduce using rule 5 (primary_expression -> ( expression ) .)
    EQ              reduce using rule 5 (primary_expression -> ( expression ) .)
    NOTEQ           reduce using rule 5 (primary_expression -> ( expression ) .)
    :               reduce using rule 5 (primary_expression -> ( expression ) .)
    ,               reduce using rule 5 (primary_expression -> ( expression ) .)
    ;               reduce using rule 5 (primary_expression -> ( expression ) .)
    )               reduce using rule 5 (primary_expression -> ( expression ) .)
    ]               reduce using rule 5 (primary_expression -> ( expression ) .)
    {               reduce using rule 5 (primary_expression -> ( expression ) .)


state 86

    (71) iteration_statement -> WHILE ( expression . ) { statement_list }
    (50) expression -> expression . : special_expression

    )               shift and go to state 118
    :               shift and go to state 41


state 87

    (72) iteration_statement -> FOR ID = . expression { statement_list }
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    expression                     shift and go to state 119
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    postfix_expression             shift and go to state 44
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 88

    (73) iteration_statement -> FOR ( ID . = expression ) { statement_list }

    =               shift and go to state 120


state 89

    (18) array_expression -> ID ( index_expression_list . )
    (14) index_expression_list -> index_expression_list . , index_expression
    (15) index_expression_list -> index_expression_list . ; index_expression_list

    )               shift and go to state 121
    ,               shift and go to state 107
    ;               shift and go to state 108


state 90

    (19) array_expression -> ID [ index_expression_list . ]
    (14) index_expression_list -> index_expression_list . , index_expression
    (15) index_expression_list -> index_expression_list . ; index_expression_list

    ]               shift and go to state 122
    ,               shift and go to state 107
    ;               shift and go to state 108


state 91

    (51) assignment_expression -> postfix_expression = expression .
    (50) expression -> expression . : special_expression

    ,               reduce using rule 51 (assignment_expression -> postfix_expression = expression .)
    ;               reduce using rule 51 (assignment_expression -> postfix_expression = expression .)
    :               shift and go to state 41


state 92

    (52) assignment_expression -> postfix_expression ADDASSIGN expression .
    (50) expression -> expression . : special_expression

    ,               reduce using rule 52 (assignment_expression -> postfix_expression ADDASSIGN expression .)
    ;               reduce using rule 52 (assignment_expression -> postfix_expression ADDASSIGN expression .)
    :               shift and go to state 41


state 93

    (53) assignment_expression -> postfix_expression SUBASSIGN expression .
    (50) expression -> expression . : special_expression

    ,               reduce using rule 53 (assignment_expression -> postfix_expression SUBASSIGN expression .)
    ;               reduce using rule 53 (assignment_expression -> postfix_expression SUBASSIGN expression .)
    :               shift and go to state 41


state 94

    (54) assignment_expression -> postfix_expression MULASSIGN expression .
    (50) expression -> expression . : special_expression

    ,               reduce using rule 54 (assignment_expression -> postfix_expression MULASSIGN expression .)
    ;               reduce using rule 54 (assignment_expression -> postfix_expression MULASSIGN expression .)
    :               shift and go to state 41


state 95

    (55) assignment_expression -> postfix_expression DIVASSIGN expression .
    (50) expression -> expression . : special_expression

    ,               reduce using rule 55 (assignment_expression -> postfix_expression DIVASSIGN expression .)
    ;               reduce using rule 55 (assignment_expression -> postfix_expression DIVASSIGN expression .)
    :               shift and go to state 41


state 96

    (38) equality_expression -> equality_expression EQ relational_expression .
    (33) relational_expression -> relational_expression . < additive_expression
    (34) relational_expression -> relational_expression . > additive_expression
    (35) relational_expression -> relational_expression . LESSEREQ additive_expression
    (36) relational_expression -> relational_expression . GREATEREQ additive_expression

    EQ              reduce using rule 38 (equality_expression -> equality_expression EQ relational_expression .)
    NOTEQ           reduce using rule 38 (equality_expression -> equality_expression EQ relational_expression .)
    :               reduce using rule 38 (equality_expression -> equality_expression EQ relational_expression .)
    ,               reduce using rule 38 (equality_expression -> equality_expression EQ relational_expression .)
    ;               reduce using rule 38 (equality_expression -> equality_expression EQ relational_expression .)
    )               reduce using rule 38 (equality_expression -> equality_expression EQ relational_expression .)
    ]               reduce using rule 38 (equality_expression -> equality_expression EQ relational_expression .)
    {               reduce using rule 38 (equality_expression -> equality_expression EQ relational_expression .)
    <               shift and go to state 74
    >               shift and go to state 75
    LESSEREQ        shift and go to state 76
    GREATEREQ       shift and go to state 77


state 97

    (39) equality_expression -> equality_expression NOTEQ relational_expression .
    (33) relational_expression -> relational_expression . < additive_expression
    (34) relational_expression -> relational_expression . > additive_expression
    (35) relational_expression -> relational_expression . LESSEREQ additive_expression
    (36) relational_expression -> relational_expression . GREATEREQ additive_expression

    EQ              reduce using rule 39 (equality_expression -> equality_expression NOTEQ relational_expression .)
    NOTEQ           reduce using rule 39 (equality_expression -> equality_expression NOTEQ relational_expression .)
    :               reduce using rule 39 (equality_expression -> equality_expression NOTEQ relational_expression .)
    ,               reduce using rule 39 (equality_expression -> equality_expression NOTEQ relational_expression .)
    ;               reduce using rule 39 (equality_expression -> equality_expression NOTEQ relational_expression .)
    )               reduce using rule 39 (equality_expression -> equality_expression NOTEQ relational_expression .)
    ]               reduce using rule 39 (equality_expression -> equality_expression NOTEQ relational_expression .)
    {               reduce using rule 39 (equality_expression -> equality_expression NOTEQ relational_expression .)
    <               shift and go to state 74
    >               shift and go to state 75
    LESSEREQ        shift and go to state 76
    GREATEREQ       shift and go to state 77


state 98

    (41) special_expression -> ZEROS ( additive_expression . )
    (28) additive_expression -> additive_expression . + multiplicative_expression
    (29) additive_expression -> additive_expression . - multiplicative_expression
    (30) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (31) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    )               shift and go to state 123
    +               shift and go to state 59
    -               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTMINUS        shift and go to state 62


state 99

    (28) additive_expression -> additive_expression + multiplicative_expression .
    (23) multiplicative_expression -> multiplicative_expression . * unary_expression
    (24) multiplicative_expression -> multiplicative_expression . / unary_expression
    (25) multiplicative_expression -> multiplicative_expression . DOTMUL unary_expression
    (26) multiplicative_expression -> multiplicative_expression . DOTDIV unary_expression

    +               reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    DOTADD          reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    DOTMINUS        reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    LESSEREQ        reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    GREATEREQ       reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ              reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    NOTEQ           reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    {               reduce using rule 28 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 78
    /               shift and go to state 79
    DOTMUL          shift and go to state 80
    DOTDIV          shift and go to state 81


state 100

    (29) additive_expression -> additive_expression - multiplicative_expression .
    (23) multiplicative_expression -> multiplicative_expression . * unary_expression
    (24) multiplicative_expression -> multiplicative_expression . / unary_expression
    (25) multiplicative_expression -> multiplicative_expression . DOTMUL unary_expression
    (26) multiplicative_expression -> multiplicative_expression . DOTDIV unary_expression

    +               reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    DOTADD          reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    DOTMINUS        reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    LESSEREQ        reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    GREATEREQ       reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ              reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    NOTEQ           reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    {               reduce using rule 29 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 78
    /               shift and go to state 79
    DOTMUL          shift and go to state 80
    DOTDIV          shift and go to state 81


state 101

    (30) additive_expression -> additive_expression DOTADD multiplicative_expression .
    (23) multiplicative_expression -> multiplicative_expression . * unary_expression
    (24) multiplicative_expression -> multiplicative_expression . / unary_expression
    (25) multiplicative_expression -> multiplicative_expression . DOTMUL unary_expression
    (26) multiplicative_expression -> multiplicative_expression . DOTDIV unary_expression

    +               reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    -               reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    DOTADD          reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    DOTMINUS        reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    <               reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    >               reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    LESSEREQ        reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    GREATEREQ       reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    EQ              reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    NOTEQ           reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    :               reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    ,               reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    ;               reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    )               reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    ]               reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    {               reduce using rule 30 (additive_expression -> additive_expression DOTADD multiplicative_expression .)
    *               shift and go to state 78
    /               shift and go to state 79
    DOTMUL          shift and go to state 80
    DOTDIV          shift and go to state 81


state 102

    (31) additive_expression -> additive_expression DOTMINUS multiplicative_expression .
    (23) multiplicative_expression -> multiplicative_expression . * unary_expression
    (24) multiplicative_expression -> multiplicative_expression . / unary_expression
    (25) multiplicative_expression -> multiplicative_expression . DOTMUL unary_expression
    (26) multiplicative_expression -> multiplicative_expression . DOTDIV unary_expression

    +               reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    -               reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    DOTADD          reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    DOTMINUS        reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    <               reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    >               reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    LESSEREQ        reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    GREATEREQ       reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    EQ              reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    NOTEQ           reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    :               reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    ,               reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    ;               reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    )               reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    ]               reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    {               reduce using rule 31 (additive_expression -> additive_expression DOTMINUS multiplicative_expression .)
    *               shift and go to state 78
    /               shift and go to state 79
    DOTMUL          shift and go to state 80
    DOTDIV          shift and go to state 81


state 103

    (42) special_expression -> ONES ( additive_expression . )
    (28) additive_expression -> additive_expression . + multiplicative_expression
    (29) additive_expression -> additive_expression . - multiplicative_expression
    (30) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (31) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    )               shift and go to state 124
    +               shift and go to state 59
    -               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTMINUS        shift and go to state 62


state 104

    (43) special_expression -> EYE ( additive_expression . )
    (28) additive_expression -> additive_expression . + multiplicative_expression
    (29) additive_expression -> additive_expression . - multiplicative_expression
    (30) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (31) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    )               shift and go to state 125
    +               shift and go to state 59
    -               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTMINUS        shift and go to state 62


state 105

    (17) print_index_expression_list -> print_index_expression_list , . ID

    ID              shift and go to state 126


state 106

    (7) primary_expression -> [ index_expression_list ] .

    =               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    ADDASSIGN       reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    SUBASSIGN       reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    MULASSIGN       reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    DIVASSIGN       reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    '               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    *               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    /               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    DOTMUL          reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    DOTDIV          reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    +               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    -               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    DOTADD          reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    DOTMINUS        reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    <               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    >               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    LESSEREQ        reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    GREATEREQ       reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    EQ              reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    NOTEQ           reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    :               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    ,               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    ;               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    )               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    ]               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)
    {               reduce using rule 7 (primary_expression -> [ index_expression_list ] .)


state 107

    (14) index_expression_list -> index_expression_list , . index_expression
    (11) index_expression -> . :
    (12) index_expression -> . expression
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    :               shift and go to state 72
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    index_expression               shift and go to state 127
    expression                     shift and go to state 73
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    postfix_expression             shift and go to state 44
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 108

    (15) index_expression_list -> index_expression_list ; . index_expression_list
    (13) index_expression_list -> . index_expression
    (14) index_expression_list -> . index_expression_list , index_expression
    (15) index_expression_list -> . index_expression_list ; index_expression_list
    (11) index_expression -> . :
    (12) index_expression -> . expression
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    :               shift and go to state 72
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    index_expression_list          shift and go to state 128
    index_expression               shift and go to state 71
    expression                     shift and go to state 73
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    postfix_expression             shift and go to state 44
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 109

    (33) relational_expression -> relational_expression < additive_expression .
    (28) additive_expression -> additive_expression . + multiplicative_expression
    (29) additive_expression -> additive_expression . - multiplicative_expression
    (30) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (31) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    <               reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    >               reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    LESSEREQ        reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    GREATEREQ       reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    EQ              reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    NOTEQ           reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    :               reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    ,               reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    ;               reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    )               reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    ]               reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    {               reduce using rule 33 (relational_expression -> relational_expression < additive_expression .)
    +               shift and go to state 59
    -               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTMINUS        shift and go to state 62


state 110

    (34) relational_expression -> relational_expression > additive_expression .
    (28) additive_expression -> additive_expression . + multiplicative_expression
    (29) additive_expression -> additive_expression . - multiplicative_expression
    (30) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (31) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    <               reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    >               reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    LESSEREQ        reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    GREATEREQ       reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    EQ              reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    NOTEQ           reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    :               reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    ,               reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    ;               reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    )               reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    ]               reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    {               reduce using rule 34 (relational_expression -> relational_expression > additive_expression .)
    +               shift and go to state 59
    -               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTMINUS        shift and go to state 62


state 111

    (35) relational_expression -> relational_expression LESSEREQ additive_expression .
    (28) additive_expression -> additive_expression . + multiplicative_expression
    (29) additive_expression -> additive_expression . - multiplicative_expression
    (30) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (31) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    <               reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    >               reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    LESSEREQ        reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    GREATEREQ       reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    EQ              reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    NOTEQ           reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    :               reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    ,               reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    ;               reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    )               reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    ]               reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    {               reduce using rule 35 (relational_expression -> relational_expression LESSEREQ additive_expression .)
    +               shift and go to state 59
    -               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTMINUS        shift and go to state 62


state 112

    (36) relational_expression -> relational_expression GREATEREQ additive_expression .
    (28) additive_expression -> additive_expression . + multiplicative_expression
    (29) additive_expression -> additive_expression . - multiplicative_expression
    (30) additive_expression -> additive_expression . DOTADD multiplicative_expression
    (31) additive_expression -> additive_expression . DOTMINUS multiplicative_expression

    <               reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    >               reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    LESSEREQ        reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    GREATEREQ       reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    EQ              reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    NOTEQ           reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    :               reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    ,               reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    ;               reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    )               reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    ]               reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    {               reduce using rule 36 (relational_expression -> relational_expression GREATEREQ additive_expression .)
    +               shift and go to state 59
    -               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTMINUS        shift and go to state 62


state 113

    (23) multiplicative_expression -> multiplicative_expression * unary_expression .

    *               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    /               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    DOTMUL          reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    DOTDIV          reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    +               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    -               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    DOTADD          reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    DOTMINUS        reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    <               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    >               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LESSEREQ        reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    GREATEREQ       reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    EQ              reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    NOTEQ           reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    :               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ,               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ;               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    )               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ]               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    {               reduce using rule 23 (multiplicative_expression -> multiplicative_expression * unary_expression .)


state 114

    (24) multiplicative_expression -> multiplicative_expression / unary_expression .

    *               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    /               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    DOTMUL          reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    DOTDIV          reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    +               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    -               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    DOTADD          reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    DOTMINUS        reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    <               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    >               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    LESSEREQ        reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    GREATEREQ       reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    EQ              reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    NOTEQ           reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    :               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ,               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ;               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    )               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ]               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    {               reduce using rule 24 (multiplicative_expression -> multiplicative_expression / unary_expression .)


state 115

    (25) multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .

    *               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    /               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    DOTMUL          reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    DOTDIV          reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    +               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    -               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    DOTADD          reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    DOTMINUS        reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    <               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    >               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    LESSEREQ        reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    GREATEREQ       reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    EQ              reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    NOTEQ           reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    :               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    ,               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    ;               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    )               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    ]               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)
    {               reduce using rule 25 (multiplicative_expression -> multiplicative_expression DOTMUL unary_expression .)


state 116

    (26) multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .

    *               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    /               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    DOTMUL          reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    DOTDIV          reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    +               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    -               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    DOTADD          reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    DOTMINUS        reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    <               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    >               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    LESSEREQ        reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    GREATEREQ       reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    EQ              reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    NOTEQ           reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    :               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    ,               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    ;               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    )               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    ]               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)
    {               reduce using rule 26 (multiplicative_expression -> multiplicative_expression DOTDIV unary_expression .)


state 117

    (67) selection_statement -> IF ( expression ) . statement
    (68) selection_statement -> IF ( expression ) . statement ELSE statement
    (69) selection_statement -> IF ( expression ) . { statement_list }
    (70) selection_statement -> IF ( expression ) . { statement_list } ELSE { statement_list }
    (58) statement -> . assignment_statement
    (59) statement -> . expression_statement
    (60) statement -> . selection_statement
    (61) statement -> . iteration_statement
    (66) assignment_statement -> . assignment_expression eostmt
    (64) expression_statement -> . eostmt
    (65) expression_statement -> . expression eostmt
    (67) selection_statement -> . IF ( expression ) statement
    (68) selection_statement -> . IF ( expression ) statement ELSE statement
    (69) selection_statement -> . IF ( expression ) { statement_list }
    (70) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (71) iteration_statement -> . WHILE ( expression ) { statement_list }
    (72) iteration_statement -> . FOR ID = expression { statement_list }
    (73) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (51) assignment_expression -> . postfix_expression = expression
    (52) assignment_expression -> . postfix_expression ADDASSIGN expression
    (53) assignment_expression -> . postfix_expression SUBASSIGN expression
    (54) assignment_expression -> . postfix_expression MULASSIGN expression
    (55) assignment_expression -> . postfix_expression DIVASSIGN expression
    (56) eostmt -> . ,
    (57) eostmt -> . ;
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression

    {               shift and go to state 130
    IF              shift and go to state 11
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    ,               shift and go to state 17
    ;               shift and go to state 18
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33
    -               shift and go to state 36

    expression                     shift and go to state 10
    statement                      shift and go to state 129
    assignment_statement           shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    assignment_expression          shift and go to state 8
    eostmt                         shift and go to state 9
    postfix_expression             shift and go to state 16
    special_expression             shift and go to state 19
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37

state 118

    (71) iteration_statement -> WHILE ( expression ) . { statement_list }

    {               shift and go to state 131


state 119

    (72) iteration_statement -> FOR ID = expression . { statement_list }
    (50) expression -> expression . : special_expression

    {               shift and go to state 132
    :               shift and go to state 41


state 120

    (73) iteration_statement -> FOR ( ID = . expression ) { statement_list }
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]

    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    -               shift and go to state 36
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33

    expression                     shift and go to state 133
    special_expression             shift and go to state 19
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    postfix_expression             shift and go to state 44
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21

state 121

    (18) array_expression -> ID ( index_expression_list ) .

    =               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    ADDASSIGN       reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    SUBASSIGN       reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    MULASSIGN       reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    DIVASSIGN       reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    '               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    *               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    /               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    DOTMUL          reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    DOTDIV          reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    +               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    -               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    DOTADD          reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    DOTMINUS        reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    <               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    >               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    LESSEREQ        reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    GREATEREQ       reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    EQ              reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    NOTEQ           reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    :               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    ,               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    ;               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    )               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    ]               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)
    {               reduce using rule 18 (array_expression -> ID ( index_expression_list ) .)


state 122

    (19) array_expression -> ID [ index_expression_list ] .

    =               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    ADDASSIGN       reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    SUBASSIGN       reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    MULASSIGN       reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    DIVASSIGN       reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    '               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    *               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    /               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    DOTMUL          reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    DOTDIV          reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    +               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    -               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    DOTADD          reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    DOTMINUS        reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    <               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    >               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    LESSEREQ        reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    GREATEREQ       reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    EQ              reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    NOTEQ           reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    :               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    ,               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    ;               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    )               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    ]               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)
    {               reduce using rule 19 (array_expression -> ID [ index_expression_list ] .)


state 123

    (41) special_expression -> ZEROS ( additive_expression ) .

    :               reduce using rule 41 (special_expression -> ZEROS ( additive_expression ) .)
    ,               reduce using rule 41 (special_expression -> ZEROS ( additive_expression ) .)
    ;               reduce using rule 41 (special_expression -> ZEROS ( additive_expression ) .)
    )               reduce using rule 41 (special_expression -> ZEROS ( additive_expression ) .)
    ]               reduce using rule 41 (special_expression -> ZEROS ( additive_expression ) .)
    {               reduce using rule 41 (special_expression -> ZEROS ( additive_expression ) .)


state 124

    (42) special_expression -> ONES ( additive_expression ) .

    :               reduce using rule 42 (special_expression -> ONES ( additive_expression ) .)
    ,               reduce using rule 42 (special_expression -> ONES ( additive_expression ) .)
    ;               reduce using rule 42 (special_expression -> ONES ( additive_expression ) .)
    )               reduce using rule 42 (special_expression -> ONES ( additive_expression ) .)
    ]               reduce using rule 42 (special_expression -> ONES ( additive_expression ) .)
    {               reduce using rule 42 (special_expression -> ONES ( additive_expression ) .)


state 125

    (43) special_expression -> EYE ( additive_expression ) .

    :               reduce using rule 43 (special_expression -> EYE ( additive_expression ) .)
    ,               reduce using rule 43 (special_expression -> EYE ( additive_expression ) .)
    ;               reduce using rule 43 (special_expression -> EYE ( additive_expression ) .)
    )               reduce using rule 43 (special_expression -> EYE ( additive_expression ) .)
    ]               reduce using rule 43 (special_expression -> EYE ( additive_expression ) .)
    {               reduce using rule 43 (special_expression -> EYE ( additive_expression ) .)


state 126

    (17) print_index_expression_list -> print_index_expression_list , ID .

    ,               reduce using rule 17 (print_index_expression_list -> print_index_expression_list , ID .)
    :               reduce using rule 17 (print_index_expression_list -> print_index_expression_list , ID .)
    ;               reduce using rule 17 (print_index_expression_list -> print_index_expression_list , ID .)
    )               reduce using rule 17 (print_index_expression_list -> print_index_expression_list , ID .)
    ]               reduce using rule 17 (print_index_expression_list -> print_index_expression_list , ID .)
    {               reduce using rule 17 (print_index_expression_list -> print_index_expression_list , ID .)


state 127

    (14) index_expression_list -> index_expression_list , index_expression .

    ]               reduce using rule 14 (index_expression_list -> index_expression_list , index_expression .)
    ,               reduce using rule 14 (index_expression_list -> index_expression_list , index_expression .)
    ;               reduce using rule 14 (index_expression_list -> index_expression_list , index_expression .)
    )               reduce using rule 14 (index_expression_list -> index_expression_list , index_expression .)


state 128

    (15) index_expression_list -> index_expression_list ; index_expression_list .
    (14) index_expression_list -> index_expression_list . , index_expression
    (15) index_expression_list -> index_expression_list . ; index_expression_list

  ! shift/reduce conflict for , resolved as shift
  ! shift/reduce conflict for ; resolved as shift
    ]               reduce using rule 15 (index_expression_list -> index_expression_list ; index_expression_list .)
    )               reduce using rule 15 (index_expression_list -> index_expression_list ; index_expression_list .)
    ,               shift and go to state 107
    ;               shift and go to state 108

  ! ,               [ reduce using rule 15 (index_expression_list -> index_expression_list ; index_expression_list .) ]
  ! ;               [ reduce using rule 15 (index_expression_list -> index_expression_list ; index_expression_list .) ]


state 129

    (67) selection_statement -> IF ( expression ) statement .
    (68) selection_statement -> IF ( expression ) statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    ,               reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    ZEROS           reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    ONES            reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    EYE             reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    PRINT           reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    ID              reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    INTNUM          reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    FLOATNUM        reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    [               reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    $end            reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    }               reduce using rule 67 (selection_statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 134

  ! ELSE            [ reduce using rule 67 (selection_statement -> IF ( expression ) statement .) ]


state 130

    (69) selection_statement -> IF ( expression ) { . statement_list }
    (70) selection_statement -> IF ( expression ) { . statement_list } ELSE { statement_list }
    (62) statement_list -> . statement
    (63) statement_list -> . statement statement_list
    (58) statement -> . assignment_statement
    (59) statement -> . expression_statement
    (60) statement -> . selection_statement
    (61) statement -> . iteration_statement
    (66) assignment_statement -> . assignment_expression eostmt
    (64) expression_statement -> . eostmt
    (65) expression_statement -> . expression eostmt
    (67) selection_statement -> . IF ( expression ) statement
    (68) selection_statement -> . IF ( expression ) statement ELSE statement
    (69) selection_statement -> . IF ( expression ) { statement_list }
    (70) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (71) iteration_statement -> . WHILE ( expression ) { statement_list }
    (72) iteration_statement -> . FOR ID = expression { statement_list }
    (73) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (51) assignment_expression -> . postfix_expression = expression
    (52) assignment_expression -> . postfix_expression ADDASSIGN expression
    (53) assignment_expression -> . postfix_expression SUBASSIGN expression
    (54) assignment_expression -> . postfix_expression MULASSIGN expression
    (55) assignment_expression -> . postfix_expression DIVASSIGN expression
    (56) eostmt -> . ,
    (57) eostmt -> . ;
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression

    IF              shift and go to state 11
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    ,               shift and go to state 17
    ;               shift and go to state 18
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33
    -               shift and go to state 36

    expression                     shift and go to state 10
    statement_list                 shift and go to state 135
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    assignment_expression          shift and go to state 8
    eostmt                         shift and go to state 9
    postfix_expression             shift and go to state 16
    special_expression             shift and go to state 19
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37

state 131

    (71) iteration_statement -> WHILE ( expression ) { . statement_list }
    (62) statement_list -> . statement
    (63) statement_list -> . statement statement_list
    (58) statement -> . assignment_statement
    (59) statement -> . expression_statement
    (60) statement -> . selection_statement
    (61) statement -> . iteration_statement
    (66) assignment_statement -> . assignment_expression eostmt
    (64) expression_statement -> . eostmt
    (65) expression_statement -> . expression eostmt
    (67) selection_statement -> . IF ( expression ) statement
    (68) selection_statement -> . IF ( expression ) statement ELSE statement
    (69) selection_statement -> . IF ( expression ) { statement_list }
    (70) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (71) iteration_statement -> . WHILE ( expression ) { statement_list }
    (72) iteration_statement -> . FOR ID = expression { statement_list }
    (73) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (51) assignment_expression -> . postfix_expression = expression
    (52) assignment_expression -> . postfix_expression ADDASSIGN expression
    (53) assignment_expression -> . postfix_expression SUBASSIGN expression
    (54) assignment_expression -> . postfix_expression MULASSIGN expression
    (55) assignment_expression -> . postfix_expression DIVASSIGN expression
    (56) eostmt -> . ,
    (57) eostmt -> . ;
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression

    IF              shift and go to state 11
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    ,               shift and go to state 17
    ;               shift and go to state 18
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33
    -               shift and go to state 36

    expression                     shift and go to state 10
    statement_list                 shift and go to state 136
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    assignment_expression          shift and go to state 8
    eostmt                         shift and go to state 9
    postfix_expression             shift and go to state 16
    special_expression             shift and go to state 19
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37

state 132

    (72) iteration_statement -> FOR ID = expression { . statement_list }
    (62) statement_list -> . statement
    (63) statement_list -> . statement statement_list
    (58) statement -> . assignment_statement
    (59) statement -> . expression_statement
    (60) statement -> . selection_statement
    (61) statement -> . iteration_statement
    (66) assignment_statement -> . assignment_expression eostmt
    (64) expression_statement -> . eostmt
    (65) expression_statement -> . expression eostmt
    (67) selection_statement -> . IF ( expression ) statement
    (68) selection_statement -> . IF ( expression ) statement ELSE statement
    (69) selection_statement -> . IF ( expression ) { statement_list }
    (70) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (71) iteration_statement -> . WHILE ( expression ) { statement_list }
    (72) iteration_statement -> . FOR ID = expression { statement_list }
    (73) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (51) assignment_expression -> . postfix_expression = expression
    (52) assignment_expression -> . postfix_expression ADDASSIGN expression
    (53) assignment_expression -> . postfix_expression SUBASSIGN expression
    (54) assignment_expression -> . postfix_expression MULASSIGN expression
    (55) assignment_expression -> . postfix_expression DIVASSIGN expression
    (56) eostmt -> . ,
    (57) eostmt -> . ;
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression

    IF              shift and go to state 11
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    ,               shift and go to state 17
    ;               shift and go to state 18
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33
    -               shift and go to state 36

    expression                     shift and go to state 10
    statement_list                 shift and go to state 137
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    assignment_expression          shift and go to state 8
    eostmt                         shift and go to state 9
    postfix_expression             shift and go to state 16
    special_expression             shift and go to state 19
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37

state 133

    (73) iteration_statement -> FOR ( ID = expression . ) { statement_list }
    (50) expression -> expression . : special_expression

    )               shift and go to state 138
    :               shift and go to state 41


state 134

    (68) selection_statement -> IF ( expression ) statement ELSE . statement
    (58) statement -> . assignment_statement
    (59) statement -> . expression_statement
    (60) statement -> . selection_statement
    (61) statement -> . iteration_statement
    (66) assignment_statement -> . assignment_expression eostmt
    (64) expression_statement -> . eostmt
    (65) expression_statement -> . expression eostmt
    (67) selection_statement -> . IF ( expression ) statement
    (68) selection_statement -> . IF ( expression ) statement ELSE statement
    (69) selection_statement -> . IF ( expression ) { statement_list }
    (70) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (71) iteration_statement -> . WHILE ( expression ) { statement_list }
    (72) iteration_statement -> . FOR ID = expression { statement_list }
    (73) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (51) assignment_expression -> . postfix_expression = expression
    (52) assignment_expression -> . postfix_expression ADDASSIGN expression
    (53) assignment_expression -> . postfix_expression SUBASSIGN expression
    (54) assignment_expression -> . postfix_expression MULASSIGN expression
    (55) assignment_expression -> . postfix_expression DIVASSIGN expression
    (56) eostmt -> . ,
    (57) eostmt -> . ;
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression

    IF              shift and go to state 11
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    ,               shift and go to state 17
    ;               shift and go to state 18
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33
    -               shift and go to state 36

    expression                     shift and go to state 10
    statement                      shift and go to state 139
    assignment_statement           shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    assignment_expression          shift and go to state 8
    eostmt                         shift and go to state 9
    postfix_expression             shift and go to state 16
    special_expression             shift and go to state 19
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37

state 135

    (69) selection_statement -> IF ( expression ) { statement_list . }
    (70) selection_statement -> IF ( expression ) { statement_list . } ELSE { statement_list }

    }               shift and go to state 140


state 136

    (71) iteration_statement -> WHILE ( expression ) { statement_list . }

    }               shift and go to state 141


state 137

    (72) iteration_statement -> FOR ID = expression { statement_list . }

    }               shift and go to state 142


state 138

    (73) iteration_statement -> FOR ( ID = expression ) . { statement_list }

    {               shift and go to state 143


state 139

    (68) selection_statement -> IF ( expression ) statement ELSE statement .

    IF              reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ,               reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ZEROS           reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ONES            reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    EYE             reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    PRINT           reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ID              reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INTNUM          reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FLOATNUM        reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    [               reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    $end            reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    }               reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 68 (selection_statement -> IF ( expression ) statement ELSE statement .)


state 140

    (69) selection_statement -> IF ( expression ) { statement_list } .
    (70) selection_statement -> IF ( expression ) { statement_list } . ELSE { statement_list }

    IF              reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    WHILE           reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    FOR             reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    ,               reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    ;               reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    ZEROS           reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    ONES            reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    EYE             reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    PRINT           reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    RETURN          reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    CONTINUE        reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    BREAK           reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    ID              reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    INTNUM          reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    FLOATNUM        reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    (               reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    [               reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    -               reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    $end            reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    }               reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)
    ELSE            reduce using rule 69 (selection_statement -> IF ( expression ) { statement_list } .)

  ! ELSE            [ shift and go to state 144 ]


state 141

    (71) iteration_statement -> WHILE ( expression ) { statement_list } .

    IF              reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    WHILE           reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    FOR             reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    ,               reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    ;               reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    ZEROS           reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    ONES            reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    EYE             reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    PRINT           reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    RETURN          reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    CONTINUE        reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    BREAK           reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    ID              reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    INTNUM          reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    FLOATNUM        reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    (               reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    [               reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    -               reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    $end            reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    }               reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)
    ELSE            reduce using rule 71 (iteration_statement -> WHILE ( expression ) { statement_list } .)


state 142

    (72) iteration_statement -> FOR ID = expression { statement_list } .

    IF              reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    WHILE           reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    FOR             reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    ,               reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    ;               reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    ZEROS           reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    ONES            reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    EYE             reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    PRINT           reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    RETURN          reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    CONTINUE        reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    BREAK           reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    ID              reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    INTNUM          reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    FLOATNUM        reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    (               reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    [               reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    -               reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    $end            reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    }               reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)
    ELSE            reduce using rule 72 (iteration_statement -> FOR ID = expression { statement_list } .)


state 143

    (73) iteration_statement -> FOR ( ID = expression ) { . statement_list }
    (62) statement_list -> . statement
    (63) statement_list -> . statement statement_list
    (58) statement -> . assignment_statement
    (59) statement -> . expression_statement
    (60) statement -> . selection_statement
    (61) statement -> . iteration_statement
    (66) assignment_statement -> . assignment_expression eostmt
    (64) expression_statement -> . eostmt
    (65) expression_statement -> . expression eostmt
    (67) selection_statement -> . IF ( expression ) statement
    (68) selection_statement -> . IF ( expression ) statement ELSE statement
    (69) selection_statement -> . IF ( expression ) { statement_list }
    (70) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (71) iteration_statement -> . WHILE ( expression ) { statement_list }
    (72) iteration_statement -> . FOR ID = expression { statement_list }
    (73) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (51) assignment_expression -> . postfix_expression = expression
    (52) assignment_expression -> . postfix_expression ADDASSIGN expression
    (53) assignment_expression -> . postfix_expression SUBASSIGN expression
    (54) assignment_expression -> . postfix_expression MULASSIGN expression
    (55) assignment_expression -> . postfix_expression DIVASSIGN expression
    (56) eostmt -> . ,
    (57) eostmt -> . ;
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression

    IF              shift and go to state 11
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    ,               shift and go to state 17
    ;               shift and go to state 18
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33
    -               shift and go to state 36

    expression                     shift and go to state 10
    statement_list                 shift and go to state 145
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    assignment_expression          shift and go to state 8
    eostmt                         shift and go to state 9
    postfix_expression             shift and go to state 16
    special_expression             shift and go to state 19
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37

state 144

    (70) selection_statement -> IF ( expression ) { statement_list } ELSE . { statement_list }

    {               shift and go to state 146


state 145

    (73) iteration_statement -> FOR ( ID = expression ) { statement_list . }

    }               shift and go to state 147


state 146

    (70) selection_statement -> IF ( expression ) { statement_list } ELSE { . statement_list }
    (62) statement_list -> . statement
    (63) statement_list -> . statement statement_list
    (58) statement -> . assignment_statement
    (59) statement -> . expression_statement
    (60) statement -> . selection_statement
    (61) statement -> . iteration_statement
    (66) assignment_statement -> . assignment_expression eostmt
    (64) expression_statement -> . eostmt
    (65) expression_statement -> . expression eostmt
    (67) selection_statement -> . IF ( expression ) statement
    (68) selection_statement -> . IF ( expression ) statement ELSE statement
    (69) selection_statement -> . IF ( expression ) { statement_list }
    (70) selection_statement -> . IF ( expression ) { statement_list } ELSE { statement_list }
    (71) iteration_statement -> . WHILE ( expression ) { statement_list }
    (72) iteration_statement -> . FOR ID = expression { statement_list }
    (73) iteration_statement -> . FOR ( ID = expression ) { statement_list }
    (51) assignment_expression -> . postfix_expression = expression
    (52) assignment_expression -> . postfix_expression ADDASSIGN expression
    (53) assignment_expression -> . postfix_expression SUBASSIGN expression
    (54) assignment_expression -> . postfix_expression MULASSIGN expression
    (55) assignment_expression -> . postfix_expression DIVASSIGN expression
    (56) eostmt -> . ,
    (57) eostmt -> . ;
    (49) expression -> . special_expression
    (50) expression -> . expression : special_expression
    (8) postfix_expression -> . primary_expression
    (9) postfix_expression -> . array_expression
    (10) postfix_expression -> . postfix_expression '
    (40) special_expression -> . equality_expression
    (41) special_expression -> . ZEROS ( additive_expression )
    (42) special_expression -> . ONES ( additive_expression )
    (43) special_expression -> . EYE ( additive_expression )
    (44) special_expression -> . PRINT print_index_expression_list
    (45) special_expression -> . PRINT NORMSTRING
    (46) special_expression -> . RETURN postfix_expression
    (47) special_expression -> . CONTINUE
    (48) special_expression -> . BREAK
    (2) primary_expression -> . ID
    (3) primary_expression -> . INTNUM
    (4) primary_expression -> . FLOATNUM
    (5) primary_expression -> . ( expression )
    (6) primary_expression -> . [ ]
    (7) primary_expression -> . [ index_expression_list ]
    (18) array_expression -> . ID ( index_expression_list )
    (19) array_expression -> . ID [ index_expression_list ]
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ relational_expression
    (39) equality_expression -> . equality_expression NOTEQ relational_expression
    (32) relational_expression -> . additive_expression
    (33) relational_expression -> . relational_expression < additive_expression
    (34) relational_expression -> . relational_expression > additive_expression
    (35) relational_expression -> . relational_expression LESSEREQ additive_expression
    (36) relational_expression -> . relational_expression GREATEREQ additive_expression
    (27) additive_expression -> . multiplicative_expression
    (28) additive_expression -> . additive_expression + multiplicative_expression
    (29) additive_expression -> . additive_expression - multiplicative_expression
    (30) additive_expression -> . additive_expression DOTADD multiplicative_expression
    (31) additive_expression -> . additive_expression DOTMINUS multiplicative_expression
    (22) multiplicative_expression -> . unary_expression
    (23) multiplicative_expression -> . multiplicative_expression * unary_expression
    (24) multiplicative_expression -> . multiplicative_expression / unary_expression
    (25) multiplicative_expression -> . multiplicative_expression DOTMUL unary_expression
    (26) multiplicative_expression -> . multiplicative_expression DOTDIV unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . - postfix_expression

    IF              shift and go to state 11
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    ,               shift and go to state 17
    ;               shift and go to state 18
    ZEROS           shift and go to state 23
    ONES            shift and go to state 25
    EYE             shift and go to state 26
    PRINT           shift and go to state 27
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    ID              shift and go to state 15
    INTNUM          shift and go to state 31
    FLOATNUM        shift and go to state 32
    (               shift and go to state 12
    [               shift and go to state 33
    -               shift and go to state 36

    expression                     shift and go to state 10
    statement_list                 shift and go to state 148
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    assignment_expression          shift and go to state 8
    eostmt                         shift and go to state 9
    postfix_expression             shift and go to state 16
    special_expression             shift and go to state 19
    primary_expression             shift and go to state 20
    array_expression               shift and go to state 21
    equality_expression            shift and go to state 22
    additive_expression            shift and go to state 24
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37

state 147

    (73) iteration_statement -> FOR ( ID = expression ) { statement_list } .

    IF              reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    WHILE           reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    FOR             reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    ,               reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    ;               reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    ZEROS           reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    ONES            reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    EYE             reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    PRINT           reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    RETURN          reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    CONTINUE        reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    BREAK           reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    ID              reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    INTNUM          reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    FLOATNUM        reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    (               reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    [               reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    -               reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    $end            reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    }               reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)
    ELSE            reduce using rule 73 (iteration_statement -> FOR ( ID = expression ) { statement_list } .)


state 148

    (70) selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list . }

    }               shift and go to state 149


state 149

    (70) selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .

    IF              reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    WHILE           reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    FOR             reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    ,               reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    ;               reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    ZEROS           reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    ONES            reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    EYE             reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    PRINT           reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    RETURN          reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    CONTINUE        reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    BREAK           reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    ID              reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    INTNUM          reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    FLOATNUM        reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    (               reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    [               reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    -               reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    $end            reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    }               reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)
    ELSE            reduce using rule 70 (selection_statement -> IF ( expression ) { statement_list } ELSE { statement_list } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for , in state 65 resolved as shift
WARNING: shift/reduce conflict for , in state 128 resolved as shift
WARNING: shift/reduce conflict for ; in state 128 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 129 resolved as shift
